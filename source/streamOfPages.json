{"Path":".\/community\/contributing.md","Content":"---\naliases:\n- \/doc\/contributing\/\n- \/meta\/contributing\/\ndate: 2013-07-01\nmenu:\n  main:\n    parent: community\nnext: \/tutorials\/automated-deployments\nprev: \/community\/press\ntitle: Contributing to Hugo\nweight: 30\n---\n\nAll contributions to Hugo are welcome. Whether you want to scratch an itch, or simply contribute to the project, feel free to pick something from the roadmap\nor contact [spf13](http:\/\/spf13.com\/) about what may make sense\nto do next.\n\nYou should fork the project and make your changes.  *We encourage pull requests to discuss code changes.*\n\n\nWhen you're ready to create a pull request, be sure to:\n\n  * Have test cases for the new code.  If you have questions about how to do it, please ask in your pull request.\n  * Run `go fmt`\n  * Squash your commits into a single commit.  `git rebase -i`.  It's okay to force update your pull request.\n  * Make sure `go test .\/...` passes, and `go build` completes.  Our [Travis CI loop](https:\/\/travis-ci.org\/spf13\/hugo) will catch most things that are missing.  The exception: Windows.  We run on Windows from time to time, but if you have access, please check on a Windows machine too.\n\n## Contribution Overview\n\n1. Fork Hugo from https:\/\/github.com\/spf13\/hugo\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Commit passing tests to validate changes.\n5. Run `go fmt`\n6. Squash commits into a single (or logically grouped) commits (`git rebase -i`)\n7. Push to the branch (`git push origin my-new-feature`)\n8. Create new Pull Request\n\n\n# Building from source\n\n## Clone locally (for contributors):\n\n    git clone https:\/\/github.com\/spf13\/hugo\n    cd hugo\n    go get\n\nBecause Go expects all of your libraries to be found in either\n`$GOROOT` or `$GOPATH`, it's helpful to symlink the project to one\nof the following paths:\n\n * `ln -s \/path\/to\/your\/hugo $GOPATH\/src\/github.com\/spf13\/hugo`\n * `ln -s \/path\/to\/your\/hugo $GOROOT\/src\/pkg\/github.com\/spf13\/hugo`\n\n## Running Hugo\n\n    cd \/path\/to\/hugo\n    go install github.com\/spf13\/hugo\/hugo\n    go run main.go\n\n## Building Hugo\n\n    cd \/path\/to\/hugo\n    go build -o hugo main.go\n    mv hugo \/usr\/local\/bin\/\n\n"}
{"Path":".\/community\/mailing-list.md","Content":"---\ndate: 2013-07-01\nmenu:\n  main:\n    parent: community\nnext: \/community\/press\nprev: \/extras\/urls\ntitle: Mailing List\nweight: 10\n---\n\n## Discussion Forum\n\nHugo has its own [discussion forum](http:\/\/discuss.gohugo.io\/) powered by [Discourse](http:\/\/www.discourse.org\/).\n\nPlease use this for all discussions, questions, etc.\n\n## Mailing List\n\nHugo has two mailing lists:\n\n### Announcements\nVery low traffic. Only releases will be emailed here.\n\nhttps:\/\/groups.google.com\/forum\/#!forum\/hugo-announce\n\n### Discussion (Archive)\n\n**This has been replaced with the [Hugo discussion forum](http:\/\/discuss.gohugo.io\/).**\n\nIt is available for archival purposes.\n\nhttps:\/\/groups.google.com\/forum\/#!forum\/hugo-discuss\n\n\n## Other Resources\n\n### GoNuts\n\nFor general Go questions or discussion please refer to the Go mailing list.\n\nhttps:\/\/groups.google.com\/forum\/#!forum\/golang-nuts\n\n### GitHub Issues\n\nhttps:\/\/github.com\/spf13\/hugo\/issues\n\n### Twitter\n\nHugo doesn't have its own Twitter handle, but feel free to tweet [@spf13](http:\/\/twitter.com\/spf13).\n"}
{"Path":".\/community\/press.md","Content":"---\ndate: 2014-03-24T20:00:00Z\nlinktitle: Press\nmenu:\n  main:\n    parent: community\nnext: \/community\/contributing\nnotoc: true\nprev: \/community\/mailing-list\ntitle: Press, Blogs and Media Coverage\nweight: 20\n---\n\nHugo has been featured in the following Blog Posts, Press and Media.\n\n\n| Title | Author | Date  |\n| ------ | ------ | -----: |\n| [\u628a\u8fd9\u4e2a\u535a\u5ba2\u9759\u6001\u5316\u4e86 <small>(Migrate to Hugo)<\/small>](http:\/\/lich-eng.com\/2015\/01\/03\/migrate-to-hugo\/) | Li Cheng | 3 Jan 2015 |\n| [My Hugo Experiment](http:\/\/baty.net\/2014\/12\/2014-12-31-my-hugo-experiment\/) | Jack Baty | 31 Dec 2014 |\n| [Travel Blogging Setup](http:\/\/www.stou.dk\/2014\/11\/travel-blogging-setup\/) | Rasmus Stougaard | 23 Nov 2014 |\n| [\u4f7f\u7528Hugo\u642d\u5efa\u514d\u8d39\u4e2a\u4ebaBlog <small>(How to use Hugo)<\/small>](http:\/\/ulricqin.com\/post\/how-to-use-hugo\/) | Ulric Qin \u79e6\u6653\u8f89 | 11 Nov 2014 |\n| [Hugo para crear sitios web est\u00e1ticos](http:\/\/www.webbizarro.com\/noticias\/1076\/hugo-para-crear-sitios-web-estaticos\/) | Web Bizarro | 19 Aug 2014 |\n| [Hello Hugo!](http:\/\/commiechink.com\/2014\/08\/hello-hugo\/) | Jason Yee | 19 Aug 2014 |\n| [Going with hugo](http:\/\/www.markuseliasson.se\/article\/going-with-hugo\/) | Markus Eliasson | 18 Aug 2014 |\n| [Benchmarking Jekyll, Hugo and Wintersmith](http:\/\/www.internaldeployment.se\/post\/2014-08-12-Jekyll-and-its-alternatives-from-a-site-generation-point-of-view\/)  | Fredrik Loch | 12 Aug 2014 |\n| [Goodbye Octopress, Hello Hugo!](http:\/\/andreimihu.com\/blog\/2014\/08\/11\/goodbye-octopress-hello-hugo\/)  | Andrei Mihu | 11 Aug 2014 |\n| [Beautiful sites for Open Source projects](http:\/\/beautifulopen.com\/2014\/08\/09\/hugo\/)  | Beautiful Open | 9 Aug 2014 |\n| [Hugo: Beyond the Defaults](http:\/\/npf.io\/2014\/08\/hugo-beyond-the-defaults\/)  | Nate Finch | 8 Aug 2014 |\n| [First Impressions of Hugo](https:\/\/peteraba.com\/blog\/first-impressions-of-hugo\/)  | Peter Aba | 6 Aug 2014 |\n| [New Site Workflow](http:\/\/vurt.co.uk\/post\/new_website\/) | Giles Paterson | 5 Aug 2014 |\n| [How I Learned to Stop Worrying and Love the (Static) Web](http:\/\/cognition.ca\/post\/about-hugo\/) |  Joshua McKenty | 4 Aug 2014 |\n| [Hugo over Octopress](http:\/\/kennywoo.com\/blog\/hugo---golang-based-static-site-generator\/)  | Kenny Woo | 3 Aug 2014 |\n| [Hugo Is Friggin' Awesome](http:\/\/npf.io\/2014\/08\/hugo-is-awesome\/)  | Nate Finch | 1 Aug 2014 |\n| [\u518d\u6b21\u642c\u5bb6 <small>(Move from WordPress to Hugo)<\/small>](http:\/\/www.chingli.com\/misc\/move-from-wordpress-to-hugo\/) | \u9752\u783e (chingli) | 12 July 2014 |\n| [Embedding Gists in Hugo](http:\/\/danmux.com\/posts\/embedded_gists\/)  | Dan Mull | 5 July 2014 |\n| [An Introduction To Hugo](http:\/\/www.cirrushosting.com\/web-hosting-blog\/an-introduction-to-hugo\/)  | Dan Silber | 1 July 2014 |\n| [Moving to Hugo](http:\/\/danmux.com\/posts\/hugo_based_blog\/) | Dan Mull | 29 May 2014   |\n| [\u5f00\u6e90\u4e4b\u9759\u6001\u7ad9\u70b9\u751f\u6210\u5668\u6392\u884c\u699c<br><small>(Leaderboard of open-source static website generators)<\/small>](http:\/\/code.csdn.net\/news\/2819909) | CSDN.net | 23 May 2014   |\n| [How I deploy this site using Fabric](http:\/\/carlorat.me\/quote\/fabric\/) | Carlo Ratam | 21 May 2014   |\n| [Finally, a satisfying and effective blog setup](http:\/\/michaelwhatcott.com\/now-powered-by-hugo\/) | Michael Whatcott | 20 May 2014   |\n| [Hugo from scratch](http:\/\/zackofalltrades.com\/notes\/2014\/05\/hugo-from-scratch\/) | Zack Williams | 18 May 2014   |\n| [Why I switched away from Jekyll](http:\/\/www.jakejanuzelli.com\/why-I-switched-away-from-jekyll\/) | Jake Januzelli | 10 May 2014   |\n| [Welcome our new blog](http:\/\/blog.ninya.io\/posts\/welcome-our-new-blog\/) | Ninya.io |  11 Apr 2014   |\n| [Mission Not Accomplished](http:\/\/johnsto.co.uk\/blog\/mission-not-accomplished\/) | Dave Johnston |  3 Apr 2014   |\n| [Hugo - A Static Site Builder in Go](http:\/\/deepfriedcode.com\/post\/hugo\/) | Deep Fried Code |  30 Mar 2014   |\n| [Adventures in Angular Podcast](http:\/\/devchat.tv\/adventures-in-angular\/003-aia-gdes) | Matias Niemela |  28 Mar 2014   |\n| [Hugo](http:\/\/bra.am\/post\/hugo\/) | bra.am |  23 Mar 2014   |\n| [Converting Blogger To Markdown](http:\/\/trishagee.github.io\/project\/atom-to-hugo\/) | Trisha Gee |  20 Mar 2014   |\n| [Moving to Hugo Static Web Pages](http:\/\/tepid.org\/tech\/hugo-web\/) |  Tobias Weingartner  |  16 Mar 2014   |\n| [Hugo and GitHub Pages](http:\/\/sglyon.com\/blog\/2014\/creating-the-site\/) | Spencer Lyon |  15 Mar 2014   |\n| [New Blog Engine: Hugo](https:\/\/blog.afoolishmanifesto.com\/posts\/hugo\/) | fREW Schmidt  |  15 Mar 2014   |\n| [Hugo + gulp.js = Huggle](http:\/\/ktmud.github.io\/huggle\/en\/intro\/) ([English](http:\/\/ktmud.github.io\/huggle\/en\/intro\/), [\u4e2d\u6587](http:\/\/ktmud.github.io\/huggle\/zh\/intro\/)) | Jesse Yang \u6768\u5efa\u8d85 | 8 Mar 2014   |\n| [Powered by Hugo](http:\/\/kieranhealy.org\/blog\/archives\/2014\/02\/24\/powered-by-hugo\/) | Kieran Healy  | 24 Feb 2014   |\n| [\u9759\u7684\u30b5\u30a4\u30c8\u3092\u7d20\u65e9\u304f\u69cb\u7bc9\u3059\u308b\u305f\u3081\u306b<br>GoLang\u3067\u4f5c\u3089\u308c\u305f\u30b8\u30a7\u30cd\u30ec\u30fc\u30bfHugo](http:\/\/hamasyou.com\/blog\/2014\/02\/21\/hugo\/) | <div style=\"line-height: 1.1;\">Shogo Hamada<br>\u6ff1\u7530\u7ae0\u543e<\/div> | 21 Feb 2014   |\n| [Latest Roundup of Useful Tools For Developers](http:\/\/codegeekz.com\/latest-roundup-of-useful-tools-for-developers\/) | CodeGeekz  |  13 Feb 2014   |\n| [Hugo: Static Site Generator written in Go](http:\/\/www.braveterry.com\/2014\/02\/06\/hugo-static-site-generator-written-in-go\/) | Brave Terry  | 6 Feb 2014   |\n| [10 Useful HTML5 Tools for Web Designers and Developers](http:\/\/designdizzy.com\/10-useful-html5-tools-for-web-designers-and-developers\/) | Design Dizzy  | 4 Feb 2014   |\n| [Hugo \u2013 Fast, Flexible Static Site Generator](http:\/\/cube3x.com\/hugo-fast-flexible-static-site-generator\/) |  Joby Joseph |  18 Jan 2014   |\n| [Hugo: A new way to build static website](http:\/\/www.w3update.com\/opensource\/hugo-a-new-way-to-build-static-website.html) | w3update | 17 Jan  2014   |\n| [Xaprb now uses Hugo](http:\/\/xaprb.com\/blog\/2014\/01\/15\/using-hugo\/) | Baron Schwartz  | 15 Jan 2014   |\n| [New jQuery Plugins And Resources That Web Designers Need](http:\/\/www.designyourway.net\/blog\/resources\/new-jquery-plugins-and-resources-that-web-designers-need\/) | Design Your Way  |   2014   |\n| [On Blog Construction](http:\/\/alexla.sh\/post\/on-blog-construction\/) | Alexander Lash |  27 Dec 2013   |\n| [Hugo](http:\/\/onethingwell.org\/post\/69070926608\/hugo) | One Thing Well  |  5 Dec 2013   |\n| [In Praise Of Hugo](http:\/\/sound-guru.com\/blog\/post\/hello-world\/) | sound-guru.com  |  19 Oct 2013   |\n| [Hosting a blog on S3 and Cloudfront](http:\/\/www.danesparza.net\/2013\/07\/hosting-a-blog-on-s3-and-cloudfront\/) | Dan Esparza  | 24 July 2013   |\n\n### Wrote a post, article or tutorial?\n\nHave you written a post, article or tutorial on hugo? Send us a pull request or issue with the addition.\n"}
{"Path":".\/content\/dir1\/archetypes.md","Content":"---\ndate: 2014-05-14T02:13:50Z\nmenu:\n  main:\n    parent: content\nnext: \/content\/ordering\nprev: \/content\/types\ntitle: Archetypes\nweight: 50\n---\n\nHugo v0.11 introduced the concept of a content builder. Using the\ncommand: <code>hugo new <em>[relative new content path]<\/em><\/code>,\nyou can start a content file with the date and title automatically set.\nWhile this is a welcome feature, active writers need more.\n\nHugo presents the concept of archetypes, which are archetypal content files\nwith pre-configured [front matter](content\/front-matter) which will\npopulate each new content file whenever you run the `hugo new` command.\n\n\n## Example\n\n### Step 1. Creating an archetype\n\nIn this example scenario, we have a blog with a single content type (blog post).\nWe will use \u2018tags\u2019 and \u2018categories\u2019 for our taxonomies, so let's create an archetype file with \u2018tags\u2019 and \u2018categories\u2019 pre-defined, as follows:\n\n#### archetypes\/default.md\n\n    +++\n    tags = [\"x\", \"y\"]\n    categories = [\"x\", \"y\"]\n    +++\n\n> __CAVEAT:__  Some editors (e.g. Sublime, Emacs) do not insert an EOL (end-of-line) character at the end of the file (i.e. EOF).  If you get a [strange EOF error](\/troubleshooting\/strange-eof-error\/) when using `hugo new`, please open each archetype file (i.e.&nbsp;`archetypes\/*.md`) and press <kbd>Enter<\/kbd> to type a carriage return after the closing `+++` or `---` as necessary.\n\n\n### Step 2. Using the archetype\n\nNow, with `archetypes\/default.md` in place, let's create a new post in the `post` section with the `hugo new` command:\n\n    $ hugo new post\/my-new-post.md\n\nHugo would create the file with the following contents:\n\n#### content\/post\/my-new-post.md\n\n    +++\n    title = \"my new post\"\n    date = \"2015-01-12T19:20:04-07:00\"\n    tags = [\"x\", \"y\"]\n    categories = [\"x\", \"y\"]\n    +++\n\nWe see that the `title` and `date` variables have been added, in addition to the `tags` and `categories` variables which were carried over from `archetype\/default.md`.\n\nCongratulations!  We have successfully created an archetype and used it for our new contents.  That's all there is to it!\n\n\n## Using a different front matter format\n\nBy default, the front matter will be created in the TOML format\nregardless of what format the archetype is using.\n\nYou can specify a different default format in your site-wide config file\n(e.g. `config.toml`) using the `MetaDataFormat` directive.\nPossible values are `\"toml\"`, `\"yaml\"` and `\"json\"`.\n\n\n## Which archetype is being used\n\nThe following rules apply:\n\n* If an archetype with a filename that matches the content type being created, it will be used.\n* If no match is found, `archetypes\/default.md` will be used.\n* If neither is present and a theme is in use, then within the theme:\n    * If an archetype with a filename that matches the content type being created, it will be used.\n    * If no match is found, `archetypes\/default.md` will be used.\n* If no archetype files are present, then the one that ships with Hugo will be used.\n\nHugo provides a simple archetype which sets the `title` (based on the\nfile name) and the `date` in RFC&nbsp;3339 format based on\n[`now()`](http:\/\/golang.org\/pkg\/time\/#Now), which returns the current time.\n\n> *Note: `hugo new` does not automatically add `draft = true` when the user\n> provides an archetype.  This is by design, rationale being that\n> the archetype should set its own value for all fields.\n> `title` and `date`, which are dynamic and unique for each piece of content,\n> are the sole exceptions.*\n\nContent type is automatically detected based on the path. You are welcome to declare which type to create using the `--kind` flag during creation.\n"}
{"Path":".\/content\/dir1\/example.md","Content":"---\naliases:\n- \/doc\/example\/\ndate: 2013-07-01\nlinktitle: Example\nmenu:\n  main:\n    parent: content\nnext: \/themes\/overview\nnotoc: true\nprev: \/content\/summaries\ntitle: Example Content File\nweight: 70\n---\n\nSome things are better shown than explained. The following is a very basic example of a content file written in [Markdown](https:\/\/help.github.com\/articles\/github-flavored-markdown\/):\n\n**mysite\/content\/project\/nitro.md \u2192 http:\/\/mysite.com\/project\/nitro.html**\n\nWith TOML front matter:\n\n```markdown\n+++\ndate        = \"2013-06-21T11:27:27-04:00\"\ntitle       = \"Nitro: A quick and simple profiler for Go\"\ndescription = \"Nitro is a simple profiler for your Golang applications\"\ntags        = [ \"Development\", \"Go\", \"profiling\" ]\ntopics      = [ \"Development\", \"Go\" ]\nslug        = \"nitro\"\nproject_url = \"https:\/\/github.com\/spf13\/nitro\"\n+++\n\n# Nitro\n\nQuick and easy performance analyzer library for [Go](http:\/\/golang.org\/).\n\n## Overview\n\nNitro is a quick and easy performance analyzer library for Go.\nIt is useful for comparing A\/B against different drafts of functions\nor different functions.\n\n## Implementing Nitro\n\nUsing Nitro is simple. First, use `go get` to install the latest version\nof the library.\n\n    $ go get github.com\/spf13\/nitro\n\nNext, include nitro in your application.\n```\n\nYou may also use the equivalent YAML front matter:\n\n```markdown\n---\ndate:        \"2013-06-21T11:27:27-04:00\"\ntitle:       \"Nitro: A quick and simple profiler for Go\"\ndescription: \"Nitro is a simple profiler for your Go lang applications\"\ntags:        [ \"Development\", \"Go\", \"profiling\" ]\ntopics:      [ \"Development\", \"Go\" ]\nslug:        \"nitro\"\nproject_url: \"https:\/\/github.com\/spf13\/nitro\"\n---\n```\n\n`nitro.md` would be rendered as follows:\n\n> # Nitro\n>\n> Quick and easy performance analyzer library for [Go](http:\/\/golang.org\/).\n>\n> ## Overview\n>\n> Nitro is a quick and easy performance analyzer library for Go.\n> It is useful for comparing A\/B against different drafts of functions\n> or different functions.\n>\n> ## Implementing Nitro\n>\n> Using Nitro is simple. First, use `go get` to install the latest version\n> of the library.\n>\n>     $ go get github.com\/spf13\/nitro\n>\n> Next, include nitro in your application.\n\nThe source `nitro.md` file is converted to HTML by the excellent\n[Blackfriday](https:\/\/github.com\/russross\/blackfriday) Markdown processor,\nwhich supports extended features found in the popular\n[GitHub Flavored Markdown](https:\/\/help.github.com\/articles\/github-flavored-markdown\/).\n"}
{"Path":".\/content\/front-matter.md","Content":"---\naliases:\n- \/doc\/front-matter\/\ndate: 2013-07-01\nmenu:\n  main:\n    parent: content\nnext: \/content\/sections\nprev: \/content\/organization\ntitle: Front Matter\nweight: 20\n---\n\nThe **front matter** is one of the features that gives Hugo its strength. It enables\nyou to include the meta data of the content right with it. Hugo supports a few\ndifferent formats, each with their own identifying tokens.\n\nSupported formats:\n\n  * **[TOML][]**, identified by '`+++`'.\n  * **[YAML][]**, identified by '`---`'.\n  * **[JSON][]**, a single JSON object which is surrounded by '`{`' and '`}`', each on their own line.\n\n[TOML]: https:\/\/github.com\/toml-lang\/toml \"Tom's Obvious, Minimal Language\"\n[YAML]: http:\/\/www.yaml.org\/ \"YAML Ain't Markup Language\"\n[JSON]: http:\/\/www.json.org\/ \"JavaScript Object Notation\"\n\n### TOML Example\n\n    +++\n    title = \"spf13-vim 3.0 release and new website\"\n    description = \"spf13-vim is a cross platform distribution of vim plugins and resources for Vim.\"\n    tags = [ \".vimrc\", \"plugins\", \"spf13-vim\", \"vim\" ]\n    date = \"2012-04-06\"\n    categories = [\n      \"Development\",\n      \"VIM\"\n    ]\n    slug = \"spf13-vim-3-0-release-and-new-website\"\n    +++\n    \n    Content of the file goes Here\n\n### YAML Example\n\n    ---\n    title: \"spf13-vim 3.0 release and new website\"\n    description: \"spf13-vim is a cross platform distribution of vim plugins and resources for Vim.\"\n    tags: [ \".vimrc\", \"plugins\", \"spf13-vim\", \"vim\" ]\n    date: \"2012-04-06\"\n    categories:\n      - \"Development\"\n      - \"VIM\"\n    slug: \"spf13-vim-3-0-release-and-new-website\"\n    ---\n    \n    Content of the file goes Here\n\n### JSON Example\n\n    {\n        \"title\": \"spf13-vim 3.0 release and new website\",\n        \"description\": \"spf13-vim is a cross platform distribution of vim plugins and resources for Vim.\",\n        \"tags\": [ \".vimrc\", \"plugins\", \"spf13-vim\", \"vim\" ],\n        \"date\": \"2012-04-06\",\n        \"categories\": [\n            \"Development\",\n            \"VIM\"\n        ],\n        \"slug\": \"spf13-vim-3-0-release-and-new-website\",\n    }\n    \n    Content of the file goes Here\n\n## Variables\n\nThere are a few predefined variables that Hugo is aware of and utilizes. The user can also create\nany variable they want to. These will be placed into the `.Params` variable available to the templates.\nField names are always normalized to lowercase (e.g. `camelCase: true` is available as `.Params.camelcase`).\n\n### Required variables\n\n* **title** The title for the content\n* **description** The description for the content\n* **date** The date the content will be sorted by\n* **taxonomies** These will use the field name of the plural form of the index (see tags and categories above)\n\n### Optional variables\n\n* **redirect** Mark the post as a redirect post\n* **draft** If true, the content will not be rendered unless `hugo` is called with `--buildDrafts`\n* **publishdate** If in the future, content will not be rendered unless `hugo` is called with `--buildFuture`\n* **type** The type of the content (will be derived from the directory automatically if unset)\n* **weight** Used for sorting\n* **markup** *(Experimental)* Specify `\"rst\"` for reStructuredText (requires\n            `rst2html`) or `\"md\"` (default) for Markdown\n* **slug** The token to appear in the tail of the URL,\n   *or*<br>\n* **url** The full path to the content from the web root.<br>\n\n*If neither `slug` or `url` is present, the filename will be used.*\n\n## Configure Blackfriday rendering\n\nIt's possible to set some options for Markdown rendering in the page's front matter, as an override to the site wide configuration.\n\nSee [Configuration](< ref \"overview\/configuration.md#configure-blackfriday-rendering\" >) for more.\n\n"}
{"Path":".\/content\/dir2\/ordering.md","Content":"---\ndate: 2014-03-06\nlinktitle: Ordering\nmenu:\n  main:\n    parent: content\nnext: \/content\/summaries\nprev: \/content\/archetypes\ntitle: Ordering Content\nweight: 60\n---\n\nHugo provides you with all the flexibility you need to organize how your content is ordered.\n\nBy default, content is ordered by weight, then by date with the most\nrecent date first, but alternative sorting (by `title` and `linktitle`) is\nalso available. The order the content would appear is specified in\nthe [list template](\/templates\/list\/).\n\n_Both the `date` and `weight` fields are optional._\n\nUnweighted pages appear at the end of the list. If no weights are provided (or\nif weights are the same), `date` will be used to sort. If neither is provided,\ncontent will be ordered based on how it's read off the disk, and no order is\nguaranteed.\n\n## Assigning weight to content\n\n    +++\n    weight = 4\n    title = \"Three\"\n    date = \"2012-04-06\"\n    +++\n    Front Matter with Ordered Pages 3\n\n\n## Ordering Content Within Taxonomies\n\nPlease see the [Taxonomy Ordering Documentation](\/taxonomies\/ordering\/).\n"}
{"Path":".\/content\/organization.md","Content":"---\naliases:\n- \/doc\/organization\/\ndate: 2013-07-01\nlinktitle: Organization\nmenu:\n  main:\n    parent: content\nnext: \/content\/front-matter\nprev: \/overview\/source-directory\ntitle: Content Organization\nweight: 10\n---\n\nHugo uses Markdown files with headers commonly called the *front matter*. Hugo\nrespects the organization that you provide for your content to minimize any\nextra configuration, though this can be overridden by additional configuration\nin the front matter.\n\n## Organization\n\nIn Hugo, the content should be arranged in the same way they are intended for\nthe rendered website. Without any additional configuration, the following will\njust work. Hugo supports content nested at any level. The top level is special\nin Hugo and is used as the [section](\/content\/sections\/).\n\n    .\n    \u2514\u2500\u2500 content\n        \u251c\u2500\u2500 post\n        |   \u251c\u2500\u2500 firstpost.md   \/\/ <- http:\/\/1.com\/post\/firstpost\/\n        |   \u251c\u2500\u2500 happy\n        |   |   \u2514\u2500\u2500 ness.md    \/\/ <- http:\/\/1.com\/post\/happy\/ness\/\n        |   \u2514\u2500\u2500 secondpost.md  \/\/ <- http:\/\/1.com\/post\/secondpost\/\n        \u2514\u2500\u2500 quote\n            \u251c\u2500\u2500 first.md       \/\/ <- http:\/\/1.com\/quote\/first\/\n            \u2514\u2500\u2500 second.md      \/\/ <- http:\/\/1.com\/quote\/second\/\n\n**Here's the same organization run with `hugo --uglyUrls`**\n\n    .\n    \u2514\u2500\u2500 content\n        \u251c\u2500\u2500 post\n        |   \u251c\u2500\u2500 firstpost.md   \/\/ <- http:\/\/1.com\/post\/firstpost.html\n        |   \u251c\u2500\u2500 happy\n        |   |   \u2514\u2500\u2500 ness.md    \/\/ <- http:\/\/1.com\/post\/happy\/ness.html\n        |   \u2514\u2500\u2500 secondpost.md  \/\/ <- http:\/\/1.com\/post\/secondpost.html\n        \u2514\u2500\u2500 quote\n            \u251c\u2500\u2500 first.md       \/\/ <- http:\/\/1.com\/quote\/first.html\n            \u2514\u2500\u2500 second.md      \/\/ <- http:\/\/1.com\/quote\/second.html\n\n## Destinations\n\nHugo believes that you organize your content with a purpose. The same structure\nthat works to organize your source content is used to organize the rendered\nsite. As displayed above, the organization of the source content will be\nmirrored in the destination.\n\nThere are times when one would need more control over their content. In these\ncases, there are a variety of things that can be specified in the front matter\nto determine the destination of a specific piece of content.\n\nThe following items are defined in order, latter items in the list will override\nearlier settings.\n\n### filename\nThis isn't in the front matter, but is the actual name of the file minus the\nextension. This will be the name of the file in the destination.\n\n### slug\nDefined in the front matter, the slug can take the place of the filename for the\ndestination.\n\n### filepath\nThe actual path to the file on disk. Destination will create the destination\nwith the same path. Includes [section](\/content\/sections\/).\n\n### section\nsection can be provided in the front matter overriding the section derived from\nthe source content location on disk. See [section](\/content\/sections\/).\n\n### path\npath can be provided in the front matter. This will replace the actual\npath to the file on disk. Destination will create the destination with the same\npath. Includes [section](\/content\/sections\/).\n\n### url\nA complete URL can be provided. This will override all the above as it pertains\nto the end destination. This must be the path from the baseurl (starting with a \"\/\").\nWhen a url is provided, it will be used exactly. Using url will ignore the\n`--uglyUrls` setting.\n\n\n## Path breakdown in Hugo\n\n### Content\n\n    .             path           slug\n    .       \u22a2-------^----\u22a3 \u22a2------^-------\u22a3\n    content\/extras\/indexes\/category-example\/index.html\n\n\n    .       section              slug\n    .       \u22a2--^--\u22a3        \u22a2------^-------\u22a3\n    content\/extras\/indexes\/category-example\/index.html\n\n\n    .       section  slug\n    .       \u22a2--^--\u22a3\u22a2--^--\u22a3\n    content\/extras\/indexes\/index.html\n\n### Destination\n\n\n               permalink\n    \u22a2--------------^-------------\u22a3\n    http:\/\/spf13.com\/projects\/hugo\n\n\n       baseUrl       section  slug\n    \u22a2-----^--------\u22a3 \u22a2--^---\u22a3 \u22a2-^\u22a3\n    http:\/\/spf13.com\/projects\/hugo\n\n\n       baseUrl       section          slug\n    \u22a2-----^--------\u22a3 \u22a2--^--\u22a3        \u22a2--^--\u22a3\n    http:\/\/spf13.com\/extras\/indexes\/example\n\n\n       baseUrl            path       slug\n    \u22a2-----^--------\u22a3 \u22a2------^-----\u22a3 \u22a2--^--\u22a3\n    http:\/\/spf13.com\/extras\/indexes\/example\n\n\n       baseUrl            url\n    \u22a2-----^--------\u22a3 \u22a2-----^-----\u22a3\n    http:\/\/spf13.com\/projects\/hugo\n\n\n       baseUrl               url\n    \u22a2-----^--------\u22a3 \u22a2--------^-----------\u22a3\n    http:\/\/spf13.com\/extras\/indexes\/example\n\n\n\n**section** = which type the content is by default\n\n* based on content location \n* front matter overrides\n\n**slug** = name.ext or name\/\n\n* based on content-name.md \n* front matter overrides\n\n**path** = section + path to file excluding slug\n\n* based on path to content location\n\n\n**url** = relative URL\n\n* defined in front matter\n* overrides all the above\n\n"}
{"Path":".\/content\/dir2\/sections.md","Content":"---\ndate: 2013-07-01\nmenu:\n  main:\n    parent: content\nnext: \/content\/types\nnotoc: true\nprev: \/content\/front-matter\ntitle: Sections\nweight: 30\n---\n\nHugo believes that you organize your content with a purpose. The same structure\nthat works to organize your source content is used to organize the rendered\nsite (see [Organization](\/content\/organization\/)). Following this pattern Hugo\nuses the top level of your content organization as **the Section**.\n\nThe following example site uses two sections, \"post\" and \"quote\".\n\n    .\n    \u2514\u2500\u2500 content\n        \u251c\u2500\u2500 post\n        |   \u251c\u2500\u2500 firstpost.md       \/\/ <- http:\/\/1.com\/post\/firstpost\/\n        |   \u251c\u2500\u2500 happy\n        |   |   \u2514\u2500\u2500 ness.md   \/\/ <- http:\/\/1.com\/post\/happy\/ness\/\n        |   \u2514\u2500\u2500 secondpost.md      \/\/ <- http:\/\/1.com\/post\/secondpost\/\n        \u2514\u2500\u2500 quote\n            \u251c\u2500\u2500 first.md           \/\/ <- http:\/\/1.com\/quote\/first\/\n            \u2514\u2500\u2500 second.md          \/\/ <- http:\/\/1.com\/quote\/second\/\n\n\n## Section Lists\n\nHugo will automatically create pages for each section root that list all\nof the content in that section. See [List Templates](\/templates\/list\/)\nfor details on customizing the way they appear.\n\n## Sections and Types\n\nBy default everything created within a section will use the content type\nthat matches the section name.\n\nSection defined in the front matter have the same impact.\n\nTo change the type of a given piece of content, simply define the type\nin the front matter.\n\nIf a layout for a given type hasn't been provided, a default type template will\nbe used instead provided it exists.\n\n\n"}
{"Path":".\/content\/summaries.md","Content":"---\ndate: 2013-07-01\nmenu:\n  main:\n    parent: content\nnext: \/content\/example\nnotoc: true\nprev: \/content\/ordering\ntitle: Summaries\nweight: 65\n---\n\nWith the use of the `.Summary` [page variable](\/templates\/variables\/), Hugo can generate summaries of content for easily showing snippets in summary views. The summary view snippets are automatically generated by Hugo. Where a piece of content is split for the content summary depends on whether the split is Hugo-defined or user-defined.\n\nContent summaries may also provide links to the original content, usually in the form of a \"Read More...\" link, with the help of the `.RelPermalink` or `.Permalink` variable, as well as the `.Truncated` boolean variable to determine whether such \"Read More...\" link is necessary.\n\n## Hugo-defined: automatic summary split\n\nBy default, Hugo automatically takes the first 70 words of your content as its summary and stores it into the `.Summary` variable, which you may use in your templates.\n\n* Pros: Automatic, no additional work on your part.\n* Cons: All HTML tags are stripped from the summary, and the first 70 words, whether they belong to a heading or to different paragraphs, are all lumped into one paragraph.  Some people like it, but some people don't.\n\n## User-defined: manual summary split:\n\nAlternatively, you may add the <code>&#60;&#33;&#45;&#45;more&#45;&#45;&#62;<\/code> summary divider[^1] where you want to split the article.  Content prior to the summary divider will be used as that content's summary, and stored into the `.Summary` variable with all HTML formatting intact.\n\n[^1]: The **summary divider** is also called \"more tag\", \"excerpt separator\", etc. in other literature.\n\n* Pros: Freedom, precision, and improved rendering.  All formatting is preserved.\n* Cons: Need to remember to type <code>&#60;&#33;&#45;&#45;more&#45;&#45;&#62;<\/code> in your content file.  :-)\n\nBe careful to enter <code>&#60;&#33;&#45;&#45;more&#45;&#45;&#62;<\/code> exactly, i.e. all lowercase with no whitespace, otherwise it would be treated as regular comment and ignored.\n\n\n## Showing Summaries\n\nYou can show content summaries with the following code. You could do this, for example, on a [list](\/templates\/list\/) node.\n\n     range first 10 .Data.Pages \n      <div class=\"summary\">\n        <h4><a href=\" .RelPermalink \"> .Title <\/a><\/h4>\n         .Summary \n      <\/div>\n       if .Truncated \n      <div class=\"read-more-link\">\n        <a href=\" .RelPermalink \">Read More\u2026<\/a>\n      <\/div>\n       end \n     end \n\nNote how the `.Truncated` boolean valuable may be used to hide the \"Read More...\" link when the content is not truncated, i.e. when the summary contains the entire article.\n"}
{"Path":".\/content\/types.md","Content":"---\ndate: 2013-07-01\nlinktitle: Types\nmenu:\n  main:\n    parent: content\nnext: \/content\/archetypes\nprev: \/content\/sections\ntitle: Content Types\nweight: 40\n---\n\nHugo has full support for different types of content. A content type can have a\nunique set of meta data, template and can be automatically created by the new\ncommand through using content [archetypes](\/content\/archetypes\/).\n\nA good example of when multiple types are needed is to look at [Tumblr](https:\/\/www.tumblr.com\/). A piece\nof content could be a photo, quote or post, each with different meta data and\nrendered differently.\n\n## Assigning a content type\n\nHugo assumes that your site will be organized into [sections](\/content\/sections\/)\nand each section will use the corresponding type. If you are taking advantage of\nthis, then each new piece of content you place into a section will automatically\ninherit the type.\n\nAlternatively, you can set the type in the meta data under the key \"`type`\".\n\n\n## Creating new content of a specific type\n\nHugo has the ability to create a new content file and populate the front matter\nwith the data set corresponding to that type. Hugo does this by utilizing\n[archetypes](\/content\/archetypes\/).\n\nTo create a new piece of content, use:\n\n    hugo new relative\/path\/to\/content.md\n\nFor example, if I wanted to create a new post inside the post section, I would type:\n\n    hugo new post\/my-newest-post.md\n\n\n## Defining a content type\n\nCreating a new content type is easy in Hugo. You simply provide the templates and archetype\nthat the new type will use. You only need to define the templates, archetypes and\/or views\nunique to that content type. Hugo will fall back to using the general templates and default archetype\nwhenever a specific file is not present.\n\n*Remember, all of the following are optional:*\n\n### Create Type Directory\nCreate a directory with the name of the type in `layouts`. Type is always singular.  *E.g. `\/layouts\/post`*.\n\n### Create single template\nCreate a file called `single.html` inside your directory. *E.g. `\/layouts\/post\/single.html`*.\n\n### Create list template\nCreate a file called `list.html` inside your directory. *E.g. `\/layouts\/post\/list.html`*.\n\n### Create views\nMany sites support rendering content in a few different ways, for instance,\na single page view and a summary view to be used when displaying a list\nof contents on a single page. Hugo makes no assumptions here about how you want\nto display your content, and will support as many different views of a content\ntype as your site requires. All that is required for these additional views is\nthat a template exists in each layouts\/`TYPE` directory with the same name.\n\n### Create a corresponding archetype\n\nCreate a file called <code><em>type<\/em>.md<\/code> in the `\/archetypes` directory. *E.g. `\/archetypes\/post.md`*.\n\nMore details about archetypes can be found at the [archetypes docs](\/content\/archetypes\/).\n"}
{"Path":".\/extras\/aliases.md","Content":"---\naliases:\n- \/doc\/redirects\/\n- \/doc\/alias\/\n- \/doc\/aliases\/\ndate: 2013-07-09\nmenu:\n  main:\n    parent: extras\nnext: \/extras\/builders\nprev: \/taxonomies\/ordering\ntitle: Aliases\nweight: 10\n---\n\nFor people migrating existing published content to Hugo, there's a good chance\nyou need a mechanism to handle redirecting old URLs.\n\nLuckily, this can be handled easily with aliases in Hugo.\n\n## Example\n**content\/posts\/my-awesome-blog-post.md**\n\n<table class=\"table\">\n<thead>\n<tr>\n<th>TOML<\/th><th>YAML<\/th>\n<\/tr>\n<\/thead>\n<tbody>\n<tr valign=\"top\">\n<td><pre><code>+++\naliases = [\n    \"\/posts\/my-original-url\/\",\n    \"\/2010\/even-earlier-url.html\"\n]\n+++\n<\/code><\/pre><\/td>\n<td><pre><code>---\naliases:\n    - \/posts\/my-original-url\/\n    - \/2010\/even-earlier-url.html\n---\n<\/code><\/pre><\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n\nNow when you go to any of the aliases locations, they\nwill redirect to the page.\n\n## Important Behaviors\n\n1. *Hugo makes no assumptions about aliases. They also don't change based\non your UglyUrls setting. You need to provide absolute path to your webroot and the\ncomplete filename or directory.*\n\n2. *Aliases are rendered prior to any content and will be overwritten by\nany content with the same location.*\n"}
{"Path":".\/extras\/builders.md","Content":"---\ndate: 2014-05-26\nlinktitle: Builders\nmenu:\n  main:\n    parent: extras\nnext: \/extras\/comments\nprev: \/extras\/aliases\ntitle: Hugo Builders\nweight: 20\n---\n\nHugo provides the functionality to quickly get a site, theme or page\nstarted.\n\n\n## New Site\n\nWant to get a site built quickly?\n\n    $ hugo new site \/path\/to\/site\n\nHugo will create all the needed directories and files to get started\nquickly.\n\nHugo will only touch the files and create the directories (in the right\nplaces), [configuration](\/overview\/configuration\/) and content are up to\nyou... but luckily we have builders for content (see below).\n\n## New Theme\n\nWant to design a new theme?\n\n    $ hugo new theme THEME_NAME\n\nRun from your working directory, this will create a new theme with all\nthe needed files in your themes directory. Hugo will provide you with a\nlicense and theme.toml file with most of the work done for you.\n\nFollow the [Theme Creation Guide](\/themes\/creation\/) once the builder is\ndone.\n\n## New Content\n\nYou will use this builder the most of all. Every time you want to create\na new piece of content, the content builder will get you started right.\n\nLeveraging [content archetypes](\/content\/archetypes\/) the content builder\nwill not only insert the current date and appropriate metadata, but it\nwill pre-populate values based on the content type.\n\n    $ hugo new relative\/path\/to\/content\n\nThis assumes it is being run from your working directory and the content\npath starts from your content directory.\n\nI typically keep two different terminals open, one to run `hugo server\n--watch`, and another to use the builders to create new content.\n"}
{"Path":".\/extras\/comments.md","Content":"---\ndate: 2014-05-26\nlinktitle: Comments\nmenu:\n  main:\n    parent: extras\nnext: \/extras\/crossreferences\nprev: \/extras\/builders\ntitle: Comments in Hugo\nweight: 30\n---\n\nAs Hugo is a static site generator, the content produced is static and\ndoesn\u2019t interact with the users. The most common interaction people ask\nfor is comment capability.\n\nHugo ships with support for [Disqus](https:\/\/disqus.com\/), a third-party\nservice that provides comment and community capabilities to website via\nJavaScript.\n\nYour theme may already support Disqus, but even it if doesn\u2019t, it is easy\nto add.\n\n# Disqus Support\n\n## Adding Disqus to a template\n\nHugo comes with all the code you would need to include load Disqus.\nSimply include the following line where you want your comments to appear:\n\n     template \"_internal\/disqus.html\" . \n\n\n## Configuring Disqus\n\nThat template requires you to set a single value in your site config file, e.g. config.yaml.\n\n    disqusShortname = \"XYW\"\n\nAdditionally, you can optionally set the following in the front matter\nfor a given piece of content:\n\n * **disqus_identifier**\n * **disqus_title**\n * **disqus_url**\n\n\n## Conditional Loading of Disqus Comments\n\nUsers have noticed that enabling Disqus comments when running the Hugo web server on localhost causes the creation of unwanted discussions on the associated Disqus account. In order to prevent this, a slightly tweaked partial template is required. So, rather than using the built-in `\"_internal\/disqus.html\"` template referenced above, create a template in your `partials` folder that looks like this:\n\n```javascript\n<div id=\"disqus_thread\"><\/div>\n<script type=\"text\/javascript\">\n\n(function() {\n    \/\/ Don't ever inject Disqus on localhost--it creates unwanted\n    \/\/ discussions from 'localhost:1313' on your Disqus account...\n    if (window.location.hostname == \"localhost\")\n        return;\n\n    var dsq = document.createElement('script'); dsq.type = 'text\/javascript'; dsq.async = true;\n    var disqus_shortname = ' .Site.Params.disqusShortname ';\n    dsq.src = '\/\/' + disqus_shortname + '.disqus.com\/embed.js';\n    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);\n})();\n<\/script>\n<noscript>Please enable JavaScript to view the <a href=\"http:\/\/disqus.com\/?ref_noscript\">comments powered by Disqus.<\/a><\/noscript>\n<a href=\"http:\/\/disqus.com\/\" class=\"dsq-brlink\">comments powered by <span class=\"logo-disqus\">Disqus<\/span><\/a>\n```\n\nNotice that there is a simple `if` statement that detects when you are running on localhost and skips the initialization of the Disqus comment injection.\n\nNow, reference the partial template from your page template:\n\n     partial \"disqus.html\" . \n\n\n# Alternatives\n\nA few alternatives exist to [Disqus](https:\/\/disqus.com\/):\n\n* [IntenseDebate](http:\/\/intensedebate.com\/)\n* [Livefyre](http:\/\/livefyre.com\/)\n* [Muut](http:\/\/muut.com\/)\n* [\u591a\u8bf4](http:\/\/duoshuo.com\/) ([Duoshuo](http:\/\/duoshuo.com\/), popular in China)\n* [Kaiju](https:\/\/github.com\/spf13\/kaiju)\n\n\n[Kaiju](https:\/\/github.com\/spf13\/kaiju) is an open-source project started\nby [spf13](http:\/\/spf13.com\/) (Hugo\u2019s author) to bring easy and fast real\ntime discussions to the web.\n\nWritten using Go, Socket.io and MongoDB, it is very fast and easy to\ndeploy.\n\nIt is in early development but shows promise. If you have interest,\nplease help by contributing whether via a pull request, an issue or even\njust a tweet. Everything helps.\n\n"}
{"Path":".\/extras\/crossreferences.md","Content":"---\ndate: 2014-11-25\nmenu:\n  main:\n    parent: extras\nnext: \/extras\/livereload\nprev: \/extras\/comments\ntitle: Cross-References\nweight: 40\n---\n\nHugo makes it easy to link documents together with the `ref` and `relref` shortcodes. These shortcodes are also used to safely provide links to headings inside of your content, whether across documents or within a document. The only difference between `ref` and `relref` is whether the resulting URL is absolute (`http:\/\/1.com\/about\/`) or relative (`\/about\/`).\n\n## Using `ref` and `relref`\n\n    <\/* ref \"document\" *\/>\n    <\/* ref \"#anchor\" *\/>\n    <\/* ref \"document#anchor\" *\/>\n    <\/* relref \"document\" *\/>\n    <\/* relref \"#anchor\" *\/>\n    <\/* relref \"document#anchor\" *\/>\n\nThe single parameter to `ref` is a string with a content _document name_ (`about.md`), an in-document _anchor_ (`#who`), or both (`about.md#who`).\n\n### Document Names\n\nThe _document name_ is the name of a document including the format extension; this may be just the filename, or the relative path from the `content\/` directory. With a document `content\/blog\/post.md`, either format will produce the same result.\n\n    <\/* relref \"blog\/post.md\" *\/> \u21d2 `\/blog\/post\/`\n    <\/* relref \"post.md\" *\/> \u21d2 `\/blog\/post\/`\n\nIf you have multiple sections with the same filename, you should only use the relative path format, because the behaviour is _undefined_. So, if I also have a document `link\/post.md`, the output of `ref` is unknown for `post.md`.\n\n    <\/* relref \"blog\/post.md\" *\/> \u21d2 `\/blog\/post\/`\n    <\/* relref \"post.md\" *\/> \u21d2 `\/blog\/post\/` (maybe)\n    <\/* relref \"post.md\" *\/> \u21d2 `\/link\/post\/` (maybe)\n    <\/* relref \"link\/post.md\" *\/> \u21d2 `\/link\/post\/`\n\nA relative document name must *not* begin with a slash (`\/`).\n\n    <\/* relref \"\/blog\/post.md\" *\/> \u21d2 `\"\"`\n\n### Anchors\n\nWhen an _anchor_ is provided by itself, the current page\u2019s unique identifier will be appended; when an _anchor_ is provided with a document name, the found page's unique identifier will be appended.\n\n    <\/* relref \"#who\" *\/> \u21d2 `#who:9decaf7`\n    <\/* relref \"blog\/post.md#who\" *\/> \u21d2 `\/blog\/post\/#who:badcafe`\n\nMore information about document unique identifiers and headings can be found [below](< ref \"#hugo-heading-anchors\" >).\n\n### Examples\n\n* `<\/* ref \"blog\/post.md\" *\/>` \u21d2 `http:\/\/1.com\/blog\/post\/`\n* `<\/* ref \"post.md#tldr\" *\/>` \u21d2 `http:\/\/1.com\/blog\/post\/#tldr:caffebad`\n* `<\/* relref \"post.md\" *\/>` \u21d2 `\/blog\/post\/`\n* `<\/* relref \"blog\/post.md#tldr\" *\/>` \u21d2 `\/blog\/post\/#tldr:caffebad`\n* `<\/* ref \"#tldr\" *\/>` \u21d2 `#tldr:badcaffe`\n* `<\/* relref \"#tldr\" *\/>` \u21d2 `#tldr:badcaffe`\n\n## Hugo Heading Anchors\n\nWhen using Markdown document types, Hugo generates heading anchors automatically. The generated anchor for this section is `hugo-heading-anchors`. Because the heading anchors are generated automatically, Hugo takes some effort to ensure that heading anchors are unique both inside a document and across the entire site.\n\nEnsuring heading uniqueness across the site is accomplished with a unique identifier for each document based on its path. Unless a document is renamed or moved between sections *in the filesystem*, the unique identifier for the document will not change: `blog\/post.md` will always have a unique identifier of `81df004c333b392d34a49fd3a91ba720`.\n\n`ref` and `relref` were added so you can make these reference links without having to know the document\u2019s unique identifier. (The links in document tables of contents are automatically up-to-date with this value.)\n\n    <\/* relref \"extras\/crossreferences.md#hugo-heading-anchors\" *\/>\n    \/extras\/crossreferences\/#hugo-heading-anchors:77cd9ea530577debf4ce0f28c8dca242\n\n> What follows is a deeper discussion of *why* and *how* Hugo generates heading anchors. It is not necessary to know this to use `ref` and `relref`, but it may be useful in understanding how some anchors may not match your expectations.\n\n### How to Generate a Heading Anchor\n\nConvert the text of the heading to lowercase.\n\n    Hugo: A Fast & Modern Static Web Engine\n    hugo: a fast & modern static web engine\n\nReplace anything that isn't an ASCII letter (`a-z`) or number (`0-9`) with a dash (`-`).\n\n    hugo: a fast & modern static web engine\n    hugo--a-fast---modern-static-web-engine\n\nGet rid of extra dashes.\n\n    hugo--a-fast---modern-static-web-engine\n    hugo-a-fast-modern-static-web-engine\n\nYou have just converting the text of a heading to a suitable anchor. If your document has unique heading text, all of the anchors will be unique, too.\n\n#### Specifying Heading Anchors\n\nYou can also tell Hugo to use a particular heading anchor.\n\n    # Hugo: A Fast & Modern Static Web Engine {#hugo-main}\n\nHugo will use `hugo-main` as the heading anchor.\n\n### What About Duplicate Heading Anchors?\n\nThe technique outlined above works well enough, but some documents have headings with identical text, like the [shortcodes](\/extras\/shortcodes\/) page\u2014there are three headings with the text \"Example\". You can specify heading anchors manually:\n\n    ### Example {#example-1}\n    ### Example {#example-2}\n    ### Example {#example-3}\n\nIt\u2019s easy to forget to do that all the time, and Hugo is smart enough to do it for you. It just adds `-x` to the end of each heading it has already seen.\n\n* `### Example` \u21d2 `example`\n* `### Example` \u21d2 `example-1`\n* `### Example` \u21d2 `example-2`\n\nSometimes it's a little harder, but Hugo can recover from those, too, by adding more suffixes:\n\n* `# Heading` \u21d2 `heading`\n* `# Heading 1` \u21d2 `heading-1`\n* `# Heading` \u21d2 `heading-1-1`\n* `# Heading` \u21d2 `heading-1-2`\n* `# Heading 1` \u21d2 `heading-2`\n\nThis can even affect specified heading anchors that come after a generated heading anchor.\n\n* `# My Heading` \u21d2 `my-heading`\n* `# My Heading {#my-heading}` \u21d2 `my-heading-1`\n\n> This particular collision and override is unfortunate, but unavoidable because Hugo processes each heading for collision detection as it sees it during conversion.\n\nThis technique works well for documents rendered on individual pages, like blog posts. What about on Hugo list pages?\n\n### Unique Heading Anchors in Lists\n\nHugo converts each document from Markdown independently. it doesn\u2019t know that `blog\/post.md` has an \"Example\" heading that will collide with the \"Example\" heading in `blog\/post2.md`. Even if it did know this, the addition of `blog\/post3.md` should not cause the anchors for the headings in the other blog posts to change.\n\nEnter the document\u2019s unique identifier. To prevent this sort of collision on\nlist pages, Hugo always appends the document's to a generated heading anchor.\nSo, the \"Example\" heading in `blog\/post.md` actually turns into\n`#example:81df004\u2026`, and the \"Example\" heading in `blog\/post2.md` actually\nturns into `#example:8cf1599\u2026`. All you have to know is the heading anchor that\nwas generated, not the document identifier; `ref` and `relref` take care of the\nrest for you.\n\n    <a href='<\/* relref \"blog\/post.md#example\" *\/>'>Post Example<\/a>\n    <a href='\/blog\/post.md#81df004\u2026'>Post Example<\/a>\n\n    [Post Two Example](<\/* relref \"blog\/post2.md#example\" *\/>)\n    <a href='\/blog\/post2.md#8cf1599\u2026'>Post Two Example<\/a>\n\nNow you know.\n"}
{"Path":".\/extras\/highlighting.md","Content":"---\naliases:\n- \/extras\/highlight\/\ndate: 2013-07-01\nmenu:\n  main:\n    parent: extras\nnext: \/extras\/toc\nprev: \/extras\/shortcodes\ntitle: Syntax Highlighting\nweight: 90\n---\n\nHugo provides the ability for you to highlight source code in two different\nways &mdash; either pre-processed server side from your content, or to defer\nthe processing to the client side, using a JavaScript library. The advantage of\nserver side is that it doesn\u2019t depend on a JavaScript library and consequently\nworks very well when read from an RSS feed. The advantage of client side is that\nit doesn\u2019t cost anything when building your site and some of the highlighting \nscripts available cover more languages than Pygments does.\n\nFor the pre-processed approach, Highlighting is performed by an external\nPython-based program called [Pygments](http:\/\/pygments.org\/) and is triggered\nvia an embedded shortcode. If Pygments is absent from the path, it will\nsilently simply pass the content along unhighlighted.\n\n## Server-side\n\n### Disclaimers\n\n * **Warning:** Pygments is relatively slow. Expect much longer build times when using server-side highlighting.\n * Languages available depends on your Pygments installation.\n * Styles are inline in order to be supported in syndicated content when references\nto style sheets are not carried over.\n * We have sought to have the simplest interface possible, which consequently\nlimits configuration. An ambitious user is encouraged to extend the current\nfunctionality to offer more customization.\n* You can change appearance with config options `pygmentsstyle`(default\n`\"monokai\"`) and `pygmentsuseclasses`(defaut `false`).\n\n### Usage\nHighlight takes exactly one required parameter of language and requires a\nclosing shortcode.\n\n### Example\nSince this example is a code block, we use Github flavored Markdown's code fences, ```, to delimit the code. If you are using standard Markdown, instead of the code fence delimiters, each line must be preceeded by 4 spaces to identify each line as a line of code. Not doing either will result in the text being rendered as HTML. This will prevent Pygment highlighting from working.\n \n```  \n%\/* highlight html *\/%\n<section id=\"main\">\n  <div>\n    <h1 id=\"title\"> .Title <\/h1>\n     range .Data.Pages \n         .Render \"summary\"\n     end \n  <\/div>\n<\/section>\n%\/* \/highlight *\/%\n```\n\n### Example Output\n\n    <span style=\"color: #f92672\">&lt;section<\/span> <span style=\"color: #a6e22e\">id=<\/span><span style=\"color: #e6db74\">&quot;main&quot;<\/span><span style=\"color: #f92672\">&gt;<\/span>\n      <span style=\"color: #f92672\">&lt;div&gt;<\/span>\n       <span style=\"color: #f92672\">&lt;h1<\/span> <span style=\"color: #a6e22e\">id=<\/span><span style=\"color: #e6db74\">&quot;title&quot;<\/span><span style=\"color: #f92672\">&gt;<\/span> .Title <span style=\"color: #f92672\">&lt;\/h1&gt;<\/span>\n         range .Data.Pages \n             .Render &quot;summary&quot;\n         end \n      <span style=\"color: #f92672\">&lt;\/div&gt;<\/span>\n    <span style=\"color: #f92672\">&lt;\/section&gt;<\/span>\n\n## Client-side\n\nAlternatively, code highlighting can be done in client-side JavaScript.\n\nClient-side syntax highlighting is very simple to add. You'll need to pick\na library and a corresponding theme. Some popular libraries are:\n\n- [Highlight.js]\n- [Rainbow]\n- [Syntax Highlighter]\n- [Google Prettify]\n\nThis example uses the popular [Highlight.js] library, hosted by [Yandex], a\npopular Russian search engine.\n\nIn your `.\/layouts\/partials\/` (or `.\/layouts\/chrome\/`) folder, depending on your specific theme, there\nwill be a snippet that will be included in every generated HTML page, such\nas `header.html` or `header.includes.html`. Simply add:\n\n    <link rel=\"stylesheet\" href=\"https:\/\/yandex.st\/highlightjs\/8.0\/styles\/default.min.css\">\n    <script src=\"https:\/\/yandex.st\/highlightjs\/8.0\/highlight.min.js\"><\/script>\n    <script>hljs.initHighlightingOnLoad();<\/script>\n\nYou can of course use your own copy of these files, typically in `.\/static\/`.\n\n[Highlight.js]: http:\/\/highlightjs.org\/\n[Rainbow]: http:\/\/craig.is\/making\/rainbows\n[Syntax Highlighter]: http:\/\/alexgorbatchev.com\/SyntaxHighlighter\/\n[Google Prettify]: https:\/\/code.google.com\/p\/google-code-prettify\/\n[Yandex]: http:\/\/yandex.ru\/\n\nPlease see individual libraries documentation for how to implement the JavaScript-based libraries.\n"}
{"Path":".\/extras\/livereload.md","Content":"---\ndate: 2014-05-26\nmenu:\n  main:\n    parent: extras\nnext: \/extras\/menus\nprev: \/extras\/crossreferences\ntitle: LiveReload\nweight: 50\n---\n\nHugo may not be the first static site generator to utilize LiveReload\ntechnology, but it\u2019s the first to do it right.\n\nThe combination of Hugo\u2019s insane build speed and LiveReload make\ncrafting your content pure joy. Virtually instantly after you hit save\nyour rebuilt content will appear in your browser.\n\n## Using LiveReload\n\nHugo comes with LiveReload built in. There are no additional packages to\ninstall. A common way to use Hugo while developing a site is to have\nHugo run a server and watch for changes:\n\n    $ hugo server --watch\n\nThis will run a full functioning web server while simultaneously\nwatching your file system for additions, deletions or changes within\nyour:\n\n * static files\n * content\n * layouts\n * current theme\n\nWhenever anything changes Hugo will rebuild the site, continue to serve\nthe content and as soon as the build is finished it will tell the\nbrowser and silently reload the page. Because most hugo builds are so\nfast they are barely noticeable, you merely need to glance at your open\nbrowser and you will see the change already there.\n\nThis means that keeping the site open on a second monitor (or another\nhalf of your current monitor) allows you to see exactly what your\ncontent looks like without even leaving your text editor.\n\n## Disabling LiveReload\n\nLiveReload works by injecting JavaScript into the pages it\ncreates that creates a web socket client to the hugo web socket server.\n\nAwesome for development, but not something you would want to do in\nproduction. Since many people use `hugo server --watch` in production to\ninstantly display any updated content, we\u2019ve made it easy to disable the\nLiveReload functionality.\n\n    $ hugo server --watch --disableLiveReload\n\n"}
{"Path":".\/extras\/menus.md","Content":"---\ndate: 2014-05-14T02:36:37Z\nmenu:\n  main:\n    parent: extras\nnext: \/extras\/permalinks\nprev: \/extras\/livereload\ntitle: Menus\nweight: 60\n---\n\nHugo has a simple yet powerful menu system that permits content to be\nplaced in menus with a good degree of control without a lot of work. \n\nSome of the features of Hugo Menus:\n\n* Place content in one or many menus\n* Handle nested menus with unlimited depth\n* Create menu entries without being attached to any content\n* Distinguish active element (and active branch)\n\n## What is a menu?\n\nA menu is a named array of menu entries accessible on the site under\n`.Site.Menus` by name. For example, if I have a menu called `main`, I would\naccess it via `.Site.Menus.main`.\n\nA menu entry has the following properties:\n\n* **Url**        string\n* **Name**       string\n* **Menu**       string\n* **Identifier** string\n* **Pre**        template.HTML\n* **Post**       template.HTML\n* **Weight**     int\n* **Parent**     string\n* **Children**   Menu\n\nAnd the following functions:\n\n* **HasChildren** bool\n\nAdditionally, there are some relevant functions available on the page:\n\n* **IsMenuCurrent** (menu string, menuEntry *MenuEntry ) bool\n* **HasMenuCurrent** (menu string, menuEntry *MenuEntry) bool\n\n\n## Adding content to menus\n\nHugo supports a couple of different methods of adding a piece of content\nto the front matter.\n\n### Simple\n\nIf all you need to do is add an entry to a menu, the simple form works\nwell.\n\n**A single menu:**\n\n    ---\n    menu: \"main\"\n    ---\n\n**Multiple menus:**\n\n    ---\n    menu: [\"main\", \"footer\"]\n    ---\n\n\n### Advanced\n\nIf more control is required, then the advanced approach gives you the\ncontrol you want. All of the menu entry properties listed above are\navailable.\n\n    ---\n    menu:\n      main:\n        parent: 'extras'\n        weight: 20\n    ---\n\n\n## Adding (non-content) entries to a menu\n\nYou can also add entries to menus that aren\u2019t attached to a piece of\ncontent. This takes place in the sitewide [config file](\/overview\/configuration\/).\n\nHere\u2019s an example `config.toml`:\n\n    [[menu.main]]\n        name = \"about hugo\"\n        pre = \"<i class='fa fa-heart'><\/i>\"\n        weight = -110\n        identifier = \"about\"\n        url = \"\/about\/\"\n    [[menu.main]]\n        name = \"getting started\"\n        pre = \"<i class='fa fa-road'><\/i>\"\n        weight = -100\n        url = \"\/getting-started\/\"\n\nAnd the equivalent example `config.yaml`:\n\n    ---\n    menu:\n      main:\n          - Name: \"about hugo\"\n            Pre: \"<i class='fa fa-heart'><\/i>\"\n            Weight: -110\n            Identifier: \"about\"\n            Url: \"\/about\/\"\n          - Name: \"getting started\"\n            Pre: \"<i class='fa fa-road'><\/i>\"\n            Weight: -100\n            Url: \"\/getting-started\/\"\n    ---            \n\n\n**NOTE:** The urls must be relative to the context root. If the `BaseUrl` is `http:\/\/example.com\/mysite\/`, then the urls in the menu must not include the context root `mysite`. \n  \n## Nesting\n\nAll nesting of content is done via the `parent` field.\n\nThe parent of an entry should be the identifier of another entry.\nIdentifier should be unique (within a menu).\n\nThe following order is used to determine identity Identifier > Name >\nLinkTitle > Title. This means that the title will be used unless\nlinktitle is present, etc. In practice Name and Identifier are never\ndisplayed and only used to structure relationships.\n\nIn this example, the top level of the menu is defined in the config file\nand all content entries are attached to one of these entries via the\n`parent` field.\n\n## Rendering menus\n\nHugo makes no assumptions about how your rendered HTML will be\nstructured. Instead, it provides all of the functions you will need to be\nable to build your menu however you want. \n\n\nThe following is an example:\n\n    <!--sidebar start-->\n    <aside>\n        <div id=\"sidebar\" class=\"nav-collapse\">\n            <!-- sidebar menu start-->\n            <ul class=\"sidebar-menu\">\n               $currentNode := . \n               range .Site.Menus.main \n                   if .HasChildren \n\n                <li class=\"sub-menuif $currentNode.HasMenuCurrent \"main\" .  activeend\">\n                <a href=\"javascript:;\" class=\"\">\n                     .Pre \n                    <span> .Name <\/span>\n                    <span class=\"menu-arrow arrow_carrot-right\"><\/span>\n                <\/a>\n                <ul class=\"sub\">\n                     range .Children \n                    <liif $currentNode.IsMenuCurrent \"main\" .  class=\"active\"end><a href=\".Url\">  .Name  <\/a> <\/li>\n                     end \n                <\/ul>\n              else\n                <li>\n                <a class=\"\" href=\".Url\">\n                     .Pre \n                    <span> .Name <\/span>\n                <\/a>\n              end\n              <\/li>\n              end\n                <li> <a href=\"https:\/\/github.com\/spf13\/hugo\/issues\" target=\"blank\">Questions and Issues<\/a> <\/li>\n                <li> <a href=\"#\" target=\"blank\">Edit this Page<\/a> <\/li>\n            <\/ul>\n            <!-- sidebar menu end-->\n        <\/div>\n    <\/aside>\n    <!--sidebar end-->\n"}
{"Path":".\/extras\/pagination.md","Content":"---\naliases:\n- \/doc\/pagination\/\ndate: 2014-01-01\nmenu:\n  main:\n    parent: extras\nnext: \/extras\/scratch\nprev: \/extras\/shortcodes\ntitle: Pagination\nweight: 80\n---\n\nHugo supports pagination for the home page, sections and taxonomies. It's built to be easy use, but with loads of flexibility when needed. The real power shines when you combine it with [`where`](\/templates\/functions\/), with its SQL-like operators, `first` and others --- you can even [order the content](\/templates\/list\/) the way you've become used to with Hugo.\n\n## Configuration\n\nPagination can be configured in the site configuration (e.g. `config.toml`):\n\n* `Paginate` (default `10`) \n* `PaginatePath` (default `page`)\n\nSetting `Paginate` to a positive value will split the list pages for the home page, sections and taxonomies into chunks of that size. But note that the generation of the pagination pages for sections, taxonomies and home page is *lazy* --- the pages will not be created if not referenced by a `.Paginator` (see below).\n\n `PaginatePath` is used to adapt the `Url` to the pages in the paginator (the default setting will produce urls on the form `\/page\/1\/`. \n\n## List the pages\n\n**A `.Paginator` is provided to help building a pager menu. This is only relevant for the templates for the home page and the list pages (sections and taxonomies).**  \n\nThere are two ways to configure and use a `.Paginator`:\n\n1. The simplest way is just to call `.Paginator.Pages` from a template. It will contain the pages for *that page* .\n2. Select a sub-set of the pages with the available template functions and ordering options, and pass the slice to `.Paginate`, e.g. ` range (.Paginate ( first 50 .Data.Pages.ByTitle )).Pages `.\n\nFor a given **Node**, it's one of the options above. The `.Paginator` is static and cannot change once created.\n\n## Build the navigation\n\nThe `.Paginator` contains enough information to build a paginator interface. \n\nThe easiest way to add this to your pages is to include the built-in template (with `Bootstrap`-compatible styles):\n\n```\n template \"_internal\/pagination.html\" . \n```\n\n**Note:** If you use any filters or ordering functions to create your `.Paginator` **and** you want the navigation buttons to be shown before the page listing, you must create the `.Paginator` before it's used:\n\n```\n $paginator := .Paginate (where .Data.Pages \"Type\" \"post\") \n template \"_internal\/pagination.html\" . \n range $paginator.Pages \n    .Title \n end \n```\n\nWithout the where-filter, the above is simpler:\n\n```\n template \"_internal\/pagination.html\" . \n range .Paginator.Pages \n    .Title \n end \n```\n\nIf you want to build custom navigation, you can do so using the `.Paginator` object:\n\n* `PageNumber`: The current page's number in the pager sequence\n* `Url`: The relative Url to the current pager\n* `Pages`: The pages in the current pager\n* `NumberOfElements`: The number of elements on this page\n* `HasPrev`: Whether there are page(s) before the current\n* `Prev`: The pager for the previous page\n* `HasNext`: Whether there are page(s) after the current\n* `Next`: The pager for the next page\n* `First`: The pager for the first page\n* `Last`: The pager for the last page\n* `Pagers`: A list of pagers that can be used to build a pagination menu\n* `PageSize`: Size of each pager\n* `TotalPages`: The number of pages in the paginator\n* `TotalNumberOfElements`: The number of elements on all pages in this paginator\n\n## Additional information\n\nThe pages are built on the following form (`BLANK` means no value):\n\n```\n[SECTION\/TAXONOMY\/BLANK]\/index.html\n[SECTION\/TAXONOMY\/BLANK]\/page\/1\/index.html => redirect to  [SECTION\/TAXONOMY\/BLANK]\/index.html\n[SECTION\/TAXONOMY\/BLANK]\/page\/2\/index.html\n....\n```\n\n\n"}
{"Path":".\/extras\/permalinks.md","Content":"---\naliases:\n- \/doc\/permalinks\/\ndate: 2013-11-18\nmenu:\n  main:\n    parent: extras\nnext: \/extras\/shortcodes\nnotoc: true\nprev: \/extras\/menus\ntitle: Permalinks\nweight: 70\n---\n\nBy default, content is laid out into the target `publishdir` (public)\nnamespace matching its layout within the `contentdir` hierarchy.\nThe `permalinks` site configuration option allows you to adjust this on a\nper-section basis.\nThis will change where the files are written to and will change the page's\ninternal \"canonical\" location, such that template references to\n`.RelPermalink` will honour the adjustments made as a result of the mappings\nin this option.\n\nFor instance, if one of your sections is called `post`, and you want to adjust\nthe canonical path to be hierarchical based on the year and month, then you\nmight use:\n\n```yaml\npermalinks:\n  post: \/:year\/:month\/:title\/\n```\n\nOnly the content under `post\/` will be so rewritten.\nA file named `content\/post\/sample-entry` which contains a line\n`date:\u00a02013-11-18T19:20:00-05:00` might end up with the rendered page\nappearing at `public\/2013\/11\/sample-entry\/index.html` and be reachable via\nthe URL <http:\/\/yoursite.example.com\/2013\/11\/sample-entry\/>.\n\nThe following is a list of values that can be used in a permalink definition.\nAll references to time are dependent on the content's date.\n\n  * **:year** the 4-digit year\n  * **:month** the 2-digit month\n  * **:monthname** the name of the month\n  * **:day** the 2-digit day\n  * **:weekday** the 1-digit day of the week (Sunday = 0)\n  * **:weekdayname** the name of the day of the week\n  * **:yearday** the 1- to 3-digit day of the year\n  * **:section** the content's section\n  * **:title** the content's title\n  * **:slug** the content's slug (or title if no slug)\n  * **:filename** the content's filename (without extension)\n\n"}
{"Path":".\/extras\/scratch.md","Content":"---\naliases:\n- \/doc\/scratch\/\ndate: 2015-01-22\nmenu:\n  main:\n    parent: extras\nnext: \/extras\/highlighting\nprev: \/extras\/pagination\ntitle: Scratch\nweight: 80\n---\n\n`Scratch` -- a \"scratchpad\" for your node- or page-scoped variables. In most cases you can do well without `Scratch`, but there are some use cases that aren't solvable with Go's templates without `Scratch`'s help, due to scoping issues.\n\n\n`Scratch` is added to both `Node` and `Page` -- with the three methods `Set`, `Get` and `Add`. `Set` and `Add` takes a `key` and the `value` to add. Get returns the `value` for the `key` given.\n\n`Set` can store values of any type. `Add` accepts values that support Go's `+` operator.\n\nThe scope of the backing data is global for the given `Node` or `Page`, and spans partial and shortcode includes.\n\n## Sample usage\n\nThe usage is best illustrated with some samples:\n\n```\n $.Scratch.Add \"a1\" 12 \n $.Scratch.Get \"a1\"  \/* => 12 *\/\n $.Scratch.Add \"a1\" 1 \n $.Scratch.Get \"a1\"  \/\/ \/* => 13 *\/\n\n $.Scratch.Add \"a2\" \"AB\" \n $.Scratch.Get \"a2\"  \/* => AB *\/\n $.Scratch.Add \"a2\" \"CD\" \n $.Scratch.Get \"a2\"  \/* => ABCD *\/\n\n $.Scratch.Set \"v1\" 123 \n $.Scratch.Get \"v1\"   \/* => 123 *\/\n```\n\n**Note:** The examples above uses the special `$` variable, which refers to the top-level node. This is the behavior you most likely want, and will help remove some confusion when using `Scratch` inside page range loops -- and you start inadvertently calling the wrong `Scratch`. But there may be use cases for ` .Scratch.Add \"key\" \"some value\" `.\n\n\n"}
{"Path":".\/extras\/shortcodes.md","Content":"---\naliases:\n- \/doc\/shortcodes\/\ndate: 2013-07-01\nmenu:\n  main:\n    parent: extras\nnext: \/extras\/pagination\nprev: \/extras\/permalinks\ntitle: Shortcodes\nweight: 80\n---\n\nHugo uses Markdown for its simple content format. However, there are a lot\nof things that Markdown doesn\u2019t support well.\n\nWe are unwilling to accept being constrained by our simple format. Also\nunacceptable is writing raw HTML in our Markdown every time we want to include\nunsupported content such as a video. To do so is in complete opposition to the\nintent of using a bare bones format for our content and utilizing templates to\napply styling for display.\n\nTo avoid both of these limitations, Hugo created shortcodes.\n\nA shortcode is a simple snippet inside a content file that Hugo will render\nusing a predefined template. Note that shortcodes will not work in template\nfiles---if you need a functionality like that in a template, you most likely\nwant a [partial template](\/templates\/partials\/) instead.\n\n## Using a shortcode\n\nIn your content files, a shortcode can be called by using '`%\/* name parameters\n*\/%`' respectively. Shortcodes are space delimited (parameters with spaces\ncan be quoted).\n\nThe first word is always the name of the shortcode. Parameters follow the name.\nThe format for named parameters models that of HTML with the format\n`name=\"value\"`.\n\nSome shortcodes use or require closing shortcodes. Like HTML, the opening and closing\nshortcodes match (name only), the closing being prepended with a slash.\n\nExample of a paired shortcode:\n\n    <\/* highlight go *\/> A bunch of code here <\/* \/highlight *\/>\n\nThe examples above use two different delimiters, the difference being the `%` and the `<` character:\n\n### Shortcodes with Markdown\n\nThe `%` characters indicates that the shortcode's inner content needs further processing by the page's rendering processor (i.e. Markdown), needed to get the **bold** text in the example below:\n\n ```\n%\/* myshortcode *\/%Hello **World!**%\/* \/myshortcode *\/%\n```\n\n### Shortcodes without Markdown\n\nThe `<` character indicates that the shortcode's inner content doesn't need any further rendering, this will typically be pure HTML:\n\n ```\n<\/* myshortcode *\/><p>Hello <strong>World!<\/strong><\/p><\/* \/myshortcode *\/>\n```\n\n## Hugo Shortcodes\n\nHugo ships with a set of predefined shortcodes.\n\n### highlight\n\nThis shortcode will convert the source code provided into syntax highlighted\nHTML. Read more on [highlighting](\/extras\/highlighting\/).\n\n#### Usage\n`highlight` takes exactly one required parameter of _language_ and requires a\nclosing shortcode.\n\n#### Example\n\n    <\/* highlight html *\/>\n    <section id=\"main\">\n      <div>\n       <h1 id=\"title\"> .Title <\/h1>\n         range .Data.Pages \n             .Render \"summary\"\n         end \n      <\/div>\n    <\/section>\n    <\/* \/highlight *\/>\n\n\n#### Example Output\n\n    <span style=\"color: #f92672\">&lt;section<\/span> <span style=\"color: #a6e22e\">id=<\/span><span style=\"color: #e6db74\">&quot;main&quot;<\/span><span style=\"color: #f92672\">&gt;<\/span>\n      <span style=\"color: #f92672\">&lt;div&gt;<\/span>\n       <span style=\"color: #f92672\">&lt;h1<\/span> <span style=\"color: #a6e22e\">id=<\/span><span style=\"color: #e6db74\">&quot;title&quot;<\/span><span style=\"color: #f92672\">&gt;<\/span> .Title <span style=\"color: #f92672\">&lt;\/h1&gt;<\/span>\n         range .Data.Pages \n             .Render &quot;summary&quot;\n         end \n      <span style=\"color: #f92672\">&lt;\/div&gt;<\/span>\n    <span style=\"color: #f92672\">&lt;\/section&gt;<\/span>\n\n### figure\n`figure` is simply an extension of the image capabilities present with Markdown.\n`figure` provides the ability to add captions, CSS classes, alt text, links etc.\n\n#### Usage\n\n`figure` can use the following parameters:\n\n * src\n * link\n * title\n * caption\n * attr (attribution)\n * attrlink\n * alt\n\n#### Example\n\n    <\/* figure src=\"\/media\/spf13.jpg\" title=\"Steve Francia\" *\/>\n\n#### Example output\n\n    <figure>\n        <img src=\"\/media\/spf13.jpg\"  \/>\n        <figcaption>\n            <h4>Steve Francia<\/h4>\n        <\/figcaption>\n    <\/figure>\n\n### ref, relref\n\nThese shortcodes will look up the pages by their relative path (e.g.,\n`blog\/post.md`) or their logical name (`post.md`) and return the permalink\n(`ref`) or relative permalink (`relref`) for the found page.\n\n`ref` and `relref` also make it possible to make fragmentary links that work\nfor the header links generated by Hugo.\n\nRead more on [cross-references](% ref \"extras\/crossreferences.md\" %).\n\n#### Usage\n\n`ref` and `relref` take exactly one required parameter of _reference_.\n\n#### Example\n\n    [Neat](<\/* ref \"blog\/neat.md\" *\/>)\n    [Who](<\/* relref \"about.md#who\" *\/>)\n\n#### Example Output\n\nAssuming that standard Hugo pretty URLs are turned on.\n\n    <a href=\"\/blog\/neat\">Neat<\/a>\n    <a href=\"\/about\/#who:c28654c202e73453784cfd2c5ab356c0\">Who<\/a>\n\n## Creating your own shortcodes\n\nTo create a shortcode, place a template in the layouts\/shortcodes directory. The\ntemplate name will be the name of the shortcode.\n\nIn creating a shortcode, you can choose if the shortcode will use _positional\nparameters_ or _named parameters_ (but not both). A good rule of thumb is that if a\nshortcode has a single required value in the case of the `youtube` example below,\nthen positional works very well. For more complex layouts with optional\nparameters, named parameters work best.\n\n**Inside the template**\n\nTo access a parameter by position, the `.Get` method can be used:\n\n     .Get 0 \n\nTo access a parameter by name, the `.Get` method should be utilized:\n\n     .Get \"class\" \n\n`with` is great when the output depends on a parameter being set:\n\n     with .Get \"class\" class=\".\" end \n\n`.Get` can also be used to check if a parameter has been provided. This is\nmost helpful when the condition depends on either one value or another...\nor both:\n\n     or .Get \"title\" | .Get \"alt\" | if  alt=\" with .Get \"alt\".else.Get \"title\"end\" end \n\nIf a closing shortcode is used, the variable `.Inner` will be populated with all\nof the content between the opening and closing shortcodes. If a closing\nshortcode is required, you can check the length of `.Inner` and provide a warning\nto the user.\n\nThe variable `.Params` contains the list of parameters in case you need to do more complicated things than `.Get`.\n\nYou can also use the variable `.Page` to access all the normal [Page Variables](\/templates\/variables\/). \n\n## Single Positional Example: youtube\n\n    <\/* youtube 09jf3ow9jfw *\/>\n\nWould load the template \/layouts\/shortcodes\/youtube.html\n\n    <div class=\"embed video-player\">\n    <iframe class=\"youtube-player\" type=\"text\/html\" width=\"640\" height=\"385\" src=\"http:\/\/www.youtube.com\/embed\/ index .Params 0 \" allowfullscreen frameborder=\"0\">\n    <\/iframe>\n    <\/div>\n\nThis would be rendered as:\n\n    <div class=\"embed video-player\">\n    <iframe class=\"youtube-player\" type=\"text\/html\"\n        width=\"640\" height=\"385\"\n        src=\"http:\/\/www.youtube.com\/embed\/09jf3ow9jfw\"\n        allowfullscreen frameborder=\"0\">\n    <\/iframe>\n    <\/div>\n\n## Single Named Example: image with caption\n\n    <\/* img src=\"\/media\/spf13.jpg\" title=\"Steve Francia\" *\/>\n\nWould load the template \/layouts\/shortcodes\/img.html\n\n    <!-- image -->\n    <figure  with .Get \"class\" class=\".\" end >\n         with .Get \"link\"<a href=\".\"> end \n            <img src=\" .Get \"src\" \"  if or (.Get \"alt\") (.Get \"caption\") alt=\" with .Get \"alt\".else .Get \"caption\"  end \" end  \/>\n         if .Get \"link\"<\/a> end \n         if or (or (.Get \"title\") (.Get \"caption\")) (.Get \"attr\")\n        <figcaption> if isset .Params \"title\" \n            <h4> .Get \"title\" <\/h4> end \n             if or (.Get \"caption\") (.Get \"attr\")<p>\n             .Get \"caption\" \n             with .Get \"attrlink\"<a href=\".\">  end \n                 .Get \"attr\" \n             if .Get \"attrlink\"<\/a>  end \n            <\/p>  end \n        <\/figcaption>\n         end \n    <\/figure>\n    <!-- image -->\n\nWould be rendered as:\n\n    <figure >\n        <img src=\"\/media\/spf13.jpg\"  \/>\n        <figcaption>\n            <h4>Steve Francia<\/h4>\n        <\/figcaption>\n    <\/figure>\n\n## Paired Example: Highlight\n*Hugo already ships with the `highlight` shortcode*\n\n    <\/* highlight html *\/>\n    <html>\n        <body> This HTML <\/body>\n    <\/html>\n    <\/* \/highlight *\/>\n\nThe template for this utilizes the following code (already include in Hugo)\n\n     .Get 0 | highlight .Inner  \n\nAnd will be rendered as:\n\n    <div class=\"highlight\" style=\"background: #272822\"><pre style=\"line-height: 125%\"><span style=\"color: #f92672\">&lt;html&gt;<\/span>\n        <span style=\"color: #f92672\">&lt;body&gt;<\/span> This HTML <span style=\"color: #f92672\">&lt;\/body&gt;<\/span>\n    <span style=\"color: #f92672\">&lt;\/html&gt;<\/span>\n    <\/pre><\/div>\n\nPlease notice that this template makes use of a Hugo-specific template function\ncalled `highlight` which uses Pygments to add the highlighting code.\n\nMore shortcode examples can be found at [spf13.com](https:\/\/github.com\/spf13\/spf13.com\/tree\/master\/layouts\/shortcodes).\n"}
{"Path":".\/extras\/toc.md","Content":"---\ndate: 2013-07-09\nmenu:\n  main:\n    parent: extras\nnext: \/extras\/urls\nprev: \/extras\/highlighting\ntitle: Table of Contents\nweight: 100\n---\n\nHugo will automatically parse the Markdown for your content and create\na Table of Contents you can use to guide readers to the sections within\nyour content.\n\n## Usage\n\nSimply create content like you normally would with the appropriate\nheaders.\n\nHugo will take this Markdown and create a table of contents stored in the\n[content variable](\/layout\/variables\/) `.TableOfContents`\n\n\n## Template Example\n\nThis is example code of a [single.html template](\/layout\/content\/).\n\n     partial \"header.html\" . \n        <div id=\"toc\" class=\"well col-md-4 col-sm-6\">\n         .TableOfContents \n        <\/div>\n        <h1> .Title <\/h1>\n         .Content \n     partial \"footer.html\" . \n\n\n"}
{"Path":".\/extras\/urls.md","Content":"---\naliases:\n- \/doc\/urls\/\ndate: 2014-01-03\nmenu:\n  main:\n    parent: extras\nnext: \/community\/mailing-list\nnotoc: true\nprev: \/extras\/toc\ntitle: URLs\nweight: 110\n---\n\n## Pretty URLs\n\nBy default, Hugo create content with 'pretty' URLs. For example,\ncontent created at `\/content\/extras\/urls.md` will be rendered at\n`\/public\/extras\/urls\/index.html`, thus accessible from the browser\nat http:\/\/example.com\/extras\/urls\/.  No non-standard server-side\nconfiguration is required for these pretty URLs to work.\n\nIf you would like to have what we call \"ugly URLs\",\ne.g.&nbsp;http:\/\/example.com\/extras\/urls.html, you are in luck.\nHugo supports the ability to create your entire site with ugly URLs.\nSimply add `uglyurls = true` to your site-wide `config.toml`,\nor use the `--uglyUrls=true` flag on the command line.\n\nIf you want a specific piece of content to have an exact URL, you can\nspecify this in the front matter under the `url` key. See [Content\nOrganization](\/content\/organization\/) for more details. \n\n## Canonicalization\n\n<!--\nBy default, all relative URLs encountered in the input will be canonicalized\nusing `baseurl`, so that a link `\/css\/foo.css` becomes\n`http:\/\/yoursite.example.com\/css\/foo.css`.\n\nBy setting `canonifyurls` to `false` will prevent this canonicalization.\n-->\nBy default, all relative URLs encountered in the input are left unmodified,\ne.g. `\/css\/foo.css` would stay as `\/css\/foo.css`.\n\nBy setting `canonifyurls` to `true`, all relative URLs would instead\nbe *canonicalized* using `baseurl`.  For example, assuming you have\n`baseurl = http:\/\/yoursite.example.com\/` defined in the site-wide\nconfig.toml, the relative URL `\/css\/foo.css` would be turned into\nthe absolute URL `http:\/\/yoursite.example.com\/css\/foo.css`.\n\nBenefits of canonicalization include fixing all URLs to be absolute, which may\naid with some parsing tasks.  Note though that all real browsers handle this\nclient-side without issues.\n\nBenefits of non-canonicalization include being able to have resource inclusion\nbe scheme-relative, so that http vs https can be decided based on how this\npage was retrieved.\n\n### Caveat: Default of `canonifyurls` changed in v0.11\n\n<table class=\"table table-bordered\">\n<thead>\n<tr>\n<th>Hugo Version<\/th>\n<th>Release Date<\/th>\n<th>Default<\/th>\n<\/tr>\n<\/thead>\n\n<tbody>\n<tr>\n<td>v0.9<\/td>\n<td>2013-11-15<\/td>\n<td><code>canonifyurls = true<\/code> <small>(non-configurable)<\/small><\/td>\n<\/tr>\n\n<tr>\n<td>v0.10<\/td>\n<td>2014-03-01<\/td>\n<td><code>canonifyurls = true<\/code><\/td>\n<\/tr>\n\n<tr>\n<td>v0.11<\/td>\n<td>2014-05-29<\/td>\n<td><code>canonifyurls = false<\/code><\/td>\n<\/tr>\n\n<tr>\n<td>v0.12<\/td>\n<td>2014-09-01<\/td>\n<td><code>canonifyurls = false<\/code><\/td>\n<\/tr>\n\n<tr>\n<td>v0.13-DEV<\/td>\n<td><small>in development<\/small><\/td>\n<td><code>canonifyurls = false<\/code> <small>(as of January 2015)<\/small><\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n"}
{"Path":".\/meta\/license.md","Content":"---\naliases:\n- \/doc\/license\/\n- \/license\/\n- \/meta\/license\/\ndate: 2013-07-01\nmenu:\n  main:\n    parent: about\ntitle: License\nweight: 50\n---\n\nHugo is released under the Simple Public License.\n\n> *Note: There is a plan to switch to [Apache License, Version 2.0](http:\/\/www.apache.org\/licenses\/LICENSE-2.0), for future Hugo releases.  This change would only apply forward.  Existing versions of Hugo will remain released under the SimPL-2.0 license.  For more information, see [the \"Switching to Apache 2 license\" thread in the public forum](http:\/\/discuss.gohugo.io\/t\/switching-to-apache-2-license\/173).*\n\n## Simple Public License (SimPL-2.0)\n\n### Preamble\n\nThis Simple Public License 2.0 (SimPL-2.0 for short) is a plain language\nimplementation of GPL 2.0.  The words are different, but the goal is the\nsame - to guarantee for all users the freedom to share and change\nsoftware.  If anyone wonders about the meaning of the SimPL, they should\ninterpret it as consistent with GPL 2.0.\n\n\n## Simple Public License (SimPL) 2.0\n\nThe SimPL applies to the software's source and object code and comes\nwith any rights that I have in it (other than trademarks). You agree to\nthe SimPL by copying, distributing, or making a derivative work of the\nsoftware.\n\n You get the royalty free right to:\n\n-   Use the software for any purpose;\n-   Make derivative works of it (this is called a \"Derived Work\");\n-   Copy and distribute it and any Derived Work.\n\nIf you distribute the software or a Derived Work, you must give back to\nthe community by:\n\n-   Prominently noting the date of any changes you make;\n-   Leaving other people's copyright notices, warranty disclaimers, and\n    license terms in place;\n-   Providing the source code, build scripts, installation scripts, and\n    interface definitions in a form that is easy to get and best to\n    modify;\n-   Licensing it to everyone under SimPL, or substantially similar terms\n    (such as GPL 2.0), without adding further restrictions to the rights\n    provided;\n-   Conspicuously announcing that it is available under that license.\n\nThere are some things that you must shoulder:\n\n-   You get NO WARRANTIES. None of any kind;\n-   If the software damages you in any way, you may only recover direct\n    damages up to the amount you paid for it (that is zero if you did\n    not pay anything). You may not recover any other damages, including\n    those called \"consequential damages.\" (The state or country where\n    you live may not allow you to limit your liability in this way, so\n    this may not apply to you);\n\nThe SimPL continues perpetually, except that your license rights end\nautomatically if:\n\n-   You do not abide by the \"give back to the community\" terms (your\n    licensees get to keep their rights if they abide);\n-   Anyone prevents you from distributing the software under the terms\n    of the SimPL.\n\n## License for the License\n\nYou may do anything that you want with the SimPL text; it's a license\nform to use in any way that you find helpful.  To avoid confusion,\nhowever, if you change the terms in any way then you may not call your\nlicense the Simple Public License or the SimPL (but feel free to\nacknowledge that your license is \"based on the Simple Public License\").\n"}
{"Path":".\/meta\/release-notes.md","Content":"---\naliases:\n- \/doc\/release-notes\/\n- \/meta\/release-notes\/\ndate: 2013-07-01\nmenu:\n  main:\n    parent: about\ntitle: Release Notes\nweight: 10\n---\n\n## **0.13.0** ???, 2015\n\nA lot has happened since Hugo v0.12.0 was released. \n\n* Changes to docs:\n\t* A new [Troubleshooting](\/troubleshooting\/overview\/) section is added\n\t* It's now searchable through Google Custom Search ([#753][])\n\t* Some new great tutorials:\n\t\t* [Automated deployments with Wercker](\/tutorials\/automated-deployments\/)\n\t\t* [Creating a new theme](\/tutorials\/creating-a-new-theme\/)\n* Several improvements to the [template functions](\/templates\/functions\/):\n\t* `where` is now even more powerful and accepts SQL-like syntax with the operators `==`, `eq`; `!=`, `<>`, `ne`; `>=`, `ge`; `>`, `gt`; `<=`, `le`; `<`, `lt`; `in`, `not in`\n\t* `where` template function now also accepts dot chaining key argument (e.g. `\"Params.foo.bar\"`)\n* New template functions:\n\t* `apply`\n\t* `chomp`\n\t* `delimit`\n\t* `sort`\n\t* `markdownify`\n\t* `in` and `intersect` \n\t* `trim`\n\t* `replace`\n\t* `dateFormat`\n* A top level `Hugo` variable is added with various build information\n* Several new ways to order and group content:\n\t* `ByPublishDate`\n\t* `GroupByPublishDate(format, order)`\n\t* `GroupByParam(key, order)`\n\t* `GroupByParamDate(key, format, order)`\n* The [shortcode](\/extras\/shortcodes\/) handling is rewritten for speed and better error messages. Noticeable functional change is the distinction between `<\/* *\/>` (typically raw HTML) and `%\/* *\/%` (Markdown)\n* Support for [cross-references](\/extras\/crossreferences\/)\n* `Scratch` -- [a \"scratchpad\"](\/extras\/scratch) for your node- and page-scoped variables\n* A new, generic Next\/Prev functionality is added to all lists of pages (sections, taxonomies, etc.)\n* Add in-section [Next\/Prev](\/templates\/variables\/) content pointers\n* Several [configurable improvements related to Markdown rendering](\/overview\/configuration\/#configure-blackfriday-rendering:a66b35d20295cb764719ac8bd35837ec):\n\t* Configuration of footnote rendering\n\t* Optional support for smart angled quotes, e.g. `\"Hugo\"` \u2192 \u00abHugo\u00bb\n\t* Enable descriptive header IDs\n* The content is now copied from archetype on `hugo new` (in addition to the front matter metadata)\n* Improved unit test coverage\n* Hugo has undergone a major refactoring, with a new handler system and a generic file system. This sounds and is technical, but will pave the way for new features and make Hugo even speedier\n* [Ace](http:\/\/ace.yoss.si\/) template engine support ([#541][])\n* Add [pagination support](\/extras\/pagination\/) for home page, sections and taxonomies ([#750][])\n* Fixed a lot of Windows-related path issues\n* Improved error messages for template and rendering errors\n* Enabled soft LiveReload of CSS and images ([#490][])\n* Various fixes in RSS feed generation ([#789][])\n* URLs in XML output is now correctly canonified ([#725][], [#728][], and part of [#789][])\n* `HasMenuCurrent` and `IsMenuCurrent` is now supported on Nodes\n* A bunch of [bug fixes](https:\/\/github.com\/spf13\/hugo\/commits\/master)\n\n[#490]: https:\/\/github.com\/spf13\/hugo\/pull\/490 \"Pull Request #490: Livereload CSS and images without browser refresh\"\n[#541]: https:\/\/github.com\/spf13\/hugo\/pull\/541 \"Pull Request #541: Add Ace template engine support\"\n[#725]: https:\/\/github.com\/spf13\/hugo\/issues\/725 \"Issue #725: CanonifyUrls does not canonicalize urls in RSS\"\n[#728]: https:\/\/github.com\/spf13\/hugo\/issues\/728 \"Pull Request #728: Add ability to canonify URLs in rendered XML output.\"\n[#750]: https:\/\/github.com\/spf13\/hugo\/issues\/750 \"Pull Request: Add pagination support for home page, sections and taxonomies\"\n[#753]: https:\/\/github.com\/spf13\/hugo\/issues\/753 \"Add search to documentation\"\n[#789]: https:\/\/github.com\/spf13\/hugo\/issues\/789 \"Issue #789: RSS feeds do not validate\"\n\n\n## **0.12.0** Sept 1, 2014\n\nA lot has happened since Hugo v0.11.0 was released. Most of the work has been\nfocused on polishing the theme engine and adding critical functionality to the\ntemplates.\n\nThis release represents over 90 code commits from 28 different contributors.\n\n  * 10 [new themes](https:\/\/github.com\/spf13\/hugoThemes) created by the community\n  * Fully themable [Partials](\/templates\/partials\/)\n  * [404 template](\/templates\/404\/) support in themes\n  * [Shortcode](\/extras\/shortcodes\/) support in themes\n  * [Views](\/templates\/views\/) support in themes\n  * Inner [shortcode](\/extras\/shortcodes\/) content now treated as Markdown\n  * Support for header ids in Markdown (# Header {#myid})\n  * [Where](\/templates\/list\/) template function to filter lists of content, taxonomies, etc.\n  * [GroupBy](\/templates\/list\/) & [GroupByDate](\/templates\/list\/) methods to group pages\n  * Taxonomy [pages list](\/taxonomies\/methods\/) now sortable, filterable, limitable & groupable\n  * General cleanup to taxonomies & documentation to make it more clear and consistent\n  * [Showcase](\/showcase\/) returned and has been expanded\n  * Pretty links now always have trailing slashes\n  * [BaseUrl](\/overview\/configuration\/) can now include a subdirectory\n  * Better feedback about draft & future post rendering\n  * A variety of improvements to [the website](http:\/\/gohugo.io\/)\n\n## **0.11.0** May 28, 2014\n\nThis release represents over 110 code commits from 29 different contributors.\n\n  * Considerably faster... about 3 - 4x faster on average\n  * [LiveReload](\/extras\/livereload\/). Hugo will automatically reload the browser when the build is complete\n  * Theme engine w\/[Theme Repository](https:\/\/github.com\/spf13\/hugoThemes)\n  * [Menu system](\/extras\/menus\/) with support for active page\n  * [Builders](\/extras\/builders\/) to quickly create a new site, content or theme\n  * [XML sitemap](\/templates\/sitemap\/) generation\n  * [Integrated Disqus](\/extras\/comments\/) support\n  * Streamlined [template organization](\/templates\/overview\/)\n  * [Brand new docs site](http:\/\/gohugo.io\/)\n  * Support for publishDate which allows for posts to be dated in the future\n  * More [sort](\/content\/ordering\/) options\n  * Logging support\n  * Much better error handling\n  * More informative verbose output\n  * Renamed Indexes > [Taxonomies](\/taxonomies\/overview\/)\n  * Renamed Chrome > [Partials](\/templates\/partials\/)\n\n## **0.10.0** March 1, 2014\n\nThis release represents over 110 code commits from 29 different contributors.\n\n  * [Syntax highlighting](\/extras\/highlighting\/) powered by pygments (**slow**)\n  * Ability to [sort content](\/content\/ordering\/) many more ways\n  * Automatic [table of contents](\/extras\/toc\/) generation\n  * Support for Unicode URLs, aliases and indexes\n  * Configurable per-section [permalink](\/extras\/permalinks\/) pattern support\n  * Support for [paired shortcodes](\/extras\/shortcodes\/)\n  * Shipping with some [shortcodes](\/extras\/shortcodes\/) (highlight & figure)\n  * Adding [canonify](\/extras\/urls\/) option to keep urls relative\n  * A bunch of [additional template functions](\/layout\/functions\/)\n  * Watching very large sites now works on Mac\n  * RSS generation improved. Limited to 50 items by default, can limit further in [template](\/layout\/rss\/)\n  * Boolean params now supported in [frontmatter](\/content\/front-matter\/)\n  * Launched website [showcase](\/showcase\/). Show off your own hugo site!\n  * A bunch of [bug fixes](https:\/\/github.com\/spf13\/hugo\/commits\/master)\n\n## **0.9.0** November 15, 2013\n\nThis release represents over 220 code commits from 22 different contributors.\n\n  * New [command based interface](\/overview\/usage\/) similar to git (`hugo server -s .\/`)\n  * Amber template support\n  * [Aliases](\/extras\/aliases\/) (redirects)\n  * Support for top level pages (in addition to homepage)\n  * Complete overhaul of the documentation site\n  * Full Windows support\n  * Better index support including [ordering by content weight](\/content\/ordering\/)\n  * Add params to site config, available in .Site.Params from templates\n  * Friendlier json support\n  * Support for html & xml content (with frontmatter support)\n  * Support for [summary](\/content\/summaries\/) content divider (<code>&lt;!&#45;&#45;more&#45;&#45;&gt;<\/code>)\n  * HTML in [summary](\/content\/summaries\/) (when using divider)\n  * Added [\"Minutes to Read\"](\/layout\/variables\/) functionality\n  * Support for a custom 404 page\n  * Cleanup of how content organization is handled\n  * Loads of unit and performance tests\n  * Integration with travis ci\n  * Static directory now watched and copied on any addition or modification\n  * Support for relative permalinks\n  * Fixed watching being triggered multiple times for the same event\n  * Watch now ignores temp files (as created by Vim)\n  * Configurable number of posts on [homepage](\/layout\/homepage\/)\n  * [Front matter](\/content\/front-matter\/) supports multiple types (int, string, date, float)\n  * Indexes can now use a default template\n  * Addition of truncated bool to content to determine if should show 'more' link\n  * Support for [linkTitles](\/layout\/variables\/)\n  * Better handling of most errors with directions on how to resolve\n  * Support for more date \/ time formats\n  * Support for go 1.2\n  * Support for `first` in templates\n\n## **0.8.0** August 2, 2013\n\nThis release represents over 65 code commits from 6 different contributors.\n\n  * Added support for pretty urls (filename\/index.html vs filename.html)\n  * Hugo supports a destination directory\n  * Will efficiently sync content in static to destination directory\n  * Cleaned up options.. now with support for short and long options\n  * Added support for TOML\n  * Added support for YAML\n  * Added support for Previous & Next\n  * Added support for indexes for the indexes\n  * Better Windows compatibility\n  * Support for series\n  * Adding verbose output\n  * Loads of bugfixes\n\n## **0.7.0** July 4, 2013\n  * Hugo now includes a simple server\n  * First public release\n\n## **0.6.0** July 2, 2013\n  * Hugo includes an example documentation site which it builds\n\n## **0.5.0** June 25, 2013\n  * Hugo is quite usable and able to build spf13.com\n\n"}
{"Path":".\/meta\/roadmap.md","Content":"---\naliases:\n- \/doc\/roadmap\/\n- \/meta\/roadmap\/\ndate: 2013-07-01\nmenu:\n  main:\n    parent: about\nnotoc: true\ntitle: Hugo Roadmap\nweight: 20\n---\n\nIn no particular order, here is what we are working on:\n\n * Intelligently Related Posts\n * Even easier deployment to S3, SSH, GitHub, rsync\n * Import from other website systems (WordPress, Jekyll)\n * An interactive web based editor\n * Additional themes\n * Dynamic image resizing via shortcodes\n * Support for additional formats\n * Pagination\n * Your best ideas\n\n"}
{"Path":".\/overview\/configuration.md","Content":"---\naliases:\n- \/doc\/configuration\/\ndate: 2013-07-01\nlinktitle: Configuration\nmenu:\n  main:\n    parent: getting started\nnext: \/overview\/source-directory\nnotoc: true\nprev: \/overview\/usage\ntitle: Configuring Hugo\nweight: 40\n---\n\nThe directory structure and templates provide the majority of the\nconfiguration for a site. In fact, a config file isn't even needed for many\nwebsites since the defaults follow commonly used patterns.\n\nHugo expects to find the config file in the root of the source directory and\nwill look there first for a `config.toml` file. If none is present, it will\nthen look for a `config.yaml` file, followed by a `config.json` file.\n\nThe config file is a site-wide config. The config file provides directions to\nhugo on how to build the site as well as site-wide parameters and menus.\n\n## Examples\n\nThe following is an example of a typical yaml config file:\n\n    ---\n    baseurl: \"http:\/\/yoursite.example.com\/\"\n    ...\n\nThe following is an example of a toml config file with some of the default values. Values under `[params]` will populate the `.Site.Params` variable for use in templates:\n\n    contentdir = \"content\"\n    layoutdir = \"layouts\"\n    publishdir = \"public\"\n    builddrafts = false\n    baseurl = \"http:\/\/yoursite.example.com\/\"\n    canonifyurls = true\n\n    [taxonomies]\n      category = \"categories\"\n      tag = \"tags\"\n       \n    [params]\n      description = \"Tesla's Awesome Hugo Site\"\n      author = \"Nikola Tesla\"\n\nHere is a yaml configuration file which sets a few more options\n\n    ---\n    baseurl: \"http:\/\/yoursite.example.com\/\"\n    title: \"Yoyodyne Widget Blogging\"\n    footnotereturnlinkcontents: \"\u21a9\"\n    permalinks:\n      post: \/:year\/:month\/:title\/\n    params:\n      Subtitle: \"Spinning the cogs in the widgets\"\n      AuthorName: \"John Doe\"\n      GitHubUser: \"spf13\"\n      ListOfFoo:\n        - \"foo1\"\n        - \"foo2\"\n      SidebarRecentLimit: 5\n    ...\n\n## Configure Blackfriday rendering\n\n[Blackfriday](https:\/\/github.com\/russross\/blackfriday) is the [Markdown](http:\/\/daringfireball.net\/projects\/markdown\/) rendering engine used in Hugo. The Blackfriday configuration in Hugo is mostly a set of sane defaults that should fit most use cases.\n\nBut Hugo does expose some options---as listed in the table below, matched with the corresponding flag in the Blackfriday source ([html.go](https:\/\/github.com\/russross\/blackfriday\/blob\/master\/html.go) and [markdown.go](https:\/\/github.com\/russross\/blackfriday\/blob\/master\/markdown.go)):\n\n<table class=\"table table-bordered\">\n<thead>\n<tr>\n<th>Flag<\/th><th>Default<\/th><th>Blackfriday flag<\/th>\n<\/tr>\n<\/thead>\n\n<tbody>\n<tr>\n<td><code>angledQuotes<\/code><\/td>\n<td><code>false<\/code><\/td>\n<td><code>HTML_SMARTYPANTS_ANGLED_QUOTES<\/code><\/td>\n<\/tr>\n<tr>\n<td class=\"purpose-title\">Purpose:<\/td>\n<td class=\"purpose-description\" colspan=\"2\">Enable smart angled double quotes <small>(e.g.&nbsp;<code>\"Hugo\"<\/code> renders to \u00abHugo\u00bb instead of \u201cHugo\u201d)<\/small><\/td>\n<\/tr>\n\n<tr>\n<td><code>fractions<\/code><\/td>\n<td><code>true<\/code><\/td>\n<td><code>HTML_SMARTYPANTS_FRACTIONS<\/code><\/td>\n<\/tr>\n<tr>\n<td class=\"purpose-title\">Purpose:<\/td>\n<td class=\"purpose-description\" colspan=\"2\">Enable smart fractions\n<small>(e.g.&nbsp;<code>5\/12<\/code> renders to <sup>5<\/sup>&frasl;<sub>12<\/sub> (<code>&lt;sup&gt;5&lt;\/sup&gt;&amp;frasl;&lt;sub&gt;12&lt;\/sub&gt;<\/code>))\n<strong>Caveat:<\/strong> Even with <code>fractions = false<\/code>,\nBlackfriday would still convert 1\/2, 1\/4 and 3\/4 to \u00bd&nbsp;(<code>&amp;frac12;<\/code>),\n\u00bc&nbsp;(<code>&amp;frac14;<\/code>) and \u00be&nbsp;(<code>&amp;frac34;<\/code>) respectively,\nbut only these three.<\/small><\/td>\n<\/tr>\n\n<tr>\n<td><code>plainIdAnchors<\/code><\/td>\n<td><code>false<\/code><\/td>\n<td><code>FootnoteAnchorPrefix<\/code> and <code>HeaderIDSuffix<\/code><\/td>\n<\/tr>\n<tr>\n<td class=\"purpose-title\">Purpose:<\/td>\n<td class=\"purpose-description\" colspan=\"2\">If <code>true<\/code>, then header and footnote IDs are generated without the document ID <small>(e.g.&nbsp;<code>#my-header<\/code> instead of <code>#my-header:bec3ed8ba720b9073ab75abcf3ba5d97<\/code>)<\/small><\/td>\n<\/tr>\n\n<tr>\n<td><code>extensions<\/code><\/td>\n<td><code>[]<\/code><\/td>\n<td><code>EXTENSION_*<\/code><\/td>\n<\/tr>\n<tr>\n<td class=\"purpose-title\">Purpose:<\/td>\n<td class=\"purpose-description\" colspan=\"2\">Use non-default additional extensions <small>(e.g.&nbsp;Add <code>\"hardLineBreak\"<\/code> to use <code>EXTENSION_HARD_LINE_BREAK<\/code>)<\/small><\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n\n\n**Note** that these flags must be grouped under the `blackfriday` key and can be set on **both site and page level**. If set on page, it will override the site setting.  Example:\n\n<table class=\"table\">\n<thead>\n<tr>\n<th>TOML<\/th><th>YAML<\/th>\n<\/tr>\n<\/thead>\n<tbody>\n<tr>\n<td><pre><code>[blackfriday]\n  angledQuotes = true\n  fractions = false\n  plainIdAnchors = true\n  extensions = [\"hardLineBreak\"]\n<\/code><\/pre><\/td>\n<td><pre><code>blackfriday:\n  angledQuotes: true\n  fractions: false\n  plainIdAnchors: true\n  extensions:\n    - hardLineBreak\n<\/code><\/pre><\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n\n## Notes\n\nConfig changes are not reflected with [LiveReload](\/extras\/livereload\/).\n\nPlease restart `hugo server --watch` whenever you make a config change.\n"}
{"Path":".\/overview\/installing.md","Content":"---\naliases:\n- \/doc\/installing\/\ndate: 2013-07-01\nmenu:\n  main:\n    parent: getting started\nnext: \/overview\/usage\nprev: \/overview\/quickstart\ntitle: Installing Hugo\nweight: 20\n---\n\nHugo is written in Go with support for multiple platforms.\n\nThe latest release can be found at [Hugo Releases](https:\/\/github.com\/spf13\/hugo\/releases).\nWe currently build for <i class=\"fa fa-windows\"><\/i>&nbsp;Windows,\n<i class=\"fa fa-linux\"><\/i>&nbsp;Linux,\n<i class=\"fa freebsd-19px\"><\/i>&nbsp;FreeBSD\nand <i class=\"fa fa-apple\"><\/i>&nbsp;OS&nbsp;X\nfor x64 and i386 architectures.\n\n## Installing Hugo (binary)\n\nInstallation is very easy. Simply download the appropriate version for your\nplatform from [Hugo Releases](https:\/\/github.com\/spf13\/hugo\/releases).\nOnce downloaded it can be run from anywhere. You don't need to install\nit into a global location. This works well for shared hosts and other systems\nwhere you don't have a privileged account.\n\nIdeally, you should install it somewhere in your `PATH` for easy use.\n`\/usr\/local\/bin` is the most probable location.\n\nOn OS&nbsp;X, if you have [Homebrew](http:\/\/brew.sh\/), installation is even\neasier: just run `brew install hugo`.\n\n### Installing Pygments (optional)\n\nThe Hugo executable has one *optional* external dependency for source code highlighting (Pygments).\n\nIf you want to have source code highlighting using the [highlight shortcode](\/extras\/highlighting\/),\nyou need to install the Python-based Pygments program. The procedure is outlined on the [Pygments home page](http:\/\/pygments.org\/).\n\n## Upgrading Hugo\n\nUpgrading Hugo is as easy as downloading and replacing the executable you\u2019ve\nplaced in your `PATH`.\n\n\n## Installing from source\n\n### Dependencies\n\n* Git\n* Go 1.1+ (Go 1.4+ on Windows, see Go [Issue #8090](https:\/\/code.google.com\/p\/go\/issues\/detail?id=8090))\n* Mercurial\n* Bazaar\n\n### Get directly from GitHub\n\n    $ export GOPATH=$HOME\/go\n    $ go get -v github.com\/spf13\/hugo\n\n`go get` will then fetch Hugo and all its dependent libraries to your\n`$GOPATH\/src` directory, and compile everything into the final `hugo`\n(or `hugo.exe`) executable, which you will find sitting in the\n`$GOPATH\/bin\/` directory, all ready to go!\n\nYou may run `go get` with the `-u` option to update Hugo's dependencies:\n\n    $ go get -u -v github.com\/spf13\/hugo\n\n## Contributing\n\nPlease see the [contributing guide](\/doc\/contributing\/).\n"}
{"Path":".\/overview\/introduction.md","Content":"---\ndate: 2013-07-01\nlinktitle: Introduction\nmenu:\n  main:\n    parent: getting started\nnext: \/overview\/quickstart\ntitle: Introduction to Hugo\nweight: 5\n---\n\n## What is Hugo?\n\nHugo is a general-purpose website framework. Technically speaking, Hugo is\na static site generator. This means that, unlike systems like WordPress,\nGhost and Drupal, which run on your web server expensively building a page\nevery time a visitor requests one, Hugo does the building when you create\nyour content. Since websites are viewed far more often then they are\nedited, Hugo is optimized for website viewing while providing a great\nwriting experience.\n\nSites built with Hugo are extremely fast and very secure. Hugo sites can\nbe hosted anywhere, including [Heroku][], [GoDaddy][], [DreamHost][],\n[GitHub Pages][], [Amazon S3][] and [CloudFront][], and work well with CDNs.\nHugo sites run without dependencies on expensive runtimes like Ruby,\nPython or PHP and without dependencies on any databases.\n\n[Heroku]: https:\/\/www.heroku.com\/\n[GoDaddy]: https:\/\/www.godaddy.com\/\n[DreamHost]: http:\/\/www.dreamhost.com\/\n[GitHub Pages]: https:\/\/pages.github.com\/\n[Amazon S3]: http:\/\/aws.amazon.com\/s3\/\n[CloudFront]: http:\/\/aws.amazon.com\/cloudfront\/ \"Amazon CloudFront\"\n\nWe think of Hugo as the ideal website creation tool. With nearly instant\nbuild times and the ability to rebuild whenever a change is made, Hugo\nprovides a very fast feedback loop. This is essential when you are\ndesigning websites, but also very useful when creating content.\n\n## How fast is Hugo?\n\n% youtube CdiDYZ51a2o %\n\n## What does Hugo do?\n\nIn technical terms, Hugo takes a source directory of Markdown files and\ntemplates and uses these as input to create a complete website.\n\nHugo boasts the following features:\n\n### General\n\n  * Extremely fast build times (~1&nbsp;ms per page)\n  * Completely cross platform: Runs on <i class=\"fa fa-apple\"><\/i>&nbsp;Mac OS&nbsp;X, <i class=\"fa fa-linux\"><\/i>&nbsp;Linux, <i class=\"fa fa-windows\"><\/i>&nbsp;Windows, and more!\n  * Easy [installation](\/overview\/installing\/)\n  * Render changes [on the fly](\/overview\/usage\/) with [LiveReload](\/extras\/livereload\/) as you develop\n  * Complete theme support\n  * Host your site anywhere\n\n### Organization\n\n  * Straightforward [organization](\/content\/organization\/)\n  * Support for [website sections](\/content\/sections\/)\n  * Completely customizable [URLs](\/extras\/urls\/)\n  * Support for configurable [taxonomies](\/taxonomies\/overview\/) which includes categories and tags.  Create your own custom organization of content\n  * Ability to [sort content](\/content\/ordering\/) as you desire\n  * Automatic [table of contents](\/extras\/toc\/) generation\n  * Dynamic menu creation\n  * [Pretty URLs](\/extras\/urls\/) support\n  * [Permalink](\/extras\/permalinks\/) pattern support\n  * [Aliases](\/extras\/aliases\/) (redirects)\n\n### Content\n\n  * Content written in [Markdown](\/content\/example\/)\n  * Support for TOML, YAML and JSON metadata in [frontmatter](\/content\/front-matter\/)\n  * Completely [customizable homepage](\/layout\/homepage\/)\n  * Support for multiple [content types](\/content\/types\/)\n  * Automatic and user defined [summaries](\/content\/summaries\/)\n  * [Shortcodes](\/extras\/shortcodes\/) to enable rich content inside of Markdown\n  * [\"Minutes to Read\"](\/layout\/variables\/) functionality\n  * [\"Wordcount\"](\/layout\/variables\/) functionality\n\n### Additional Features\n\n  * Integrated [Disqus](https:\/\/disqus.com\/) comment support\n  * Automatic [RSS](\/layout\/rss\/) creation\n  * Support for [Go](http:\/\/golang.org\/pkg\/html\/template\/), [Amber](https:\/\/github.com\/eknkc\/amber) and [Ace](http:\/\/ace.yoss.si\/) HTML templates\n  * Syntax [highlighting](\/extras\/highlighting\/) powered by [Pygments](http:\/\/pygments.org\/)\n\nSee what's coming next in the [roadmap](\/meta\/roadmap\/).\n\n## Who should use Hugo?\n\nHugo is for people that prefer writing in a text editor over\na browser.\n\nHugo is for people who want to hand code their own website without\nworrying about setting up complicated runtimes, dependencies and\ndatabases.\n\nHugo is for people building a blog, company site, portfolio, tumblog,\ndocumentation, single page site or a site with thousands of\npages.\n\n## Why did you write Hugo?\n\nI wrote Hugo ultimately for a few reasons. First, I was disappointed with\nWordPress, my then website solution. It rendered slowly. I couldn't create\ncontent as efficiently as I wanted to and needed to be online to write\nposts. The constant security updates and the horror stories of people's\nhacked blogs. I hated how content was written in HTML instead of the much\nsimpler Markdown. Overall, I felt like it got in my way more than it helped\nme from writing great content.\n\nI looked at existing static site generators like [Jekyll][], [Middleman][] and [nanoc][].\nAll had complicated dependencies to install and took far longer to render\nmy blog with hundreds of posts than I felt was acceptable. I wanted\na framework to be able to get rapid feedback while making changes to the\ntemplates, and the 5+-minute render times was just too slow. In general,\nthey were also very blog minded and didn't have the ability to have\ndifferent content types and flexible URLs.\n\n[Jekyll]: http:\/\/jekyllrb.com\/\n[Middleman]: https:\/\/middlemanapp.com\/\n[nanoc]: http:\/\/nanoc.ws\/\n\nI wanted to develop a fast and full-featured website framework without\ndependencies. The [Go language][] seemed to have all of the features I needed\nin a language. I began developing Hugo in Go and fell in love with the\nlanguage. I hope you will enjoy using (and contributing to) Hugo as much\nas I have writing it.\n\n[Go language]: http:\/\/golang.org\/ \"The Go Programming Language\"\n\n## Next Steps\n\n * [Install Hugo](\/overview\/installing\/)\n * [Quick start](\/overview\/quickstart\/)\n * [Join the Mailing List](\/community\/mailing-list\/)\n * [Star us on GitHub](https:\/\/github.com\/spf13\/hugo)\n * [Discussion Forum](http:\/\/discuss.gohugo.io\/)\n\n"}
{"Path":".\/overview\/quickstart.md","Content":"---\ndate: 2013-07-01\nlinktitle: Quickstart\nmenu:\n  main:\n    parent: getting started\nnext: \/overview\/installing\nprev: \/overview\/introduction\ntitle: Hugo Quickstart Guide\nweight: 10\n---\n\n> _Note: This quickstart depends on features introduced in Hugo v0.11.  If you have an earlier version of Hugo, you will need to [upgrade](\/overview\/installing\/) before proceeding._\n\n% youtube w7Ft2ymGmfc %\n\n## Step 1. Install Hugo\n\nGo to [Hugo Releases](https:\/\/github.com\/spf13\/hugo\/releases) and download the\nappropriate version for your OS and architecture.\n\nSave the main executable as `hugo` (or `hugo.exe` on Windows) somewhere in your `PATH` as we will be using it in the next step.\n\nMore complete instructions are available at [Installing Hugo](\/overview\/installing\/).\n\n## Step 2. Have Hugo Create a site for you\n\nHugo has the ability to create a skeleton site:\n\n    $ hugo new site \/path\/to\/site\n\nFor the rest of the operations, we will be executing all commands from within the site directory.\n\n    $ cd \/path\/to\/site\n\nThe new site will have the following structure\n\n      \u25b8 archetypes\/\n      \u25b8 content\/\n      \u25b8 layouts\/\n      \u25b8 static\/\n        config.toml\n\nCurrently the site doesn\u2019t have any content, nor is it configured.\n\n## Step 3. Create Some Content\n\nHugo also has the ability to create a skeleton content page:\n\n    $ hugo new about.md\n\nA new file is now created in `content\/` with the following contents:\n\n```\n+++\ndate = \"2015-01-08T08:36:54-07:00\"\ndraft = true\ntitle = \"about\"\n\n+++\n\n```\n\nNotice the date is automatically set to the moment you created the content.\n\nPlace some content in Markdown format below the `+++` in this file.\nFor example:\n\n```markdown\n## A headline\n\nSome Content\n```\n\nFor fun, let\u2019s create another piece of content and place some Markdown in it as well.\n\n    $ hugo new post\/first.md\n\nThe new file is located at `content\/post\/first.md`\n\nWe still lack any templates to tell us how to display the content.\n\n## Step 4. Install some themes\n\nHugo has rich theme support and a growing set of themes to choose from:\n\n```bash\n$ git clone --recursive https:\/\/github.com\/spf13\/hugoThemes themes\n```\n\n## Step 5. Run Hugo\n\nHugo contains its own high-performance web server. Simply run `hugo\nserver` and Hugo will find an available port and run a server with\nyour content:\n\n    $ hugo server --theme=hyde --buildDrafts\n    2 pages created\n    0 tags created\n    0 categories created\n    in 5 ms\n    Serving pages from exampleHugoSite\/public\n    Web Server is available at http:\/\/localhost:1313\n    Press ctrl+c to stop\n\nWe specified two options here:\n\n * `--theme` to pick which theme;\n * `--buildDrafts` because we want to display our content, both set to draft status.\n\nTo learn about what other options hugo has, run:\n\n    $ hugo help\n\nTo learn about the server options:\n\n    $ hugo help server\n\n## Step 6. Edit Content\n\nNot only can Hugo run a server, but it can also watch your files for\nchanges and automatically rebuild your site. Hugo will then\ncommunicate with your browser and automatically reload any open page.\nThis even works in mobile browsers.\n\nStop the Hugo process by hitting <kbd>Ctrl<\/kbd>+<kbd>C<\/kbd>. Then run the following:\n\n    $ hugo server --theme=hyde --buildDrafts --watch\n    2 pages created\n    0 tags created\n    0 categories created\n    in 5 ms\n    Watching for changes in exampleHugoSite\/content\n    Serving pages from exampleHugoSite\/public\n    Web Server is available at http:\/\/localhost:1313\n    Press ctrl+c to stop\n\nOpen your [favorite editor](http:\/\/vim.spf13.com\/), edit and save your content, and watch as Hugo rebuilds and reloads automatically.\n\nIt\u2019s especially productive to leave a browser open on a second monitor\nand just glance at it whenever you save. You don\u2019t even need to tab to\nyour browser. Hugo is so fast that the new site will be there before\nyou can look at the browser in most cases.\n\nChange and save this file. Notice what happened in your terminal:\n\n    Change detected, rebuilding site\n\n    2 pages created\n    0 tags created\n    0 categories created\n    in 5 ms\n\n## Step 7. Have fun\n\nThe best way to learn something is to play with it.\n\nThings to try:\n\n * Add a [new content file](\/content\/organization\/)\n * Create a [new section](\/content\/sections\/)\n * Modify [a template](\/layout\/templates\/)\n * Create content with [TOML front matter](\/content\/front-matter\/)\n * Define your own field in [front matter](\/content\/front-matter\/)\n * Display that [field in the template](\/layout\/variables\/)\n * Create a [new content type](\/content\/types\/)\n"}
{"Path":".\/overview\/source-directory.md","Content":"---\naliases:\n- \/doc\/source-directory\/\ndate: 2013-07-01\nmenu:\n  main:\n    parent: getting started\nnext: \/content\/organization\nnotoc: true\nprev: \/overview\/configuration\ntitle: Source Organization\nweight: 50\n---\n\nHugo takes a single directory and uses it as the input for creating a complete\nwebsite.\n\n\nThe top level of a source directory will typically have the following elements:\n\n    \u25b8 archetypes\/\n    \u25b8 content\/\n    \u25b8 layouts\/\n    \u25b8 static\/\n    \u25b8 themes\/\n      config.toml\n\nLearn more about the different directories and what their purpose is:\n\n* [config](\/overview\/configuration\/)\n* [archetypes](\/content\/archetypes\/)\n* [content](\/content\/organization\/)\n* [layouts](\/layout\/overview\/)\n* [static](\/themes\/creation#toc_4)\n* [themes](\/themes\/overview\/)\n\n\n## Example\n\nAn example directory may look like:\n\n    .\n    \u251c\u2500\u2500 config.toml\n    \u251c\u2500\u2500 archetypes\n    |   \u2514\u2500\u2500 default.md\n    \u251c\u2500\u2500 content\n    |   \u251c\u2500\u2500 post\n    |   |   \u251c\u2500\u2500 firstpost.md\n    |   |   \u2514\u2500\u2500 secondpost.md\n    |   \u2514\u2500\u2500 quote\n    |   |   \u251c\u2500\u2500 first.md\n    |   |   \u2514\u2500\u2500 second.md\n    \u251c\u2500\u2500 layouts\n    |   \u251c\u2500\u2500 _default\n    |   |   \u251c\u2500\u2500 single.html\n    |   |   \u2514\u2500\u2500 list.html\n    |   \u251c\u2500\u2500 partials\n    |   |   \u251c\u2500\u2500 header.html\n    |   |   \u2514\u2500\u2500 footer.html\n    |   \u251c\u2500\u2500 taxonomies\n    |   |   \u251c\u2500\u2500 category.html\n    |   |   \u251c\u2500\u2500 post.html\n    |   |   \u251c\u2500\u2500 quote.html\n    |   |   \u2514\u2500\u2500 tag.html\n    |   \u251c\u2500\u2500 post\n    |   |   \u251c\u2500\u2500 li.html\n    |   |   \u251c\u2500\u2500 single.html\n    |   |   \u2514\u2500\u2500 summary.html\n    |   \u251c\u2500\u2500 quote\n    |   |   \u251c\u2500\u2500 li.html\n    |   |   \u251c\u2500\u2500 single.html\n    |   |   \u2514\u2500\u2500 summary.html\n    |   \u251c\u2500\u2500 shortcodes\n    |   |   \u251c\u2500\u2500 img.html\n    |   |   \u251c\u2500\u2500 vimeo.html\n    |   |   \u2514\u2500\u2500 youtube.html\n    |   \u251c\u2500\u2500 index.html\n    |   \u2514\u2500\u2500 sitemap.xml\n    \u251c\u2500\u2500 themes\n    |   \u251c\u2500\u2500 hyde\n    |   \u2514\u2500\u2500 doc\n    \u2514\u2500\u2500 static\n        \u251c\u2500\u2500 css\n        \u2514\u2500\u2500 js\n\nThis directory structure tells us a lot about this site:\n\n1. The website intends to have two different types of content: *posts* and *quotes*.\n2. It will also apply two different taxonomies to that content: *categories* and *tags*.\n3. It will be displaying content in 3 different views: a list, a summary and a full page view.\n"}
{"Path":".\/overview\/usage.md","Content":"---\naliases:\n- \/doc\/usage\/\ndate: 2013-07-01\nmenu:\n  main:\n    parent: getting started\nnext: \/overview\/configuration\nnotoc: true\nprev: \/overview\/installing\ntitle: Using Hugo\nweight: 30\n---\n\nMake sure either `hugo` is in your `PATH` or provide a path to it.\n\n    $ hugo help\n    A Fast and Flexible Static Site Generator\n    built with love by spf13 and friends in Go.\n\n    Complete documentation is available at http:\/\/gohugo.io\n\n    Usage:\n      hugo [flags]\n      hugo [command]\n\n    Available Commands:\n      server                    Hugo runs its own webserver to render the files\n      version                   Print the version number of Hugo\n      check                     Check content in the source directory\n      benchmark                 Benchmark hugo by building a site a number of times\n      new [path]                Create new content for your site\n      help [command]            Help about any command\n\n     Available Flags:\n      -b, --baseUrl=\"\": hostname (and path) to the root eg. http:\/\/spf13.com\/\n      -D, --buildDrafts=false: build content marked as draft\n      -F, --buildFuture=false: build content with PublishDate in the future\n          --config=\"\": config file (default is path\/config.yaml|json|toml)\n      -d, --destination=\"\": filesystem path to write files to\n          --disableRSS=false: Do not build RSS files\n          --disableSitemap=false: Do not build Sitemap file\n          --log=false: Enable Logging\n          --logFile=\"\": Log File path (if set, logging enabled automatically)\n      -s, --source=\"\": filesystem path to read files relative from\n          --stepAnalysis=false: display memory and timing of different steps of the program\n      -t, --theme=\"\": theme to use (located in \/themes\/THEMENAME\/)\n          --uglyUrls=false: if true, use \/filename.html instead of \/filename\/\n      -v, --verbose=false: verbose output\n          --verboseLog=false: verbose logging\n      -w, --watch=false: watch filesystem for changes and recreate as needed\n\n    Use \"hugo help [command]\" for more information about that command.\n\n## Common Usage Example\n\nThe most common use is probably to run `hugo` with your current\ndirectory being the input directory.\n\n    $ hugo\n    > X pages created\n      in 8 ms\n\nIf you are working on things and want to see the changes\nimmediately, tell Hugo to watch for changes.\n\nHugo will watch the filesystem for changes, rebuild your site as soon as a file\nis saved.\n\n    $ hugo -s ~\/mysite --watch\n       28 pages created\n       in 18 ms\n       Watching for changes in \/Users\/spf13\/Code\/hugo\/docs\/content\n       Press ctrl+c to stop\n\nHugo can even run a server and create your site at the same time! Hugo\nimplements [LiveReload](\/extras\/livereload\/) technology to automatically reload any open pages in\nall browsers (including mobile).\n\n    $ hugo server -ws ~\/mysite\n       Watching for changes in \/Users\/spf13\/Code\/hugo\/docs\/content\n       Web Server is available at http:\/\/localhost:1313\n       Press ctrl+c to stop\n       28 pages created\n       0 tags created\n       in 18 ms\n\n"}
{"Path":".\/showcase\/antzucaro.md","Content":"---\ndate: 2014-02-03T20:00:00Z\ndescription: Ant Zucaro's Blog\nlicense: GPL\nlicenseLink: \"\"\nsitelink: http:\/\/antzucaro.com\/\nsourceLink: https:\/\/github.com\/antzucaro\/az.com\ntags:\n- personal\n- blog\n- foundation\nthumbnail: \/img\/antzucaro-tn.jpg\ntitle: Ant Zucaro\n---\n\n"}
{"Path":".\/showcase\/asc.md","Content":"---\ndate: 2014-01-22T07:32:00Z\ndescription: \"\"\nlicense: CC-BY-SA\nlicenseLink: \"\"\nsitelink: http:\/\/andrewcodispoti.com\/\nsourceLink: https:\/\/gitlab.com\/acodispo\/andrewcodispoti-com\ntags:\n- personal\n- bootstrap\nthumbnail: \/img\/asc-tn.jpg\ntitle: Andrew S Codispoti\n---\n\n"}
{"Path":".\/showcase\/chimera-art-space.md","Content":"---\ndate: 2013-10-02T07:32:00Z\ndescription: \"\"\nlicense: CC-SA\nlicenseLink: \"\"\nsitelink: http:\/\/chimeraarts.org\/\nsourceLink: https:\/\/github.com\/chimera\/chimeraarts.org\ntags:\n- company\n- bootstrap\nthumbnail: \/img\/chimera-tn.jpg\ntitle: Chimera Art Space\n---\n\n"}
{"Path":".\/showcase\/chingli.md","Content":"---\ndate: 2014-08-26T11:20:02-04:00\ndescription: \"\"\nlicense: \"\"\nlicenseLink: \"\"\nsitelink: http:\/\/www.chingli.com\/\nsourceLink: \"\"\ntags:\n- personal\n- blog\nthumbnail: \/img\/chingli-tn.jpg\ntitle: \u9752\u783e (chingli)\n---\n\n"}
{"Path":".\/showcase\/cloudshark.md","Content":"---\ndate: 2014-03-27T09:45:00Z\ndescription: CloudShark Appliance homepage and documentation\nlicense: \"\"\nlicenseLink: \"\"\nsitelink: https:\/\/appliance.cloudshark.org\/\ntags:\n- company\n- documentation\n- foundation\nthumbnail: \/img\/cloudshark-tn.jpg\ntitle: CloudShark\n---\n\n"}
{"Path":".\/showcase\/danmux.md","Content":"---\ndate: 2014-08-26T10:55:23-04:00\ndescription: \"\"\nlicense: MIT\nlicenseLink: \"\"\nsitelink: http:\/\/danmux.com\/\nsourceLink: https:\/\/github.com\/danmux\/danmux-hugo\ntags:\n- personal\n- blog\nthumbnail: \/img\/danmux-tn.jpg\ntitle: Danmux\n---\n\n"}
{"Path":".\/showcase\/devmonk.md","Content":"---\ndate: 2014-08-26T11:31:02-04:00\ndescription: \"\"\nlicense: \"\"\nlicenseLink: \"\"\nsitelink: https:\/\/devmonk.com\/\nsourceLink: https:\/\/github.com\/peteraba\/devmonk.com\ntags:\n- educational\n- video\nthumbnail: \/img\/devmonk-tn.jpg\ntitle: devmonk\n---\n\n"}
{"Path":".\/showcase\/hackmeeting.md","Content":"---\ndate: 2014-08-25T18:30:40-04:00\ndescription: the website developed for the Hackmeeting 2014, the italian meeting of the digital countercultures held this year in Bologna\nlicense: Unknown\nlicenseLink: \"\"\nsitelink: http:\/\/it.hackmeeting.org\/\nsourceLink: https:\/\/git.autistici.org\/void\/hackit14\ntags:\n- foundation5\n- conference\nthumbnail: \/img\/hackmeeting-tn.jpg\ntitle: hackmeeting\n---\n\n"}
{"Path":".\/showcase\/heyitsalex.md","Content":"---\ndate: 2014-03-09T06:00:00Z\ndescription: \"\"\nlicense: MIT\nlicenseLink: \"\"\nsitelink: http:\/\/heyitsalex.net\/\nsourceLink: https:\/\/github.com\/alexandre-normand\/alexandre-normand\ntags:\n- personal\n- blog\nthumbnail: \/img\/heyitsalex-tn.jpg\ntitle: Hey, it's Alex\n---\n\n"}
{"Path":".\/showcase\/hugo.md","Content":"---\ndate: 2013-07-01T07:32:00Z\ndescription: This site\nlicense: Simpl\nlicenseLink: \"\"\nsitelink: http:\/\/gohugo.io\/\nsourceLink: https:\/\/github.com\/spf13\/hugo\/tree\/master\/docs\ntags:\n- documentation\n- bootstrap\nthumbnail: \/img\/hugo-tn.jpg\ntitle: Hugo\n---\n\n"}
{"Path":".\/showcase\/ifup.md","Content":"---\ndate: 2013-11-02T07:32:00Z\ndescription: \"\"\nlicense: MIT\nlicenseLink: \"\"\nsitelink: http:\/\/ifup.org\/\ntags:\n- personal\n- blog\nthumbnail: \/img\/ifup-tn.jpg\ntitle: ifup\n---\n\n"}
{"Path":".\/showcase\/kieranhealy.md","Content":"---\ndate: 2014-02-27T20:35:00Z\ndescription: Kieran Healy's Website\nlicense: \"\"\nlicenseLink: \"\"\nsitelink: http:\/\/kieranhealy.org\/\nsourceLink: https:\/\/github.com\/kjhealy\/kieranhealy.hugo\ntags:\n- personal\n- blog\n- academic\nthumbnail: \/img\/kjhealy-tn.jpg\ntitle: Kieran Healy\n---\n\n"}
{"Path":".\/showcase\/launchcode5.md","Content":"---\ndate: 2014-11-01T07:32:00Z\ndescription: Corporate Site for Launchcode Software Studios\nlicense: Copyright Launchcode Software Studios\nlicenseLink: \"\"\nsitelink: http:\/\/www.launchcode5.com\/\nsourceLink: https:\/\/github.com\/Launchcode5\/launchcode5.com\ntags:\n- bootstrap\nthumbnail: \/img\/launchcode-tn.jpg\ntitle: Launchcode Software Studios\n---\n\n"}
{"Path":".\/showcase\/lk4d4.darth.io.md","Content":"---\ndate: 2014-08-25T18:59:30-04:00\ndescription: Alexandr Morozov\nlicense: \"\"\nlicenseLink: \"\"\nsitelink: http:\/\/lk4d4.darth.io\/\nsourceLink: https:\/\/github.com\/LK4D4\/lk4d4.darth.io\ntags:\n- personal\n- blog\nthumbnail: \/img\/lk4d4-tn.jpg\ntitle: lk4d4.darth.io\n---\n\n"}
{"Path":".\/showcase\/michaelwhatcott.md","Content":"---\ndate: 2014-08-26T11:47:11-04:00\ndescription: \"\"\nlicense: Simpl-2.0\nlicenseLink: \"\"\nsitelink: http:\/\/michaelwhatcott.com\/\nsourceLink: https:\/\/bitbucket.org\/mdwhatcott\/michaelwhatcott.com-boilerplate\/src\ntags:\n- personal\n- blog\nthumbnail: \/img\/michaelwhatcott-tn.jpg\ntitle: michaelwhatcott\n---\n\n"}
{"Path":".\/showcase\/minodisk.md","Content":"---\ndate: 2014-08-26T09:07:59-04:00\ndescription: \"\"\nlicense: \"\"\nlicenseLink: \"\"\nsitelink: http:\/\/dsk.mn\/\nsourceLink: https:\/\/github.com\/minodisk\/blog\ntags:\n- personal\n- blog\nthumbnail: \/img\/minodisk-tn.jpg\ntitle: minodisk\n---\n\n"}
{"Path":".\/showcase\/nickoneill.md","Content":"---\ndate: 2014-08-26T12:15:48-04:00\ndescription: \"\"\nlicense: \"\"\nlicenseLink: \"\"\nsitelink: http:\/\/blog.nickoneill.name\/\nsourceLink: https:\/\/github.com\/nickoneill\/blog.nickoneill.name\ntags:\n- personal\n- blog\nthumbnail: \/img\/nickoneill-tn.jpg\ntitle: authenticgeek\n---\n\n"}
{"Path":".\/showcase\/ninya.io.md","Content":"---\ndate: 2014-08-26T09:47:00-04:00\ndescription: \"\"\nlicense: \"\"\nlicenseLink: \"\"\nsitelink: http:\/\/blog.ninya.io\/\nsourceLink: https:\/\/github.com\/ninya-io\/ninya-io.github.io\/tree\/dev\ntags:\n- project\n- blog\nthumbnail: \/img\/ninya-tn.jpg\ntitle: ninya.io\n---\n\n"}
{"Path":".\/showcase\/npf.md","Content":"---\ndate: 2014-08-21T12:21:18-04:00\ndescription: \"\"\nlicense: \"\"\nlicenseLink: \"\"\nsitelink: http:\/\/npf.io\/\nsourceLink: https:\/\/github.com\/natefinch\/npf\ntags:\n- personal\n- blog\nthumbnail: \/img\/npf-tn.jpg\ntitle: npf.io\n---\n\n"}
{"Path":".\/showcase\/peteraba.md","Content":"---\ndate: 2014-08-26T11:30:57-04:00\ndescription: \"\"\nlicense: \"\"\nlicenseLink: \"\"\nsitelink: https:\/\/peteraba.com\/\nsourceLink: https:\/\/github.com\/peteraba\/peteraba.com\ntags:\n- personal\n- blog\nthumbnail: \/img\/peteraba-tn.jpg\ntitle: peteraba\n---\n\n"}
{"Path":".\/showcase\/spf13.md","Content":"---\ndate: 2013-07-01T07:32:00Z\ndescription: The first Hugo powered website.\nlicense: MIT\nlicenseLink: \"\"\nsitelink: http:\/\/spf13.com\/\nsourceLink: https:\/\/github.com\/spf13\/spf13.com\ntags:\n- personal\n- blog\nthumbnail: \/img\/spf13-tn.jpg\ntitle: spf13.com\n---\n\n"}
{"Path":".\/showcase\/stou.md","Content":"---\ndate: 2014-11-23T01:28:16+07:00\ndescription: \"Rasmus Stougaard\"\nlicense: \"\"\nlicenseLink: \"\"\nsitelink: http:\/\/stou.dk\/\nsourceLink: \"https:\/\/github.com\/stou\/stou.github.io\"\ntags:\n- personal\n- blog\nthumbnail: \/img\/stou-tn.png\ntitle: stou.dk\n---\n\n"}
{"Path":".\/showcase\/techmadeplain.md","Content":"---\ndate: 2014-05-22T19:54:00Z\ndescription: Tech Coaching site\nlicense: \"\"\nlicenseLink: \"\"\nsitelink: http:\/\/techmadeplain.com\/\ntags:\n- personal\n- blog\nthumbnail: \/img\/techmadeplain-tn.jpg\ntitle: Tech Made Plain\n---\n\n"}
{"Path":".\/showcase\/tendermint.md","Content":"---\ndate: 2014-08-26T09:34:42-04:00\ndescription: \"\"\nlicense: \"\"\nlicenseLink: \"\"\nsitelink: http:\/\/tendermint.com\/\nsourceLink: https:\/\/github.com\/tendermint\/tendermint.github.io\ntags:\n- project\nthumbnail: \/img\/tendermint-tn.jpg\ntitle: tendermint\n---\n\n"}
{"Path":".\/showcase\/thehome.md","Content":"---\ndate: 2014-12-27T20:00:00+07:00\ndescription: \"Tom Helmer Hansen\"\nlicense: \"\"\nlicenseLink: \"\"\nsitelink: http:\/\/www.thehome.dk\/\nsourceLink: \"https:\/\/github.com\/tomhelmer\/website-source\"\ntags:\n- personal\n- blog\nthumbnail: \/img\/thehome.png\ntitle: thehome.dk\n---\n\n"}
{"Path":".\/showcase\/ucsb.md","Content":"---\ndate: 2014-08-26T14:12:55-04:00\ndescription: \"\"\nlicense: \"\"\nlicenseLink: \"\"\nsitelink: http:\/\/philosophy.ucsb.edu\/\nsourceLink: https:\/\/github.com\/ucsbphil\/philweb\ntags:\n- education\nthumbnail: \/img\/ucsb-tn.jpg\ntitle: ucsb\n---\n\n"}
{"Path":".\/showcase\/vurt.co.md","Content":"---\ndate: 2014-08-26T12:09:39-04:00\ndescription: \"\"\nlicense: \"\"\nlicenseLink: \"\"\nsitelink: http:\/\/vurt.co.uk\/\nsourceLink: https:\/\/github.com\/gilesp\/vurtcouk\ntags:\n- personal\n- blog\nthumbnail: \/img\/vurt.co-tn.jpg\ntitle: vurt.co.uk\n---\n\n"}
{"Path":".\/showcase\/yslow-rules.md","Content":"---\ndate: 2014-04-07T10:45:00Z\ndescription: Community project of YSlow rules translations\nlicense: MIT License\nlicenseLink: https:\/\/raw.github.com\/checkmyws\/yslow-rules\/master\/LICENSE\nsitelink: http:\/\/checkmyws.github.io\/yslow-rules\/\nsourceLink: https:\/\/github.com\/checkmyws\/yslow-rules\ntags:\n- community\n- documentation\n- translation\nthumbnail: \/img\/yslow-rules.png\ntitle: YSlow Rules\n---\n\n"}
{"Path":".\/taxonomies\/displaying.md","Content":"---\naliases:\n- \/indexes\/displaying\/\ndate: 2013-07-01\nlinktitle: Displaying\nmenu:\n  main:\n    parent: taxonomy\nnext: \/taxonomies\/templates\nprev: \/taxonomies\/usage\ntitle: Displaying Taxonomies\nweight: 20\n---\n\nThere are four common ways you can display the data in your\ntaxonomies in addition to the automatic taxonomy pages created by hugo\nusing the [list templates](\/templates\/list\/):\n\n1. For a given piece of content, you can list the terms attached\n2. For a given piece of content, you can list other content with the same\n   term\n3. You can list all terms for a taxonomy\n4. You can list all taxonomies (with their terms)\n\n## 1. Displaying taxonomy terms assigned to this content\n\nWithin your content templates, you may wish to display\nthe taxonomies that that piece of content is assigned to.\n\nBecause we are leveraging the front matter system to\ndefine taxonomies for content, the taxonomies assigned to\neach content piece are located in the usual place\n(.Params.`plural`).\n\n### Example\n\n    <ul id=\"tags\">\n       range .Params.tags \n        <li><a href=\"tags\/ . | urlize \"> . <\/a> <\/li>\n       end \n    <\/ul>\n\n## 2. Listing content with the same taxonomy term\n\nFirst, you may be asking why you would use this. If you are using a\ntaxonomy for something like a series of posts, this is exactly how you\nwould do it. It\u2019s also an quick and dirty way to show some related\ncontent.\n\n\n### Example\n\n    <ul>\n       range .Site.Taxonomies.series.golang \n        <li><a href=\" .Url \"> .Name <\/a><\/li>\n       end \n    <\/ul>\n\n## 3. Listing all content in a given taxonomy\n\nThis would be very useful in a sidebar as \u201cfeatured content\u201d. You could\neven have different sections of \u201cfeatured content\u201d by assigning\ndifferent terms to the content.\n\n### Example\n\n    <section id=\"menu\">\n        <ul>\n             range $key, $taxonomy := .Site.Taxonomies.featured \n            <li>  $key  <\/li>\n            <ul>\n                 range $taxonomy.Pages \n                <li hugo-nav=\" .RelPermalink\"><a href=\" .Permalink\">  .LinkTitle  <\/a> <\/li>\n                 end \n            <\/ul>\n             end \n        <\/ul>\n    <\/section>\n\n\n## 4. Rendering a Site's Taxonomies\n\nIf you wish to display the list of all keys for a taxonomy, you can find retrieve\nthem from the `.Site` variable which is available on every page.\n\nThis may take the form of a tag cloud, a menu or simply a list.\n\nThe following example displays all tag keys:\n\n### Example\n\n    <ul id=\"all-tags\">\n       range $name, $taxonomy := .Site.Taxonomies.tags \n        <li><a href=\"\/tags\/ $name | urlize \"> $name <\/a><\/li>\n       end \n    <\/ul>\n\n### Complete Example\nThis example will list all taxonomies, each of their keys and all the content assigned to each key.\n\n    <section>\n      <ul>\n         range $taxonomyname, $taxonomy := .Site.Taxonomies \n          <li><a href=\"\/ $taxonomyname | urlize \"> $taxonomyname <\/a>\n            <ul>\n               range $key, $value := $taxonomy \n              <li>  $key  <\/li>\n                    <ul>\n                     range $value.Pages \n                        <li hugo-nav=\" .RelPermalink\"><a href=\" .Permalink\">  .LinkTitle  <\/a> <\/li>\n                     end \n                    <\/ul>\n               end \n            <\/ul>\n          <\/li>\n         end \n      <\/ul>\n    <\/section>\n\n"}
{"Path":".\/taxonomies\/methods.md","Content":"---\ndate: 2014-05-26\nlinktitle: Structure & Methods\nmenu:\n  main:\n    parent: taxonomy\nnext: \/extras\/aliases\nprev: \/taxonomies\/ordering\ntitle: Using Taxonomies\nweight: 75\n---\n\nHugo makes a set of values and methods available on the various Taxonomy structures.\n\n## Taxonomy Methods\n\nA Taxonomy is a `map[string]WeightedPages`.\n\n**.Get(term)** Returns the WeightedPages for a term. <br>\n**.Count(term)** The number of pieces of content assigned to this term.<br>\n**.Alphabetical** Returns an OrderedTaxonomy (slice) ordered by Term. <br>\n**.ByCount** Returns an OrderedTaxonomy (slice) ordered by number of entries. <br>\n\n## OrderedTaxonomy\n\nSince Maps are unordered, an OrderedTaxonomy is a special structure that has a defined order.\n\n    []struct {\n        Name          string\n        WeightedPages WeightedPages\n    }\n\nEach element of the slice has:\n\n**.Term**  The Term used.<br>\n**.WeightedPages**  A slice of Weighted Pages.<br>\n**.Count** The number of pieces of content assigned to this term.<br>\n**.Pages**  All Pages assigned to this term. All [list methods](\/templates\/list\/) are available to this.<br>\n\n## WeightedPages\n\nWeightedPages is simply a slice of WeightedPage.\n\n    type WeightedPages []WeightedPage\n\n**.Count(term)** The number of pieces of content assigned to this term.<br>\n**.Pages** Returns a slice of pages, which then can be ordered using any of the [list methods](\/templates\/list\/). <br>\n\n\n\n\n\n\n\n"}
{"Path":".\/taxonomies\/ordering.md","Content":"---\naliases:\n- \/indexes\/ordering\/\ndate: 2013-07-01\nlinktitle: Ordering\nmenu:\n  main:\n    identifier: Ordering Taxonomies\n    parent: taxonomy\nnext: \/taxonomies\/methods\nprev: \/taxonomies\/templates\ntitle: Ordering Taxonomies\nweight: 60\n---\n\nHugo provides the ability to both:\n\n 1. Order the way the keys for a taxonomy are displayed\n 2. Order the way taxonomyed content appears\n\n\n## Ordering Taxonomies\nTaxonomies can be ordered by either alphabetical key or by the number of content pieces assigned to that key.\n\n### Order Alphabetically Example:\n\n    <ul>\n     $data := .Data \n     range $key, $value := .Data.Taxonomy.Alphabetical \n    <li><a href=\" $data.Plural \/ $value.Name | urlize \">  $value.Name  <\/a>  $value.Count  <\/li>\n     end \n    <\/ul>\n\n### Order by Popularity Example:\n\n    <ul>\n     $data := .Data \n     range $key, $value := .Data.Taxonomy.ByCount \n    <li><a href=\" $data.Plural \/ $value.Name | urlize \">  $value.Name  <\/a>  $value.Count  <\/li>\n     end \n    <\/ul>\n\n\n[See Also Taxonomy Lists](\/taxonomies\/lists\/)\n\n## Ordering Content within Taxonomies\n\nHugo uses both **Date** and **Weight** to order content within taxonomies.\n\nEach piece of content in Hugo can optionally be assigned a date.\nIt can also be assigned a weight for each taxonomy it is assigned to.\n\nWhen iterating over content within taxonomies the default sort is first by weight then by date. This means that if the weights for two pieces of content are the same, than the more recent content will be displayed first. The default weight for any piece of content is 0.\n\n### Assigning Weight\n\nContent can be assigned weight for each taxonomy that it's assigned to.\n\n    +++\n    tags = [ \"a\", \"b\", \"c\" ]\n    tags_weight = 22\n    categories = [\"d\"]\n    title = \"foo\"\n    categories_weight = 44\n    +++\n    Front Matter with weighted tags and categories\n\n\nThe convention is `taxonomyname_weight`.\n\nIn the above example, this piece of content has a weight of 22 which applies to the sorting when rendering the pages assigned to the \"a\", \"b\" and \"c\" values of the 'tag' taxonomy.\n\nIt has also been assigned the weight of 44 when rendering the 'd' category.\n\nWith this the same piece of content can appear in different positions in different taxonomies.\n\nCurrently taxonomies only support the default ordering of content which is weight -> date.\n"}
{"Path":".\/taxonomies\/overview.md","Content":"---\naliases:\n- \/indexes\/overview\/\n- \/doc\/indexes\/\n- \/extras\/indexes\ndate: 2013-07-01\nlinktitle: Overview\nmenu:\n  main:\n    identifier: taxonomy overview\n    parent: taxonomy\nnext: \/taxonomies\/usage\nprev: \/templates\/404\ntitle: Taxonomy Overview\nweight: 10\n---\n\nHugo includes support for user-defined groupings of content called\ntaxonomies.[^1] Taxonomies give us a way to classify our content so we can\ndemonstrate relationships in a variety of logical ways.\n\n[^1]: Taxonomies were called *indexes* in Hugo prior to v0.11.\n\nThe default taxonomies for Hugo are *tags* and *categories*. These\ntaxonomies are common to many website systems (e.g. WordPress, Drupal,\nJekyll). Unlike all of those systems, Hugo makes it trivial to customize\nthe taxonomies you will be using for your site however you wish. Another\ngood use for taxonomies is to group a set of posts into a series. Other\ncommon uses would include *categories*, *tags*, *groups*, *series* and many\nmore.\n\nWhen taxonomies are used (and templates are provided), Hugo will\nautomatically create pages listing all of the taxonomies, their terms\nand all of the content attached to those terms.\n\n## Definitions\n\n**Taxonomy:** A categorization that can be used to classify content\n\n**Term:** A key within that taxonomy \n\n**Value:** A piece of content assigned to that Term\n\n## Example\n\nFor example, if I was writing about movies, I may want the following\ntaxonomies:\n\n* Actors\n* Directors\n* Studios\n* Genre\n* Year\n* Awards\n\nI would then specify in each movie\u2019s front-matter the specific terms for\neach of those taxonomies. Hugo would then automatically create pages for\neach Actor, Director, Studio, Genre, Year and Award listing all of the\nMovies that matched that specific Actor, Director, etc.\n\n\n### Taxonomy Organization\n\nLet\u2019s use an example to demonstrate the different labels in action.\nFrom the perspective of the taxonomy, it could be visualized as:\n\n    Actor                    <- Taxonomy\n        Bruce Willis         <- Term\n            The Six Sense    <- Content\n            Unbreakable      <- Content\n            Moonrise Kingdom <- Content\n        Samuel L. Jackson    <- Term\n            Unbreakable      <- Content\n            The Avengers     <- Content\n            xXx              <- Content\n\nFrom the perspective of the content, it would appear differently, though\nthe data and labels used are the same:\n\n    Unbreakable                 <- Content\n        Actors                  <- Taxonomy\n            Bruce Willis        <- Term\n            Samuel L. Jackson   <- Term\n        Director                <- Taxonomy\n            M. Night Shyamalan  <- Term\n        ...\n    Moonrise Kingdom            <- Content\n        Actors                  <- Taxonomy\n            Bruce Willis        <- Term\n            Bill Murray         <- Term\n        Director                <- Taxonomy\n            Wes Anderson        <- Term\n        ...\n\n"}
{"Path":".\/taxonomies\/templates.md","Content":"---\naliases:\n- \/indexes\/templates\/\ndate: 2013-07-01\nlinktitle: Templates\nmenu:\n  main:\n    parent: taxonomy\nnext: \/taxonomies\/ordering\nprev: \/templates\/displaying\ntitle: Taxonomy Templates\nweight: 30\n---\n\nThere are two different templates that the use of taxonomies will require you to provide.\n\nBoth templates are covered in detail in the templates section.\n\nA [list template](\/templates\/list\/) is any template that will be used to render multiple pieces of\ncontent in a single html page. This template will be used to generate\nall the automatically created taxonomy pages.\n\nA [taxonomy terms template](\/templates\/terms\/) is a template used to\ngenerate the list of terms for a given template.\n\n"}
{"Path":".\/taxonomies\/usage.md","Content":"---\ndate: 2014-05-26\nlinktitle: Usage\nmenu:\n  main:\n    parent: taxonomy\nnext: \/taxonomies\/displaying\nprev: \/taxonomies\/overview\ntitle: Using Taxonomies\nweight: 15\n---\n\n## Defining taxonomies for a site\n\nTaxonomies must be defined in the site configuration before they can be\nused throughout the site. You need to provide both the plural and\nsingular labels for each taxonomy.\n\nHere is an example configuration in TOML and YAML\nthat specifies three taxonomies (the default two, plus `series`).\n\nNotice the format is <code><strong>singular key<\/strong> = &quot;<em>plural value<\/em>&quot;<\/code> for TOML,\nor <code><strong>singular key<\/strong>: &quot;<em>plural value<\/em>&quot;<\/code> for YAML:\n\n<table class=\"table\">\n<thead>\n<tr>\n<th>config.toml excerpt:<\/th><th>config.yaml excerpt:<\/th>\n<\/tr>\n<\/thead>\n<tbody>\n<tr valign=\"top\">\n<td><pre><code>[taxonomies]\n  tag = \"tags\"\n  category = \"categories\"\n  series = \"series\"\n<\/code><\/pre><\/td>\n<td><pre><code class=\"language-yaml\">taxonomies:\n  tag: \"tags\"\n  category: \"categories\"\n  series: \"series\"\n<\/code><\/pre><\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n\n## Assigning taxonomy values to content\n\nOnce an taxonomy is defined at the site level, any piece of content\ncan be assigned to it regardless of content type or section.\n\nAssigning content to an taxonomy is done in the front matter.\nSimply create a variable with the *plural* name of the taxonomy\nand assign all terms you want to apply to this content.\n\n**taxonomy values are case insensitive**\n\n### Front Matter Example (in TOML)\n\n    +++\n    title = \"Hugo: A fast and flexible static site generator\"\n    tags = [ \"Development\", \"Go\", \"fast\", \"Blogging\" ]\n    categories = [ \"Development\" ]\n    series = [ \"Go Web Dev\" ]\n    slug = \"hugo\"\n    project_url = \"https:\/\/github.com\/spf13\/hugo\"\n    +++\n\n### Front Matter Example (in JSON)\n\n    {\n        \"title\": \"Hugo: A fast and flexible static site generator\",\n        \"tags\": [\n            \"Development\",\n            \"Go\",\n            \"fast\",\n            \"Blogging\"\n        ],\n        \"categories\" : [\n            \"Development\"\n        ],\n        \"series\" : [\n            \"Go Web Dev\"\n        ],\n        \"slug\": \"hugo\",\n        \"project_url\": \"https:\/\/github.com\/spf13\/hugo\"\n    }\n"}
{"Path":".\/templates\/404.md","Content":"---\naliases:\n- \/layout\/404\/\ndate: 2013-08-21\nlinktitle: \"Custom 404 page\"\nmenu:\n  main:\n    parent: layout\nnext: \/taxonomies\/overview\nnotoc: true\nprev: \/templates\/sitemap\ntitle: 404.html Templates\nweight: 100\n---\n\nWhen using Hugo with [GitHub Pages](http:\/\/pages.github.com\/), you can provide\nyour own template for a [custom 404 error page](https:\/\/help.github.com\/articles\/custom-404-pages\/) by creating a 404.html file in the root.\n\n404 pages are of the type \"node\" and have all the [node\nvariables](\/layout\/variables\/) available to use in the templates.\n\nIn addition to the standard node variables, the 404 page has access to\nall site content accessible from `.Data.Pages`.\n\n    \u25be layouts\/\n        404.html\n\n## 404.html\n\nThis is a basic example of a 404.html template:\n\n     partial \"header.html\" . \n     partial \"subheader.html\" . \n\n    <section id=\"main\">\n      <div>\n       <h1 id=\"title\"> .Title <\/h1>\n      <\/div>\n    <\/section>\n\n     partial \"footer.html\" . \n\n"}
{"Path":".\/templates\/content.md","Content":"---\naliases:\n- \/layout\/content\/\ndate: 2013-07-01\nlinktitle: Single Content\nmenu:\n  main:\n    parent: layout\nnext: \/templates\/list\nprev: \/templates\/variables\ntitle: Single Content Template\nweight: 30\n---\n\nThe primary view of content in Hugo is the single view. Hugo, for every\nMarkdown file provided, will render it with a single template.\n\n\n## Which Template will be rendered?\nHugo uses a set of rules to figure out which template to use when\nrendering a specific page.\n\nHugo will use the following prioritized list. If a file isn\u2019t present,\nthen the next one in the list will be used. This enables you to craft\nspecific layouts when you want to without creating more templates\nthan necessary. For most sites, only the `_default` file at the end of\nthe list will be needed.\n\nUsers can specify the `type` and `layout` in the [front-matter](\/content\/front-matter\/). `Section`\nis determined based on the content file\u2019s location. If `type` is provide,\nit will be used instead of `section`.\n\n### Single\n\n* \/layouts\/`TYPE`-or-`SECTION`\/`LAYOUT`.html\n* \/layouts\/`TYPE`-or-`SECTION`\/single.html\n* \/layouts\/\\_default\/single.html\n* \/themes\/`THEME`\/layouts\/`TYPE`-or-`SECTION`\/`LAYOUT`.html\n* \/themes\/`THEME`\/layouts\/`TYPE`-or-`SECTION`\/single.html\n* \/themes\/`THEME`\/layouts\/\\_default\/single.html\n\n## Example Single Template File\n\nContent pages are of the type \"page\" and have all the [page\nvariables](\/layout\/variables\/) and [site\nvariables](\/templates\/variables\/) available to use in the templates.\n\nIn the following examples we have created two different content types as well as\na default content type.\n\nThe default content template to be used in the event that a specific\ntemplate has not been provided for that type. The default type works the\nsame as the other types, but the directory must be called \"\\_default\".\n\n    \u25be layouts\/\n      \u25be _default\/\n          single.html\n      \u25be post\/\n          single.html\n      \u25be project\/\n          single.html\n\n\n## post\/single.html\nThis content template is used for [spf13.com](http:\/\/spf13.com\/).\nIt makes use of [partial templates](\/layout\/partials\/)\n\n     partial \"header.html\" . \n     partial \"subheader.html\" . \n     $baseurl := .Site.BaseUrl \n\n    <section id=\"main\">\n      <h1 id=\"title\"> .Title <\/h1>\n      <div>\n            <article id=\"content\">\n                .Content \n            <\/article>\n      <\/div>\n    <\/section>\n\n    <aside id=\"meta\">\n        <div>\n        <section>\n          <h4 id=\"date\">  .Date.Format \"Mon Jan 2, 2006\"  <\/h4>\n          <h5 id=\"wc\">  .FuzzyWordCount  Words <\/h5>\n        <\/section>\n        <ul id=\"categories\">\n           range .Params.topics \n            <li><a href=\" $baseurl \/topics\/ . | urlize \"> . <\/a> <\/li>\n           end \n        <\/ul>\n        <ul id=\"tags\">\n           range .Params.tags \n            <li> <a href=\" $baseurl \/tags\/ . | urlize \"> . <\/a> <\/li>\n           end \n        <\/ul>\n        <\/div>\n        <div>\n             if .Prev \n              <a class=\"previous\" href=\".Prev.Permalink\"> .Prev.Title<\/a>\n             end \n             if .Next \n              <a class=\"next\" href=\".Next.Permalink\"> .Next.Title<\/a>\n             end \n        <\/div>\n    <\/aside>\n\n     partial \"disqus.html\" . \n     partial \"footer.html\" . \n\n\n## project\/single.html\nThis content template is used for [spf13.com](http:\/\/spf13.com\/).\nIt makes use of [partial templates](\/layout\/partials\/)\n\n\n     partial \"header.html\" . \n     partial \"subheader.html\" . \n     $baseurl := .Site.BaseUrl \n\n    <section id=\"main\">\n      <h1 id=\"title\"> .Title <\/h1>\n      <div>\n            <article id=\"content\">\n                .Content \n            <\/article>\n      <\/div>\n    <\/section>\n\n    <aside id=\"meta\">\n        <div>\n        <section>\n          <h4 id=\"date\">  .Date.Format \"Mon Jan 2, 2006\"  <\/h4>\n          <h5 id=\"wc\">  .FuzzyWordCount  Words <\/h5>\n        <\/section>\n        <ul id=\"categories\">\n           range .Params.topics \n          <li><a href=\" $baseurl \/topics\/ . | urlize \"> . <\/a> <\/li>\n           end \n        <\/ul>\n        <ul id=\"tags\">\n           range .Params.tags \n            <li> <a href=\" $baseurl \/tags\/ . | urlize \"> . <\/a> <\/li>\n           end \n        <\/ul>\n        <\/div>\n    <\/aside>\n\n    if isset .Params \"project_url\" \n    <div id=\"ribbon\">\n        <a href=\" index .Params \"project_url\" \" rel=\"me\">Fork me on GitHub<\/a>\n    <\/div>\n     end \n\n     partial \"footer.html\" . \n\nNotice how the project\/single.html template uses an additional parameter unique\nto this template. This doesn't need to be defined ahead of time. If the key is\npresent in the front matter than it can be used in the template. To\neasily generate new content of this type with these keys ready use\n[content archetypes](\/content\/archetypes\/).\n"}
{"Path":".\/templates\/functions.md","Content":"---\naliases:\n- \/layout\/functions\/\ndate: 2013-07-01\nlinktitle: Functions\nmenu:\n  main:\n    parent: layout\nnext: \/templates\/variables\nprev: \/templates\/go-templates\ntitle: Hugo Template Functions\nweight: 20\n---\n\nHugo uses the excellent Go html\/template library for its template engine.\nIt is an extremely lightweight engine that provides a very small amount of\nlogic. In our experience, it is just the right amount of logic to be able\nto create a good static website.\n\nGo templates are lightweight but extensible. Hugo has added the following\nfunctions to the basic template logic.\n\n(Go itself supplies built-in functions, including comparison operators\nand other basic tools; these are listed in the\n[Go template documentation](http:\/\/golang.org\/pkg\/text\/template\/#hdr-Functions).)\n\n## General\n\n### isset\nReturn true if the parameter is set.\nTakes either a slice, array or channel and an index or a map and a key as input.\n\ne.g. ` if isset .Params \"project_url\"   index .Params \"project_url\"  end `\n\n### echoParam\nIf parameter is set, then echo it.\n\ne.g. `echoParam .Params \"project_url\" `\n\n### eq\nReturn true if the parameters are equal.\n\ne.g.\n\n     if eq .Section \"blog\" current end \n\n### first\nSlices an array to only the first X elements.\n\nWorks on [lists](\/templates\/list\/), [taxonomies](\/taxonomies\/displaying\/), [terms](\/templates\/terms\/), [groups](\/templates\/list\/)\n\ne.g.\n\n     range first 10 .Data.Pages \n         .Render \"summary\" \n     end \n\n### where\nFilters an array to only elements containing a matching value for a given field.\n\nWorks on [lists](\/templates\/list\/), [taxonomies](\/taxonomies\/displaying\/), [terms](\/templates\/terms\/), [groups](\/templates\/list\/)\n\ne.g.\n\n     range where .Data.Pages \"Section\" \"post\" \n        .Content \n     end \n\nIt can be used with dot chaining second argument to refer a nested element of a value.\n\ne.g.\n\n    \/\/ Front matter on some pages\n    +++\n    series: golang\n    +++\n\n     range where .Site.Recent \"Params.series\" \"golang\" \n        .Content \n     end \n\nIt can also be used with an operator like `!=`, `>=`, `in` etc. Without an operator (like above), `where` compares a given field with a matching value in a way like `=` is specified.\n\ne.g.\n\n     range where .Data.Pages \"Section\" \"!=\" \"post\" \n        .Content \n     end \n\nFollowing operators are now available\n\n- `=`, `==`, `eq`: True if a given field value equals a matching value\n- `!=`, `<>`, `ne`: True if a given field value doesn't equal a matching value\n- `>=`, `ge`: True if a given field value is greater than or equal to a matching value\n- `>`, `gt`: True if a given field value is greater than a matching value\n- `<=`, `le`: True if a given field value is lesser than or equal to a matching value\n- `<`, `lt`: True if a given field value is lesser than a matching value\n- `in`: True if a given field value is included in a matching value. A matching value must be an array or a slice\n- `not in`: True if a given field value isn't included in a matching value. A matching value must be an array or a slice\n\n*`where` and `first` can be stacked, e.g.:*\n\n     range first 5 (where .Data.Pages \"Section\" \"post\") \n        .Content \n     end \n\n### delimit\nLoops through any array, slice or map and returns a string of all the values separated by the delimiter. There is an optional third parameter that lets you choose a different delimiter to go between the last two values.\nMaps will be sorted by the keys, and only a slice of the values will be returned, keeping a consistent output order.\n\nWorks on [lists](\/templates\/list\/), [taxonomies](\/taxonomies\/displaying\/), [terms](\/templates\/terms\/), [groups](\/templates\/list\/)\n\ne.g.\n\n    \/\/ Front matter\n    +++\n    tags: [ \"tag1\", \"tag2\", \"tag3\" ]\n    +++\n\n    \/\/ Used anywhere in a template\n    Tags:  delimit .Params.tags \", \" \n\n    \/\/ Outputs Tags: tag1, tag2, tag3\n\n    \/\/ Example with the optional \"last\" parameter\n    Tags:  delimit .Params.tags \", \" \" and \" \n\n    \/\/ Outputs Tags: tag1, tag2 and tag3\n\n### sort\nSorts maps, arrays and slices, returning a sorted slice. A sorted array of map values will be returned, with the keys eliminated. There are two optional arguments, which are `sortByField` and `sortAsc`. If left blank, sort will sort by keys (for maps) in ascending order.\n\nWorks on [lists](\/templates\/list\/), [taxonomies](\/taxonomies\/displaying\/), [terms](\/templates\/terms\/), [groups](\/templates\/list\/)\n\ne.g.\n\n    \/\/ Front matter\n    +++\n    tags: [ \"tag3\", \"tag1\", \"tag2\" ]\n    +++\n\n    \/\/ Site config\n    +++\n    [params.authors]\n      [params.authors.Derek]\n        \"firstName\"  = \"Derek\"\n        \"lastName\"   = \"Perkins\"\n      [params.authors.Joe]\n        \"firstName\"  = \"Joe\"\n        \"lastName\"   = \"Bergevin\"\n      [params.authors.Tanner]\n        \"firstName\"  = \"Tanner\"\n        \"lastName\"   = \"Linsley\"\n    +++\n\n    \/\/ Use default sort options - sort by key \/ ascending\n    Tags:  range sort .Params.tags  .   end \n\n    \/\/ Outputs Tags: tag1 tag2 tag3\n\n    \/\/ Sort by value \/ descending\n    Tags:  range sort .Params.tags \"value\" \"desc\"  .   end \n\n    \/\/ Outputs Tags: tag3 tag2 tag1\n\n    \/\/ Use default sort options - sort by value \/ descending\n    Authors:  range sort .Site.Params.authors  .firstName   end \n\n    \/\/ Outputs Authors: Derek Joe Tanner\n\n    \/\/ Use default sort options - sort by value \/ descending\n    Authors:  range sort .Site.Params.authors \"lastName\" \"desc\"  .lastName   end \n\n    \/\/ Outputs Authors: Perkins Linsley Bergevin\n\n### in\nChecks if an element is in an array (or slice) and returns a boolean.  The elements supported are strings, integers and floats (only float64 will match as expected).  In addition, it can also check if a substring exists in a string.\n\ne.g.\n\n     if in .Params.tags \"Git\" Follow me on GitHub! end \n\nor\n\n     if in \"this string contains a substring\" \"substring\" Substring found! end \n\n### intersect\nGiven two arrays (or slices), this function will return the common elements in the arrays.  The elements supported are strings, integers and floats (only float64).\n\nA useful example of this functionality is a 'similar posts' block.  Create a list of links to posts where any of the tags in the current post match any tags in other posts.\n\ne.g.\n\n    <ul>\n     $page_link := .Permalink \n     $tags := .Params.tags \n     range .Site.Recent \n         $page := . \n         $has_common_tags := intersect $tags .Params.tags | len | lt 0 \n         if and $has_common_tags (ne $page_link $page.Permalink) \n            <li><a href=\" $page.Permalink \"> $page.Title <\/a><\/li>\n         end \n     end \n    <\/ul>\n\n\n## Math\n\n<table class=\"table table-bordered\">\n<thead>\n<tr>\n<th>Function<\/th>\n<th>Description<\/th>\n<th>Example<\/th>\n<\/tr>\n<\/thead>\n\n<tbody>\n<tr>\n<td><code>add<\/code><\/td>\n<td>Adds two integers.<\/td>\n<td><code>add 1 2<\/code> \u2192 3<\/td>\n<\/tr>\n\n<tr>\n<td><code>sub<\/code><\/td>\n<td>Subtracts two integers.<\/td>\n<td><code>sub 3 2<\/code> \u2192 1<\/td>\n<\/tr>\n\n<tr>\n<td><code>mul<\/code><\/td>\n<td>Multiplies two integers.<\/td>\n<td><code>mul 2 3<\/code> \u2192 6<\/td>\n<\/tr>\n\n<tr>\n<td><code>div<\/code><\/td>\n<td>Divides two integers.<\/td>\n<td><code>div 6 3<\/code> \u2192 2<\/td>\n<\/tr>\n\n<tr>\n<td><code>mod<\/code><\/td>\n<td>Modulus of two integers.<\/td>\n<td><code>mod 15 3<\/code> \u2192 0<\/td>\n<\/tr>\n\n<tr>\n<td><code>modBool<\/code><\/td>\n<td>Boolean of modulus of two integers.  <code>true<\/code> if modulus is 0.<\/td>\n<td><code>modBool 15 3<\/code> \u2192 true<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n\n\n## Strings\n\n### urlize\nTakes a string and sanitizes it for usage in URLs, converts spaces to \"-\".\n\ne.g. `<a href=\"\/tags\/ . | urlize \"> . <\/a>`\n\n### safeHtml\nDeclares the provided string as a \"safe\" HTML document fragment\nso Go html\/template will not filter it.  It should not be used\nfor HTML from a third-party, or HTML with unclosed tags or comments.\n\nExample: Given a site-wide `config.toml` that contains this line:\n\n    copyright = \"\u00a9 2015 Jane Doe.  <a href=\\\"http:\/\/creativecommons.org\/licenses\/by\/4.0\/\\\">Some rights reserved<\/a>.\"\n\n` .Site.Copyright | safeHtml ` would then output:\n\n> \u00a9 2015 Jane Doe.  <a href=\"http:\/\/creativecommons.org\/licenses\/by\/4.0\/\">Some rights reserved<\/a>.\n\nHowever, without the `safeHtml` function, html\/template assumes\n`.Site.Copyright` to be unsafe, escaping all HTML tags,\nrendering the whole string as plain-text like this:\n\n<blockquote>\n<p>\u00a9 2015 Jane Doe.  &lt;a href=&#34;http:\/\/creativecommons.org\/licenses\/by\/4.0\/&#34;&gt;Some rights reserved&lt;\/a&gt;.<\/p>\n<\/blockquote>\n\n<!--\n### safeHtmlAttr\nDeclares the provided string as a \"safe\" HTML attribute\nfrom a trusted source, for example, ` dir=\"ltr\"`,\nso Go html\/template will not filter it.\n\nExample: Given a site-wide `config.toml` that contains this menu entry:\n\n    [[menu.main]]\n        name = \"IRC: #golang at freenode\"\n        url = \"irc:\/\/irc.freenode.net\/#golang\"\n\n* `<a href=\" .Url \">` \u21d2 `<a href=\"#ZgotmplZ\">` (Bad!)\n* `<a  printf \"href=%q\" .Url | safeHtmlAttr >` \u21d2 `<a href=\"irc:\/\/irc.freenode.net\/#golang\">` (Good!)\n-->\n\n### safeCss\nDeclares the provided string as a known \"safe\" CSS string\nso Go html\/templates will not filter it.\n\"Safe\" means CSS content that matches any of:\n\n1. The CSS3 stylesheet production, such as `p { color: purple }`.\n2. The CSS3 rule production, such as `a[href=~\"https:\"].foo#bar`.\n3. CSS3 declaration productions, such as `color: red; margin: 2px`.\n4. The CSS3 value production, such as `rgba(0, 0, 255, 127)`.\n\nExample: Given `style = \"color: red;\"` defined in the front matter of your `.md` file:\n\n* `<p style=\" .Params.style | safeCss \">\u2026<\/p>` \u21d2 `<p style=\"color: red;\">\u2026<\/p>` (Good!)\n* `<p style=\" .Params.style \">\u2026<\/p>` \u21d2 `<p style=\"ZgotmplZ\">\u2026<\/p>` (Bad!)\n\nNote: \"ZgotmplZ\" is a special value that indicates that unsafe content reached a\nCSS or URL context.\n\n### safeUrl\nDeclares the provided string as a \"safe\" URL or URL substring (see [RFC 3986][]).\nA URL like `javascript:checkThatFormNotEditedBeforeLeavingPage()` from a trusted\nsource should go in the page, but by default dynamic `javascript:` URLs are\nfiltered out since they are a frequently exploited injection vector.\n\n[RFC 3986]: http:\/\/tools.ietf.org\/html\/rfc3986\n\nWithout `safeUrl`, only the URI schemes `http:`, `https:` and `mailto:`\nare considered safe by Go.  If any other URI schemes, e.g.&nbsp;`irc:` and\n`javascript:`, are detected, the whole URL would be replaced with\n`#ZgotmplZ`.  This is to \"defang\" any potential attack in the URL,\nrendering it useless.\n\nExample: Given a site-wide `config.toml` that contains this menu entry:\n\n    [[menu.main]]\n        name = \"IRC: #golang at freenode\"\n        url = \"irc:\/\/irc.freenode.net\/#golang\"\n\nThe following template:\n\n    <ul class=\"sidebar-menu\">\n       range .Site.Menus.main \n      <li><a href=\" .Url \"> .Name <\/a><\/li>\n       end \n    <\/ul>\n\nwould produce `<li><a href=\"#ZgotmplZ\">IRC: #golang at freenode<\/a><\/li>`\nfor the `irc:\/\/\u2026` URL.\n\nTo fix this, add ` | safeUrl` after `.Url` on the 3rd line, like this:\n\n      <li><a href=\" .Url | safeUrl \"> .Name <\/a><\/li>\n\nWith this change, we finally get `<li><a href=\"irc:\/\/irc.freenode.net\/#golang\">IRC: #golang at freenode<\/a><\/li>`\nas intended.\n\n### markdownify\n\nThis will run the string through the Markdown processesor. The result will be declared as \"safe\" so Go templates will not filter it.\n\ne.g. ` .Title | markdownify `\n\n### lower\nConvert all characters in string to lowercase.\n\ne.g. `lower \"BatMan\"` \u2192 \"batman\"\n\n### upper\nConvert all characters in string to uppercase.\n\ne.g. `upper \"BatMan\"` \u2192 \"BATMAN\"\n\n### title\nConvert all characters in string to titlecase.\n\ne.g. `title \"BatMan\"` \u2192 \"Batman\"\n\n### chomp\nRemoves any trailing newline characters. Useful in a pipeline to remove newlines added by other processing (including `markdownify`).\n\ne.g., `chomp \"<p>Blockhead<\/p>\\n\"` \u2192 `\"<p>Blockhead<\/p>\"`\n\n### trim\nTrim returns a slice of the string with all leading and trailing characters contained in cutset removed.\n\ne.g. ` trim \"++Batman--\" \"+-\" ` \u2192 \"Batman\"\n\n### replace\nReplace all occurences of the search string with the replacement string.\n\ne.g. ` replace \"Batman and Robin\" \"Robin\" \"Catwoman\" ` \u2192 \"Batman and Catwoman\"\n\n### dateFormat\nConverts the textual representation of the datetime into the other form or returns it of Go `time.Time` type value. These are formatted with the layout string.\n\ne.g. ` dateFormat \"Monday, Jan 2, 2006\" \"2015-01-21\" ` \u2192\"Wednesday, Jan 21, 2015\"\n\n### highlight\nTake a string of code and a language, uses Pygments to return the syntax highlighted code in HTML. Used in the [highlight shortcode](\/extras\/highlighting\/).\n\n### ref, relref\nLooks up a content page by relative path or logical name to return the permalink (`ref`) or relative permalink (`relref`). Requires a Node or Page object (usually satisfied with `.`). Used in the [`ref` and `relref` shortcodes](% ref \"extras\/crossreferences.md\" %).\n\ne.g.  ref . \"about.md\" \n\n## Advanced\n\n### apply\n\nGiven a map, array, or slice, returns a new slice with a function applied over it. Expects at least three parameters, depending on the function being applied. The first parameter is the sequence to operate on; the second is the name of the function as a string, which must be in the Hugo function map (generally, it is these functions documented here). After that, the parameters to the applied function are provided, with the string `\".\"` standing in for each element of the sequence the function is to be applied against. An example is in order:\n\n    +++\n    names: [ \"Derek Perkins\", \"Joe Bergevin\", \"Tanner Linsley\" ]\n    +++\n\n     apply .Params.names \"urlize\" \".\"  \u2192 [ \"derek-perkins\", \"joe-bergevin\", \"tanner-linsley\" ]\n\nThis is roughly equivalent to:\n\n     range .Params.names  . | urlize  end \n\nHowever, it isn\u2019t possible to provide the output of a range to the `delimit` function, so you need to `apply` it. A more complete example should explain this. Let's say you have two partials for displaying tag links in a post,  \"post\/tag\/list.html\" and \"post\/tag\/link.html\", as shown below.\n\n    <!-- post\/tag\/list.html -->\n     with .Params.tags \n    <div class=\"tags-list\">\n      Tags:\n       $len := len . \n       if eq $len 1 \n         partial \"post\/tag\/link\" (index . 0) \n       else \n         $last := sub $len 1 \n         range first $last . \n           partial \"post\/tag\/link\" . ,\n         end \n         partial \"post\/tag\/link\" (index . $last) \n       end \n    <\/div>\n     end \n\n\n    <!-- post\/tag\/link.html -->\n    <a class=\"post-tag post-tag- . | urlize \" href=\"\/tags\/ . | urlize \"> . <\/a>\n\nThis works, but the complexity of \"post\/tag\/list.html\" is fairly high; the Hugo template needs to perform special behaviour for the case where there\u2019s only one tag, and it has to treat the last tag as special. Additionally, the tag list will be rendered something like \"Tags: tag1 , tag2 , tag3\" because of the way that the HTML is generated and it is interpreted by a browser.\n\nThis is Hugo. We have a better way. If this were your \"post\/tag\/list.html\" instead, all of those problems are fixed automatically (this first version separates all of the operations for ease of reading; the combined version will be shown after the explanation).\n\n    <!-- post\/tag\/list.html -->\n     with.Params.tags \n    <div class=\"tags-list\">\n      Tags:\n       $sort := sort . \n       $links := apply $sort \"partial\" \"post\/tag\/link\" \".\" \n       $clean := apply $links \"chomp\" \".\" \n       delimit $clean \", \" \n    <\/div>\n     end \n\nIn this version, we are now sorting the tags, converting them to links with \"post\/tag\/link.html\", cleaning off stray newlines, and joining them together in a delimited list for presentation. That can also be written as:\n\n    <!-- post\/tag\/list.html -->\n     with.Params.tags \n    <div class=\"tags-list\">\n      Tags:\n       delimit (apply (apply (sort .) \"partial\" \"post\/tag\/link\" \".\") \"chomp\" \".\") \", \" \n    <\/div>\n     end \n\n`apply` does not work when receiving the sequence as an argument through a pipeline.\n"}
{"Path":".\/templates\/go-templates.md","Content":"---\naliases:\n- \/layout\/go-templates\/\n- \/layouts\/go-templates\/\ndate: 2013-07-01\nmenu:\n  main:\n    parent: layout\nnext: \/templates\/functions\nprev: \/templates\/overview\ntitle: Go Template Primer\nweight: 15\n---\n\nHugo uses the excellent [Go][] [html\/template][gohtmltemplate] library for\nits template engine. It is an extremely lightweight engine that provides a very\nsmall amount of logic. In our experience it is just the right amount of\nlogic to be able to create a good static website. If you have used other\ntemplate systems from different languages or frameworks, you will find a lot of\nsimilarities in Go templates.\n\nThis document is a brief primer on using Go templates. The [Go docs][gohtmltemplate]\ngo into more depth and cover features that aren't mentioned here.\n\n## Introduction to Go Templates\n\nGo templates provide an extremely simple template language. It adheres to the\nbelief that only the most basic of logic belongs in the template or view layer.\nOne consequence of this simplicity is that Go templates parse very quickly.\n\nA unique characteristic of Go templates is they are content aware. Variables and\ncontent will be sanitized depending on the context of where they are used. More\ndetails can be found in the [Go docs][gohtmltemplate].\n\n## Basic Syntax\n\nGo lang templates are HTML files with the addition of variables and\nfunctions.\n\n**Go variables and functions are accessible within  **\n\nAccessing a predefined variable \"foo\":\n\n     foo \n\n**Parameters are separated using spaces**\n\nCalling the `add` function with input of 1, 2:\n\n     add 1 2 \n\n**Methods and fields are accessed via dot notation**\n\nAccessing the Page Parameter \"bar\"\n\n     .Params.bar \n\n**Parentheses can be used to group items together**\n\n     if or (isset .Params \"alt\") (isset .Params \"caption\")  Caption  end \n\n\n## Variables\n\nEach Go template has a struct (object) made available to it. In Hugo, each\ntemplate is passed either a page or a node struct depending on which type of\npage you are rendering. More details are available on the\n[variables](\/layout\/variables\/) page.\n\nA variable is accessed by referencing the variable name.\n\n    <title> .Title <\/title>\n\nVariables can also be defined and referenced.\n\n     $address := \"123 Main St.\"\n     $address \n\n\n## Functions\n\nGo template ships with a few functions which provide basic functionality. The Go\ntemplate system also provides a mechanism for applications to extend the\navailable functions with their own. [Hugo template\nfunctions](\/layout\/functions\/) provide some additional functionality we believe\nare useful for building websites. Functions are called by using their name\nfollowed by the required parameters separated by spaces. Template\nfunctions cannot be added without recompiling Hugo.\n\n**Example 1: Adding numbers**\n\n     add 1 2 \n\n**Example 2: Comparing numbers**\n\n     lt 1 2 \n\n(There are more boolean operators, detailed in the\n[template documentation](http:\/\/golang.org\/pkg\/text\/template\/#hdr-Functions).)\n\n## Includes\n\nWhen including another template, you will pass to it the data it will be\nable to access. To pass along the current context, please remember to\ninclude a trailing dot. The templates location will always be starting at\nthe \/layout\/ directory within Hugo.\n\n**Example:**\n\n     template \"partials\/header.html\" . \n\nAnd, starting with Hugo v0.12, you may also use the `partial` call\nfor [partial templates](\/templates\/partials\/):\n\n     partial \"header.html\" . \n\n\n## Logic\n\nGo templates provide the most basic iteration and conditional logic.\n\n### Iteration\n\nJust like in Go, the Go templates make heavy use of `range` to iterate over\na map, array or slice. The following are different examples of how to use\nrange.\n\n**Example 1: Using Context**\n\n     range array \n         . \n     end \n\n**Example 2: Declaring value variable name**\n\n    range $element := array\n         $element \n     end \n\n**Example 2: Declaring key and value variable name**\n\n    range $index, $element := array\n         $index \n         $element \n     end \n\n### Conditionals\n\n`if`, `else`, `with`, `or` & `and` provide the framework for handling conditional\nlogic in Go Templates. Like `range`, each statement is closed with `end`.\n\nGo Templates treat the following values as false:\n\n* false\n* 0\n* any array, slice, map, or string of length zero\n\n**Example 1: `if`**\n\n     if isset .Params \"title\" <h4> index .Params \"title\" <\/h4> end \n\n**Example 2: `if` \u2026 `else`**\n\n     if isset .Params \"alt\" \n         index .Params \"alt\" \n    else\n         index .Params \"caption\" \n     end \n\n**Example 3: `and` & `or`**\n\n     if and (or (isset .Params \"title\") (isset .Params \"caption\")) (isset .Params \"attr\")\n\n**Example 4: `with`**\n\nAn alternative way of writing \"`if`\" and then referencing the same value\nis to use \"`with`\" instead. `with` rebinds the context `.` within its scope,\nand skips the block if the variable is absent.\n\nThe first example above could be simplified as:\n\n     with .Params.title <h4> . <\/h4> end \n\n**Example 5: `if` \u2026 `else if`**\n\n     if isset .Params \"alt\" \n         index .Params \"alt\" \n     else if isset .Params \"caption\" \n         index .Params \"caption\" \n     end \n\n## Pipes\n\nOne of the most powerful components of Go templates is the ability to\nstack actions one after another. This is done by using pipes. Borrowed\nfrom Unix pipes, the concept is simple, each pipeline's output becomes the\ninput of the following pipe.\n\nBecause of the very simple syntax of Go templates, the pipe is essential\nto being able to chain together function calls. One limitation of the\npipes is that they only can work with a single value and that value\nbecomes the last parameter of the next pipeline.\n\nA few simple examples should help convey how to use the pipe.\n\n**Example 1:**\n\n     if eq 1 1  Same  end \n\nis the same as\n\n     eq 1 1 | if  Same  end \n\nIt does look odd to place the `if` at the end, but it does provide a good\nillustration of how to use the pipes.\n\n**Example 2:**\n\n     index .Params \"disqus_url\" | html \n\nAccess the page parameter called \"disqus_url\" and escape the HTML.\n\n**Example 3:**\n\n     if or (or (isset .Params \"title\") (isset .Params \"caption\")) (isset .Params \"attr\")\n    Stuff Here\n     end \n\nCould be rewritten as\n\n      isset .Params \"caption\" | or isset .Params \"title\" | or isset .Params \"attr\" | if \n    Stuff Here\n     end \n\n### Internet Explorer conditional comments using Pipes\n\nBy default, Go Templates remove HTML comments from output. This has the unfortunate side effect of removing Internet Explorer conditional comments. As a workaround, use something like this:\n\n     \"<!--[if lt IE 9]>\" | safeHtml \n      <script src=\"html5shiv.js\"><\/script>\n     \"<![endif]-->\" | safeHtml \n\nAlternatively, use the backtick (`` ` ``) to quote the IE conditional comments, avoiding the tedious task of escaping every double quotes (`\"`) inside, as demonstrated in the [examples](http:\/\/golang.org\/pkg\/text\/template\/#hdr-Examples) in the Go text\/template documentation, e.g.:\n\n```\n `<!--[if lt IE 7]><html class=\"no-js lt-ie9 lt-ie8 lt-ie7\"><![endif]-->` | safeHtml \n```\n\n## Context (a.k.a. the dot)\n\nThe most easily overlooked concept to understand about Go templates is that ` . `\nalways refers to the current context. In the top level of your template, this\nwill be the data set made available to it. Inside of a iteration, however, it will have\nthe value of the current item. When inside of a loop, the context has changed:\n` . ` will no longer refer to the data available to the entire page. If you need\nto\naccess this from within the loop, you will likely want to do one of the following:\n\n1. Set it to a variable instead of depending on the context.  For example:\n\n         $title := .Site.Title \n         range .Params.tags \n          <li>\n            <a href=\" $baseurl \/tags\/ . | urlize \"> . <\/a>\n            -  $title \n          <\/li>\n         end \n\n    Notice how once we have entered the loop the value of ` . ` has changed. We\n    have defined a variable outside of the loop so we have access to it from within\n    the loop.\n\n2. Use `$.` to access the global context from anywhere.\n   Here is an equivalent example:\n\n         range .Params.tags \n          <li>\n            <a href=\" $baseurl \/tags\/ . | urlize \"> . <\/a>\n            -  $.Site.Title \n          <\/li>\n         end \n\n    This is because `$`, a special variable, is set to the starting value\n    of `.` the dot by default,\n    a [documented feature](http:\/\/golang.org\/pkg\/text\/template\/#hdr-Variables)\n    of Go text\/template.  Very handy, eh?\n\n    > However, this little magic would cease to work if someone were to\n    > mischievously redefine `$`, e.g. ` $ := .Site `.\n    > *(No, don't do it!)*\n    > You may, of course, recover from this mischief by using ` $ := . `\n    > in a global context to reset `$` to its default value.\n\n# Hugo Parameters\n\nHugo provides the option of passing values to the template language\nthrough the site configuration (for sitewide values), or through the meta\ndata of each specific piece of content. You can define any values of any\ntype (supported by your front matter\/config format) and use them however\nyou want to inside of your templates.\n\n\n## Using Content (page) Parameters\n\nIn each piece of content, you can provide variables to be used by the\ntemplates. This happens in the [front matter](\/content\/front-matter\/).\n\nAn example of this is used in this documentation site. Most of the pages\nbenefit from having the table of contents provided. Sometimes the TOC just\ndoesn't make a lot of sense. We've defined a variable in our front matter\nof some pages to turn off the TOC from being displayed.\n\nHere is the example front matter:\n\n```\n---\ntitle: \"Permalinks\"\ndate: \"2013-11-18\"\naliases:\n  - \"\/doc\/permalinks\/\"\ngroups: [\"extras\"]\ngroups_weight: 30\nnotoc: true\n---\n```\n\nHere is the corresponding code inside of the template:\n\n       if not .Params.notoc \n        <div id=\"toc\" class=\"well col-md-4 col-sm-6\">\n         .TableOfContents \n        <\/div>\n       end \n\n\n\n## Using Site (config) Parameters\nIn your top-level configuration file (e.g., `config.yaml`) you can define site\nparameters, which are values which will be available to you in partials.\n\nFor instance, you might declare:\n\n```yaml\nparams:\n  CopyrightHTML: \"Copyright &#xA9; 2013 John Doe. All Rights Reserved.\"\n  TwitterUser: \"spf13\"\n  SidebarRecentLimit: 5\n```\n\nWithin a footer layout, you might then declare a `<footer>` which is only\nprovided if the `CopyrightHTML` parameter is provided, and if it is given,\nyou would declare it to be HTML-safe, so that the HTML entity is not escaped\nagain.  This would let you easily update just your top-level config file each\nJanuary 1st, instead of hunting through your templates.\n\n```\nif .Site.Params.CopyrightHTML<footer>\n<div class=\"text-center\">.Site.Params.CopyrightHTML | safeHtml<\/div>\n<\/footer>end\n```\n\nAn alternative way of writing the \"`if`\" and then referencing the same value\nis to use \"`with`\" instead. With rebinds the context `.` within its scope,\nand skips the block if the variable is absent:\n\n```\nwith .Site.Params.TwitterUser<span class=\"twitter\">\n<a href=\"https:\/\/twitter.com\/.\" rel=\"author\">\n<img src=\"\/images\/twitter.png\" width=\"48\" height=\"48\" title=\"Twitter: .\"\n alt=\"Twitter\"><\/a>\n<\/span>end\n```\n\nFinally, if you want to pull \"magic constants\" out of your layouts, you can do\nso, such as in this example:\n\n```\n<nav class=\"recent\">\n  <h1>Recent Posts<\/h1>\n  <ul>range first .Site.Params.SidebarRecentLimit .Site.Recent\n    <li><a href=\".RelPermalink\">.Title<\/a><\/li>\n  end<\/ul>\n<\/nav>\n```\n\n\n[go]: http:\/\/golang.org\/\n[gohtmltemplate]: http:\/\/golang.org\/pkg\/html\/template\/\n\n# Template example: Show only upcoming events\n\nGo allows you to do more than what's shown here.  Using Hugo's\n[`where`](\/templates\/functions\/#toc_4) function and Go built-ins, we can list\nonly the items from `content\/events\/` whose date (set in the front matter) is in\nthe future:\n\n    <h4>Upcoming Events<\/h4>\n    <ul class=\"upcoming-events\">\n     range where .Data.Pages.ByDate \"Section\" \"events\" \n       if ge .Date.Unix .Now.Unix \n        <li><span class=\"event-type\"> .Type | title  \u2014<\/span>\n           .Title \n          on <span class=\"event-date\">\n           .Date.Format \"2 January at 3:04pm\" <\/span>\n          at  .Params.place \n        <\/li>\n       end \n     end \n"}
{"Path":".\/templates\/homepage.md","Content":"---\naliases:\n- \/layout\/homepage\/\ndate: 2013-07-01\nmenu:\n  main:\n    parent: layout\nnext: \/templates\/terms\nnotoc: true\nprev: \/templates\/list\ntitle: Homepage\nweight: 50\n---\n\nThe home page of a website is often formatted differently than the other\npages. In Hugo you can define your own homepage template. \n\nHomepage is of the type \"node\" and have all the [node\nvariables](\/templates\/variables\/) and [site\nvariables](\/templates\/variables\/) available to use in the templates.\n\n*This is the only required template for building a site and useful when\nbootstrapping a new site and template. It is also the only required\ntemplate when using a single page site.*\n\nIn addition to the standard node variables, the homepage has access to\nall site content accessible from `.Data.Pages`. Details on how to use the\nlist of pages can be found in the [Lists Template](\/templates\/list\/).\n\n## Which Template will be rendered?\nHugo uses a set of rules to figure out which template to use when\nrendering a specific page.\n\nHugo will use the following prioritized list. If a file isn\u2019t present,\nthen the next one in the list will be used. This enables you to craft\nspecific layouts when you want to without creating more templates\nthan necessary. For most sites, only the \\_default file at the end of\nthe list will be needed.\n\n* \/layouts\/index.html\n* \/layouts\/\\_default\/list.html\n* \/layouts\/\\_default\/single.html\n* \/themes\/`THEME`\/layouts\/index.html\n* \/themes\/`THEME`\/layouts\/\\_default\/list.html\n* \/themes\/`THEME`\/layouts\/\\_default\/single.html\n\n## Example index.html\nThis content template is used for [spf13.com](http:\/\/spf13.com\/).\n\nIt makes use of [partial templates](\/templates\/partials\/) and uses a similar approach as a [List](\/templates\/list\/).\n\n    <!DOCTYPE html>\n    <html class=\"no-js\" lang=\"en-US\" prefix=\"og: http:\/\/ogp.me\/ns# fb: http:\/\/ogp.me\/ns\/fb#\">\n    <head>\n        <meta charset=\"utf-8\">\n\n         partial \"meta.html\" . \n\n        <base href=\" .Site.BaseUrl \">\n        <title> .Site.Title <\/title>\n        <link rel=\"canonical\" href=\" .Permalink \">\n        <link href=\" .RSSlink \" rel=\"alternate\" type=\"application\/rss+xml\" title=\" .Site.Title \" \/>\n\n         partial \"head_includes.html\" . \n    <\/head>\n    <body lang=\"en\">\n\n     partial \"subheader.html\" . \n\n    <section id=\"main\">\n      <div>\n         range first 10 .Data.Pages \n             .Render \"summary\"\n         end \n      <\/div>\n    <\/section>\n\n     partial \"footer.html\" . \n"}
{"Path":".\/templates\/list.md","Content":"---\naliases:\n- \/layout\/indexes\/\ndate: 2013-07-01\nlinktitle: List of Content\nmenu:\n  main:\n    parent: layout\nnext: \/templates\/homepage\nprev: \/templates\/content\ntitle: Content List Template\nweight: 40\n---\n\nA list template is any template that will be used to render multiple pieces of\ncontent in a single HTML page (with the exception of the [homepage](\/layout\/homepage\/) which has a\ndedicated template).\n\nWe are using the term list in its truest sense, a sequential arrangement\nof material, especially in alphabetical or numerical order. Hugo uses\nlist templates to render anyplace where content is being listed such as\ntaxonomies and sections.\n\n## Which Template will be rendered?\n\nHugo uses a set of rules to figure out which template to use when\nrendering a specific page.\n\nHugo will use the following prioritized list. If a file isn\u2019t present,\nthen the next one in the list will be used. This enables you to craft\nspecific layouts when you want to without creating more templates\nthan necessary. For most sites only the \\_default file at the end of\nthe list will be needed.\n\n\n### Section Lists\n\nA Section will be rendered at \/`SECTION`\/ (e.g.&nbsp;http:\/\/spf13.com\/project\/)\n\n* \/layouts\/section\/`SECTION`.html\n* \/layouts\/\\_default\/section.html\n* \/layouts\/\\_default\/list.html\n* \/themes\/`THEME`\/layouts\/section\/`SECTION`.html\n* \/themes\/`THEME`\/layouts\/\\_default\/section.html\n* \/themes\/`THEME`\/layouts\/\\_default\/list.html\n\n\n### Taxonomy Lists\n\nA Taxonomy will be rendered at \/`PLURAL`\/`TERM`\/ (e.g.&nbsp;http:\/\/spf13.com\/topics\/golang\/) from:\n\n* \/layouts\/taxonomy\/`SINGULAR`.html (e.g.&nbsp;`\/layouts\/taxonomy\/topic.html`)\n* \/layouts\/\\_default\/taxonomy.html\n* \/layouts\/\\_default\/list.html\n* \/themes\/`THEME`\/layouts\/taxonomy\/`SINGULAR`.html\n* \/themes\/`THEME`\/layouts\/\\_default\/taxonomy.html\n* \/themes\/`THEME`\/layouts\/\\_default\/list.html\n\n### Section RSS\n\nA Section\u2019s RSS will be rendered at \/`SECTION`\/index.xml (e.g.&nbsp;http:\/\/spf13.com\/project\/index.xml)\n\n*Hugo ships with its own [RSS 2.0][] template. In most cases this will\nbe sufficient, and an RSS template will not need to be provided by the\nuser.*\n\nHugo provides the ability for you to define any RSS type you wish, and\ncan have different RSS files for each section and taxonomy.\n\n* \/layouts\/section\/`SECTION`.rss.xml\n* \/layouts\/\\_default\/rss.xml\n* \/themes\/`THEME`\/layouts\/section\/`SECTION`.rss.xml\n* \/themes\/`THEME`\/layouts\/\\_default\/rss.xml\n\n### Taxonomy RSS\n\nA Taxonomy\u2019s RSS will be rendered at \/`PLURAL`\/`TERM`\/index.xml (e.g.&nbsp;http:\/\/spf13.com\/topics\/golang\/index.xml)\n\n*Hugo ships with its own [RSS 2.0][] template. In most cases this will\nbe sufficient, and an RSS template will not need to be provided by the\nuser.*\n\nHugo provides the ability for you to define any RSS type you wish, and\ncan have different RSS files for each section and taxonomy.\n\n* \/layouts\/taxonomy\/`SINGULAR`.rss.xml\n* \/layouts\/\\_default\/rss.xml\n* \/themes\/`THEME`\/layouts\/taxonomy\/`SINGULAR`.rss.xml\n* \/themes\/`THEME`\/layouts\/\\_default\/rss.xml\n\n\n## Variables\n\nList pages are of the type \"node\" and have all the [node\nvariables](\/templates\/variables\/) and [site\nvariables](\/templates\/variables\/) available to use in the templates. \n\nTaxonomy pages will additionally have:\n\n**.Data.`singular`** The taxonomy itself.<br>\n\n## Example List Template Pages\n\n### Example section template (post.html)\nThis content template is used for [spf13.com](http:\/\/spf13.com\/).\nIt makes use of [partial templates](\/templates\/partials\/). All examples use a\n[view](\/templates\/views\/) called either \"li\" or \"summary\" which this example site\ndefined.\n\n     partial \"header.html\" . \n     partial \"subheader.html\" . \n\n    <section id=\"main\">\n      <div>\n       <h1 id=\"title\"> .Title <\/h1>\n            <ul id=\"list\">\n                 range .Data.Pages \n                     .Render \"li\"\n                 end \n            <\/ul>\n      <\/div>\n    <\/section>\n\n     partial \"footer.html\" . \n\n### Example taxonomy template (tag.html)\nThis content template is used for [spf13.com](http:\/\/spf13.com\/).\nIt makes use of [partial templates](\/templates\/partials\/). All examples use a\n[view](\/templates\/views\/) called either \"li\" or \"summary\" which this example site\ndefined.\n\n     partial \"header.html\" . \n     partial \"subheader.html\" . \n\n    <section id=\"main\">\n      <div>\n       <h1 id=\"title\"> .Title <\/h1>\n         range .Data.Pages \n             .Render \"summary\"\n         end \n      <\/div>\n    <\/section>\n\n     partial \"footer.html\" . \n\n## Ordering Content\n\nIn the case of Hugo each list will render the content based on metadata provided in the [front\nmatter](\/content\/front-matter\/). See [ordering content](\/content\/ordering\/) for more information.\n\nHere are a variety of different ways you can order the content items in\nyour list templates:\n\n### Order by Weight -> Date (default)\n\n     range .Data.Pages \n    <li>\n    <a href=\" .Permalink \"> .Title <\/a>\n    <div class=\"meta\"> .Date.Format \"Mon, Jan 2, 2006\" <\/div>\n    <\/li>\n     end \n\n### Order by Weight -> Date\n\n     range .Data.Pages.ByWeight \n    <li>\n    <a href=\" .Permalink \"> .Title <\/a>\n    <div class=\"meta\"> .Date.Format \"Mon, Jan 2, 2006\" <\/div>\n    <\/li>\n     end \n\n### Order by Date\n\n     range .Data.Pages.ByDate \n    <li>\n    <a href=\" .Permalink \"> .Title <\/a>\n    <div class=\"meta\"> .Date.Format \"Mon, Jan 2, 2006\" <\/div>\n    <\/li>\n     end \n\n### Order by PublishDate\n\n     range .Data.Pages.ByPublishDate \n    <li>\n    <a href=\" .Permalink \"> .Title <\/a>\n    <div class=\"meta\"> .PublishDate.Format \"Mon, Jan 2, 2006\" <\/div>\n    <\/li>\n     end \n\n### Order by Length\n\n     range .Data.Pages.ByLength \n    <li>\n    <a href=\" .Permalink \"> .Title <\/a>\n    <div class=\"meta\"> .Date.Format \"Mon, Jan 2, 2006\" <\/div>\n    <\/li>\n     end \n\n\n### Order by Title\n\n     range .Data.Pages.ByTitle \n    <li>\n    <a href=\" .Permalink \"> .Title <\/a>\n    <div class=\"meta\"> .Date.Format \"Mon, Jan 2, 2006\" <\/div>\n    <\/li>\n     end \n\n### Order by LinkTitle\n\n     range .Data.Pages.ByLinkTitle \n    <li>\n    <a href=\" .Permalink \"> .LinkTitle <\/a>\n    <div class=\"meta\"> .Date.Format \"Mon, Jan 2, 2006\" <\/div>\n    <\/li>\n     end \n\n### Reverse Order\nCan be applied to any of the above. Using Date for an example.\n\n     range .Data.Pages.ByDate.Reverse \n    <li>\n    <a href=\" .Permalink \"> .Title <\/a>\n    <div class=\"meta\"> .Date.Format \"Mon, Jan 2, 2006\" <\/div>\n    <\/li>\n     end \n\n## Grouping Content\n\nHugo provides some grouping functions for list pages. You can use them to\ngroup pages by Section, Type, Date etc.\n\nHere are a variety of different ways you can group the content items in\nyour list templates:\n\n### Grouping by Page field\n\n     range .Data.Pages.GroupBy \"Section\" \n    <h3> .Key <\/h3>\n    <ul>\n         range .Pages \n        <li>\n        <a href=\" .Permalink \"> .Title <\/a>\n        <div class=\"meta\"> .Date.Format \"Mon, Jan 2, 2006\" <\/div>\n        <\/li>\n         end \n    <\/ul>\n     end \n\n### Grouping by Page date\n\n     range .Data.Pages.GroupByDate \"2006-01\" \n    <h3> .Key <\/h3>\n    <ul>\n         range .Pages \n        <li>\n        <a href=\" .Permalink \"> .Title <\/a>\n        <div class=\"meta\"> .Date.Format \"Mon, Jan 2, 2006\" <\/div>\n        <\/li>\n         end \n    <\/ul>\n     end \n\n### Grouping by Page publish date\n\n     range .Data.Pages.GroupByPublishDate \"2006-01\" \n    <h3> .Key <\/h3>\n    <ul>\n         range .Pages \n        <li>\n        <a href=\" .Permalink \"> .Title <\/a>\n        <div class=\"meta\"> .PublishDate.Format \"Mon, Jan 2, 2006\" <\/div>\n        <\/li>\n         end \n    <\/ul>\n     end \n\n### Grouping by Page param\n\n     range .Data.Pages.GroupByParam \"param_key\" \n    <h3> .Key <\/h3>\n    <ul>\n         range .Pages \n        <li>\n        <a href=\" .Permalink \"> .Title <\/a>\n        <div class=\"meta\"> .Date.Format \"Mon, Jan 2, 2006\" <\/div>\n        <\/li>\n         end \n    <\/ul>\n     end \n\n### Grouping by Page param in date format\n\n     range .Data.Pages.GroupByParamDate \"param_key\" \"2006-01\" \n    <h3> .Key <\/h3>\n    <ul>\n         range .Pages \n        <li>\n        <a href=\" .Permalink \"> .Title <\/a>\n        <div class=\"meta\"> .Date.Format \"Mon, Jan 2, 2006\" <\/div>\n        <\/li>\n         end \n    <\/ul>\n     end \n\n### Reversing Key Order\n\nThe ordering of the groups is performed by keys in alpha-numeric order (A\u2013Z,\n1\u2013100) and in reverse chronological order (newest first) for dates.\n\nWhile these are logical defaults, they are not always the desired order. There\nare two different syntaxes to change the order, they both work the same way, so\nit\u2019s really just a matter of preference.\n\n#### Reverse method\n\n     range (.Data.Pages.GroupBy \"Section\").Reverse \n    ...\n\n     range (.Data.Pages.GroupByDate \"2006-01\").Reverse \n    ...\n\n\n#### Providing the (alternate) direction\n\n     range .Data.Pages.GroupByDate \"2006-01\" \"asc\" \n    ...\n\n     range .Data.Pages.GroupBy \"Section\" \"desc\" \n    ...\n\n### Ordering Pages within Group\n\nBecause Grouping returns a key and a slice of pages, all of the ordering methods listed above are available.\n\nIn this example I\u2019ve ordered the groups in chronological order and the content\nwithin each group in alphabetical order by title.\n\n     range .Data.Pages.GroupByDate \"2006-01\" \"asc\" \n    <h3> .Key <\/h3>\n    <ul>\n         range .Pages.ByTitle \n        <li>\n        <a href=\" .Permalink \"> .Title <\/a>\n        <div class=\"meta\"> .Date.Format \"Mon, Jan 2, 2006\" <\/div>\n        <\/li>\n         end \n    <\/ul>\n     end \n\n## Filtering & Limiting Content\n\nSometimes you only want to list a subset of the available content. A common\nrequest is to only display \u201cPosts\u201d on the homepage. Using the `where` function\nyou can do just that.\n\n### First \n\n`first` works like the `limit` keyword in SQL. It reduces the array to only the\nfirst X elements. It takes the array and number of elements as input.\n\n     range first 10 .Data.Pages \n         .Render \"summary\"\n     end \n\n### Where\n\n`where` works in a similar manner to the `where` keyword in SQL. It selects all\nelements of the slice that match the provided field and value. It takes three\narguments 'array or slice of maps or structs', 'key or field name' and 'match\nvalue'\n\n     range where .Data.Pages \"Section\" \"post\" \n        .Content\n     end \n\n### First & Where Together\n\nUsing both together can be very powerful.\n\n     range first 5 (where .Data.Pages \"Section\" \"post\") \n        .Content\n     end \n\nIf `where` or `first` receives invalid input or a field name that doesn\u2019t exist they will provide an error and stop site generation.\n\nThese are both template functions and work on not only\n[lists](\/templates\/list\/), but [taxonomies](\/taxonomies\/displaying\/),\n[terms](\/templates\/terms\/) and [groups](\/templates\/list\/).\n\n\n[RSS 2.0]: http:\/\/cyber.law.harvard.edu\/rss\/rss.html \"RSS 2.0 Specification\"\n"}
{"Path":".\/templates\/overview.md","Content":"---\naliases:\n- \/doc\/templates\/\n- \/layout\/templates\/\n- \/layout\/overview\/\ndate: 2013-07-01\nlinktitle: Overview\nmenu:\n  main:\n    parent: layout\nnext: \/templates\/go-templates\nprev: \/themes\/creation\ntitle: Hugo Templates\nweight: 10\n---\n\nHugo uses the excellent Go html\/template library for its template engine.\nIt is an extremely lightweight engine that provides a very small amount of\nlogic. In our experience it is just the right amount of logic to be able\nto create a good static website.\n\nWhile Hugo has a number of different template roles, most complete\nwebsites can be built using just a small number of template files.\nPlease don\u2019t be afraid of the variety of different template roles. They\nenable Hugo to build very complicated sites. Most sites will only\nneed to create a [\/layouts\/\\_default\/single.html](\/templates\/content\/) & [\/layouts\/\\_default\/list.html](\/templates\/list\/)\n\nIf you are new to Go's templates, the [Go Template Primer](\/layout\/go-templates\/)\nis a great place to start.\n\nIf you are familiar with Go\u2019s templates, Hugo provides some [additional\ntemplate functions](\/templates\/functions\/) and [variables](\/templates\/variables\/) you will want to be familiar\nwith.\n\n## Primary Template roles\n\nThere are 3 primary kinds of templates that Hugo works with.\n\n### [Single](\/templates\/content\/)\nRender a single piece of content\n\n### [List](\/templates\/list\/)\nPage that list multiple pieces of content\n\n### [Homepage](\/templates\/homepage\/)\nThe homepage of your site\n\n## Supporting Template Roles (optional)\n\nHugo also has additional kinds of templates all of which are optional\n\n### [Partial Templates](\/templates\/partials\/)\nCommon page parts to be included in the above mentioned templates\n\n### [Content Views](\/templates\/views\/)\nDifferent ways of rendering a (single) content type\n\n### [Taxonomy Terms](\/templates\/terms\/)\nA list of the terms used for a specific taxonomy, e.g. a Tag cloud\n\n## Other Templates (generally unnecessary)\n\n### [RSS](\/templates\/rss\/)\nUsed to render all rss documents\n\n### [Sitemap](\/templates\/sitemap\/)\nUsed to render the XML sitemap\n\n### [404](\/templates\/404\/)\nThis template will create a 404.html page used when hosting on GitHub Pages\n\n\n"}
{"Path":".\/templates\/partials.md","Content":"---\naliases:\n- \/layout\/chrome\/\ndate: 2013-07-01\nmenu:\n  main:\n    parent: layout\nnext: \/templates\/rss\nprev: \/templates\/views\ntitle: Partial Templates\nweight: 80\n---\n\nIn practice, it's very convenient to split out common template portions into a\npartial template that can be included anywhere. As you create the rest of your\ntemplates, you will include templates from the \/layout\/partials directory.\n\nPartials are especially important for themes as it gives users an opportunity\nto overwrite just a small part of your theme, while maintaining future compatibility.\n\nTheme developers may want to include a few partials with empty HTML\nfiles in the theme just so end users have an easy place to inject their\ncustomized content.\n\nI've found it helpful to include a header and footer template in\npartials so I can include those in all the full page layouts.  There is\nnothing special about header.html and footer.html other than they seem\nlike good names to use for inclusion in your other templates.\n\n    \u25be layouts\/\n      \u25be partials\/\n          header.html\n          footer.html\n\nBy ensuring that we only reference [variables](\/layout\/variables\/)\nused for both nodes and pages, we can use the same partials for both.\n\n## Partial vs Template \n\nVersion v0.12 of Hugo introduced the `partial` call inside the template system.\nThis is a change to the way partials were handled previously inside the\ntemplate system. In earlier versions, Hugo didn\u2019t treat partials specially, and\nyou could include a partial template with the `template` call in the standard\ntemplate language.\n\nWith the addition of the theme system in v0.11, it became apparent that a theme\n& override aware partial was needed.\n\nWhen using Hugo v0.12 and above, please use the `partial` call (and leave out\nthe \u201cpartial\/\u201d path). The old approach would still work, but wouldn\u2019t benefit from\nthe ability to have users override the partial theme file with local layouts.\n\n## Example header.html\nThis header template is used for [spf13.com](http:\/\/spf13.com\/):\n\n    <!DOCTYPE html>\n    <html class=\"no-js\" lang=\"en-US\" prefix=\"og: http:\/\/ogp.me\/ns# fb: http:\/\/ogp.me\/ns\/fb#\">\n    <head>\n        <meta charset=\"utf-8\">\n\n         partial \"meta.html\" . \n\n        <base href=\" .Site.BaseUrl \">\n        <title>  .Title  : spf13.com <\/title>\n        <link rel=\"canonical\" href=\" .Permalink \">\n         if .RSSlink <link href=\" .RSSlink \" rel=\"alternate\" type=\"application\/rss+xml\" title=\" .Title \" \/> end \n\n         partial \"head_includes.html\" . \n    <\/head>\n    <body lang=\"en\">\n\n## Example footer.html\nThis footer template is used for [spf13.com](http:\/\/spf13.com\/):\n\n    <footer>\n      <div>\n        <p>\n        &copy; 2013-14 Steve Francia.\n        <a href=\"http:\/\/creativecommons.org\/licenses\/by\/3.0\/\" title=\"Creative Commons Attribution\">Some rights reserved<\/a>; \n        please attribute properly and link back. Hosted by <a href=\"http:\/\/servergrove.com\">ServerGrove<\/a>.\n        <\/p>\n      <\/div>\n    <\/footer>\n    <script type=\"text\/javascript\">\n\n      var _gaq = _gaq || [];\n      _gaq.push(['_setAccount', 'UA-XYSYXYSY-X']);\n      _gaq.push(['_trackPageview']);\n\n      (function() {\n        var ga = document.createElement('script');\n        ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : \n            'http:\/\/www') + '.google-analytics.com\/ga.js';\n        ga.setAttribute('async', 'true');\n        document.documentElement.firstChild.appendChild(ga);\n      })();\n\n    <\/script>\n    <\/body>\n    <\/html>\n\n**For examples of referencing these templates, see [single content\ntemplates](\/templates\/content\/), [list templates](\/templates\/list\/) and [homepage templates](\/templates\/homepage\/).**\n"}
{"Path":".\/templates\/rss.md","Content":"---\naliases:\n- \/layout\/rss\/\ndate: 2013-07-01\nlinktitle: RSS\nmenu:\n  main:\n    parent: layout\nnext: \/templates\/sitemap\nnotoc: one\nprev: \/templates\/partials\ntitle: RSS (feed) Templates\nweight: 90\n---\n\nLike all other templates, you can use a single RSS template to generate\nall of your RSS feeds, or you can create a specific template for each\nindividual feed. Unlike other templates, *Hugo ships with its own\n[RSS 2.0 template](#the-embedded-rss-xml:eceb479b7b3b2077408a2878a29e1320).\nIn most cases this will be sufficient, and an RSS\ntemplate will not need to be provided by the user.*\n\nRSS pages are of the type \"node\" and have all the [node\nvariables](\/layout\/variables\/) available to use in the templates.\n\n\n## Which Template will be rendered?\nHugo uses a set of rules to figure out which template to use when\nrendering a specific page.\n\nHugo will use the following prioritized list. If a file isn\u2019t present,\nthen the next one in the list will be used. This enables you to craft\nspecific layouts when you want to without creating more templates\nthan necessary. For most sites only the \\_default file at the end of\nthe list will be needed.\n\n### Main RSS\n\n* \/layouts\/rss.xml\n* \/layouts\/\\_default\/rss.xml\n* \\__internal\/rss.xml\n\n### Section RSS\n\n* \/layouts\/section\/`SECTION`.rss.xml\n* \/layouts\/\\_default\/rss.xml\n* \/themes\/`THEME`\/layouts\/section\/`SECTION`.rss.xml\n* \/themes\/`THEME`\/layouts\/\\_default\/rss.xml\n* \\__internal\/rss.xml\n\n### Taxonomy RSS\n\n* \/layouts\/taxonomy\/`SINGULAR`.rss.xml\n* \/layouts\/\\_default\/rss.xml\n* \/themes\/`THEME`\/layouts\/taxonomy\/`SINGULAR`.rss.xml\n* \/themes\/`THEME`\/layouts\/\\_default\/rss.xml\n* \\__internal\/rss.xml\n\n\n## Configuring RSS\n\nIf the following are provided in the site\u2019s config file, then they\nwill be included in the RSS output. Example values are provided.\n\n    languageCode = \"en-us\"\n    copyright = \"This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.\"\n\n    [author]\n        name = \"My Name Here\"\n\n\n## The Embedded rss.xml\nThis is the RSS template that ships with Hugo. It adheres to the\n[RSS 2.0 Specification][RSS 2.0].\n\n    <rss version=\"2.0\" xmlns:atom=\"http:\/\/www.w3.org\/2005\/Atom\">\n      <channel>\n          <title> .Title  on  .Site.Title  <\/title>\n          <generator uri=\"https:\/\/gohugo.io\">Hugo<\/generator>\n        <link> .Permalink <\/link>\n         with .Site.LanguageCode <language>.<\/language>end\n         with .Site.Author.name <author>.<\/author>end\n         with .Site.Copyright <copyright>.<\/copyright>end\n        <updated> .Date.Format \"Mon, 02 Jan 2006 15:04:05 MST\" <\/updated>\n         range first 15 .Data.Pages \n        <item>\n          <title> .Title <\/title>\n          <link> .Permalink <\/link>\n          <pubDate> .Date.Format \"Mon, 02 Jan 2006 15:04:05 MST\" <\/pubDate>\n          with .Site.Author.name<author>.<\/author>end\n          <guid> .Permalink <\/guid>\n          <description> .Content | html <\/description>\n        <\/item>\n         end \n      <\/channel>\n    <\/rss>\n\n*Important: Hugo will automatically add the following header line to this file\non render\u2026 please don't include this in the template as it's not valid HTML.*\n\n    <?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\" ?>\n\n\n[RSS 2.0]: http:\/\/cyber.law.harvard.edu\/rss\/rss.html \"RSS 2.0 Specification\"\n"}
{"Path":".\/templates\/sitemap.md","Content":"---\naliases:\n- \/layout\/sitemap\/\ndate: 2014-05-07\nlinktitle: Sitemap\nmenu:\n  main:\n    parent: layout\nnext: \/templates\/404\nnotoc: true\nprev: \/templates\/rss\ntitle: Sitemap Template\nweight: 95\n---\n\nA single Sitemap template is used to generate the `sitemap.xml` file.\nHugo automatically comes with this template file. **No work is needed on\nthe users' part unless they want to customize `sitemap.xml`.**\n\nThis page is of the type \"node\" and have all the [node\nvariables](\/layout\/variables\/) available to use in this template\nalong with Sitemap-specific ones:\n\n**.Sitemap.ChangeFreq** The page change frequency<br>\n**.Sitemap.Priority** The priority of the page<br>\n\nIn addition to the standard node variables, the homepage has access to all\nsite pages through `.Data.Pages`.\n\nIf provided, Hugo will use `\/layouts\/sitemap.xml` instead of the internal\none.\n\n## Hugo\u2019s sitemap.xml\n\nThis template respects the version 0.9 of the [Sitemap\nProtocol](http:\/\/www.sitemaps.org\/protocol.html).\n\n    <urlset xmlns=\"http:\/\/www.sitemaps.org\/schemas\/sitemap\/0.9\">\n       range .Data.Pages \n      <url>\n        <loc> .Permalink <\/loc>\n        <lastmod> safeHtml ( .Date.Format \"2006-01-02T15:04:05-07:00\" ) <\/lastmod> with .Sitemap.ChangeFreq \n        <changefreq> . <\/changefreq> end  if ge .Sitemap.Priority 0.0 \n        <priority> .Sitemap.Priority <\/priority> end \n      <\/url>\n       end \n    <\/urlset>\n\n***Important:** Hugo will automatically add the following header line to this file\non render. Please don't include this in the template as it's not valid HTML.*\n\n    <?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\" ?>\n"}
{"Path":".\/templates\/terms.md","Content":"---\naliases:\n- \/indexes\/lists\/\n- \/doc\/indexes\/\n- \/extras\/indexes\ndate: 2014-05-21\nlinktitle: Taxonomy Terms\nmenu:\n  main:\n    parent: layout\nnext: \/templates\/views\nprev: \/templates\/homepage\ntitle: Taxonomy Terms Template\nweight: 60\n---\n\nA unique template is needed to create a list of the terms for a given\ntaxonomy. This is different from the [list template](\/templates\/list\/)\nas that template is a list of content, whereas this is a list of meta data.\n\n## Which Template will be rendered?\nHugo uses a set of rules to figure out which template to use when\nrendering a specific page.\n\nA Taxonomy Terms List will be rendered at \/`PLURAL`\/\n(e.g. http:\/\/spf13.com\/topics\/)\nfrom the following prioritized list:\n\n* \/layouts\/taxonomy\/`SINGULAR`.terms.html (e.g. `\/layouts\/taxonomy\/topic.terms.html`)\n* \/layouts\/\\_default\/terms.html\n\nIf a file isn\u2019t present,\nthen the next one in the list will be used. This enables you to craft\nspecific layouts when you want to without creating more templates\nthan necessary. For most sites, only the `_default` file at the end of\nthe list will be needed.\n\nIf that neither file is found in either the \/layouts or \/theme\/layouts\ndirectory, then Hugo will not render the taxonomy terms pages. It is also\ncommon for people to render taxonomy terms lists on other pages such as\nthe homepage or the sidebar (such as a tag cloud) and not have a\ndedicated page for the terms.\n\n\n## Variables\n\nTaxonomy Terms pages are of the type \"node\" and have all the\n[node variables](\/templates\/variables\/) and\n[site variables](\/templates\/variables\/)\navailable to use in the templates.\n\nTaxonomy Terms pages will additionally have:\n\n* **.Data.Singular** The singular name of the taxonomy\n* **.Data.Plural** The plural name of the taxonomy\n* **.Data.Terms** The taxonomy itself\n* **.Data.Terms.Alphabetical** The Terms alphabetized\n* **.Data.Terms.ByCount** The Terms ordered by popularity\n\n### Example terms.html files\n\nList pages are of the type \"node\" and have all the\n[node variables](\/templates\/variables\/) and\n[site variables](\/templates\/variables\/)\navailable to use in the templates.\n\nThis content template is used for [spf13.com](http:\/\/spf13.com\/).\nIt makes use of [partial templates](\/templates\/partials\/). The list of taxonomy\ntemplates cannot use a [content view](\/templates\/views\/) as they don't display the content, but\nrather information about the content.\n\nThis particular template lists all of the Tags used on\n[spf13.com](http:\/\/spf13.com\/) and provides a count for the number of pieces of\ncontent tagged with each tag.\n\n`.Data.Terms` is an map of terms \u21d2 [contents]\n\n     partial \"header.html\" . \n     partial \"subheader.html\" . \n\n    <section id=\"main\">\n      <div>\n        <h1 id=\"title\"> .Title <\/h1>\n\n        <ul>\n         $data := .Data \n         range $key, $value := .Data.Terms \n          <li><a href=\" $data.Plural \/ $key | urlize \"> $key <\/a>  len $value <\/li>\n         end \n       <\/ul>\n      <\/div>\n    <\/section>\n\n     partial \"footer.html\" . \n\n\nAnother example listing the content for each term (ordered by Date):\n\n     partial \"header.html\" . \n     partial \"subheader.html\" . \n\n    <section id=\"main\">\n      <div>\n        <h1 id=\"title\"> .Title <\/h1>\n\n         $data := .Data \n         range $key,$value := .Data.Terms.ByCount \n        <h2><a href=\" $data.Plural \/ $value.Name | urlize \"> $value.Name <\/a>  $value.Count <\/h2>\n        <ul>\n         range $value.Pages.ByDate \n          <li><a href=\" .Permalink \"> .Title <\/a><\/li>\n         end \n        <\/ul>\n         end \n      <\/div>\n    <\/section>\n\n     partial \"footer.html\" . \n\n\n## Ordering\n\nHugo can order the meta data in two different ways. It can be ordered:\n\n* by the number of contents assigned to that key, or\n* alphabetically.\n\n### Example terms.html file (alphabetical)\n\n     partial \"header.html\" . \n     partial \"subheader.html\" . \n\n    <section id=\"main\">\n      <div>\n        <h1 id=\"title\"> .Title <\/h1>\n        <ul>\n         $data := .Data \n         range $key, $value := .Data.Terms.Alphabetical \n          <li><a href=\" $data.Plural \/ $value.Name | urlize \"> $value.Name <\/a>  $value.Count <\/li>\n         end \n        <\/ul>\n      <\/div>\n    <\/section>\n     partial \"footer.html\" . \n\n### Example terms.html file (ordered by popularity)\n\n     partial \"header.html\" . \n     partial \"subheader.html\" . \n\n    <section id=\"main\">\n      <div>\n        <h1 id=\"title\"> .Title <\/h1>\n        <ul>\n         $data := .Data \n         range $key, $value := .Data.Terms.ByCount \n          <li><a href=\" $data.Plural \/ $value.Name | urlize \"> $value.Name <\/a>  $value.Count <\/li>\n         end \n        <\/ul>\n      <\/div>\n    <\/section>\n\n     partial \"footer.html\" . \n"}
{"Path":".\/templates\/variables.md","Content":"---\naliases:\n- \/doc\/variables\/\n- \/layout\/variables\/\ndate: 2013-07-01\nlinktitle: Variables\nmenu:\n  main:\n    parent: layout\nnext: \/templates\/content\nprev: \/templates\/functions\ntitle: Template Variables\nweight: 20\n---\n\nHugo makes a set of values available to the templates. Go templates are context based. The following\nare available in the context for the templates.\n\n## Page Variables\n\nThe following is a list of most of the accessible variables which can be\ndefined for a piece of content. Many of these will be defined in the front\nmatter, content or derived from file location.\n\n**See also:** [Scratch](\/extras\/scratch) for page-scoped writable variables.\n\n**.Title**  The title for the content.<br>\n**.Content** The content itself, defined below the front matter.<br>\n**.Summary** A generated summary of the content for easily showing a snippet in a summary view. Note that the breakpoint can be set manually by inserting <code>&lt;!&#x2d;&#x2d;more&#x2d;&#x2d;&gt;<\/code> at the appropriate place in the content page.  See [Summaries](\/content\/summaries\/) for more details.<br>\n**.Truncated** A boolean, `true` if the `.Summary` is truncated.  Useful for showing a \"Read more...\" link only if necessary.  See [Summaries](\/content\/summaries\/) for more details.<br>\n**.Description** The description for the content.<br>\n**.Keywords** The meta keywords for this content.<br>\n**.Date** The date the content is associated with.<br>\n**.PublishDate** The date the content is published on.<br>\n**.Type** The content [type](\/content\/types\/) (e.g. post).<br>\n**.Section** The [section](\/content\/sections\/) this content belongs to.<br>\n**.Permalink** The Permanent link for this page.<br>\n**.RelPermalink** The Relative permanent link for this page.<br>\n**.LinkTitle** Access when creating links to this content. Will use `linktitle` if set in front matter, else `title`.<br>\n**.Taxonomies** These will use the field name of the plural form of the taxonomy (see tags and categories below).<br>\n**.RSSLink** Link to the taxonomies' RSS link.<br>\n**.TableOfContents** The rendered table of contents for this content.<br>\n**.Prev** Pointer to the previous content (based on pub date).<br>\n**.Next** Pointer to the following content (based on pub date).<br>\n**.PrevInSection** Pointer to the previous content within the same section (based on pub date)<br>\n**.NextInSection** Pointer to the following content within the same section (based on pub date)<br>\n**.FuzzyWordCount** The approximate number of words in the content.<br>\n**.WordCount** The number of words in the content.<br>\n**.ReadingTime** The estimated time it takes to read the content in minutes.<br>\n**.Weight** Assigned weight (in the front matter) to this content, used in sorting.<br>\n**.IsNode** Always false for pages.<br>\n**.IsPage** Always true for page.<br>\n**.Site** See [Site Variables](< relref \"#site-variables\" >) below.<br>\n**.Hugo** See [Hugo Variables](< relref \"#hugo-variables\" >) below.<br>\n\n## Page Params\n\nAny other value defined in the front matter, including taxonomies, will be made available under `.Params`.\nTake for example I'm using *tags* and *categories* as my taxonomies. The following would be how I would access them:\n\n* **.Params.tags**\n* **.Params.categories**\n\n**All Params are only accessible using all lowercase characters.**\n\n## Node Variables\nIn Hugo, a node is any page not rendered directly by a content file. This\nincludes taxonomies, lists and the homepage.\n\n**See also:** [Scratch](\/extras\/scratch) for global node variables.\n\n**.Title**  The title for the content.<br>\n**.Date** The date the content is published on.<br>\n**.Permalink** The Permanent link for this node<br>\n**.Url** The relative URL for this node.<br>\n**.Ref(ref)** Returns the permalink for `ref`. See [cross-references](% ref \"extras\/crossreferences.md\" %). Does not handle in-page fragments correctly.<br>\n**.RelRef(ref)** Returns the relative permalink for `ref`. See [cross-references](% ref \"extras\/crossreferences.md\" %). Does not handle in-page fragments correctly.<br>\n**.RSSLink** Link to the taxonomies' RSS link.<br>\n**.Data** The data specific to this type of node.<br>\n**.IsNode** Always true for nodes.<br>\n**.IsPage** Always false for nodes.<br>\n**.Site** See [Site Variables](< relref \"#site-variables\" >) below.<br>\n**.Hugo** See [Hugo Variables](< relref \"#hugo-variables\" >) below.<br>\n\n## Site Variables\n\nAlso available is `.Site` which has the following:\n\n**.Site.BaseUrl** The base URL for the site as defined in the site configuration file.<br>\n**.Site.Taxonomies** The [taxonomies](\/taxonomies\/usage\/) for the entire site.  Replaces the now-obsolete `.Site.Indexes` since v0.11.<br>\n**.Site.LastChange** The date of the last change of the most recent content.<br>\n**.Site.Pages** Array of all content ordered by Date, newest first.  Replaces the now-deprecated `.Site.Recent` starting v0.13.<br>\n**.Site.Params** A container holding the values from the `params` section of your site configuration file. For example, a TOML config file might look like this:\n\n    baseurl = \"http:\/\/yoursite.example.com\/\"\n\n    [params]\n      description = \"Tesla's Awesome Hugo Site\"\n      author = \"Nikola Tesla\"\n**.Site.Sections** Top level directories of the site.<br>\n**.Site.Pages** All of the content pages of the site.<br>\n**.Site.Files** All of the source files of the site.<br>\n**.Site.Menus** All of the menus in the site.<br>\n**.Site.Title** A string representing the title of the site.<br>\n**.Site.Author** A map of the authors as defined in the site configuration.<br>\n**.Site.LanguageCode** A string representing the language as defined in the site configuration.<br>\n**.Site.DisqusShortname** A string representing the shortname of the Disqus shortcode as defined in the site configuration.<br>\n**.Site.Copyright** A string representing the copyright of your web site as defined in the site configuration.<br>\n**.Site.LastChange** A string representing the last time content has been updated.<br>\n**.Site.Permalinks** A string to override the default permalink format. Defined in the site configuration.<br>\n**.Site.BuildDrafts** A boolean (Default: false) to indicate whether to build drafts. Defined in the site configuration.<br>\n\n## Hugo Variables\n\nAlso available is `.Hugo` which has the following:\n\n**.Hugo.Generator** Meta tag for the version of Hugo that generated the site. Highly recommended to be included by default in all theme headers so we can start to track Hugo usage and popularity. e.g. `<meta name=\"generator\" content=\"Hugo 0.13\" \/>`<br>\n**.Hugo.Version** The current version of the Hugo binary you are using e.g. `0.13-DEV`<br>\n**.Hugo.CommitHash** The git commit hash of the current Hugo binary e.g. `0e8bed9ccffba0df554728b46c5bbf6d78ae5247`<br>\n**.Hugo.BuildDate** The compile date of the current Hugo binary formatted with RFC 3339 e.g. `2002-10-02T10:00:00-05:00`<br>\n"}
{"Path":".\/templates\/views.md","Content":"---\naliases:\n- \/templates\/views\/\ndate: 2013-07-01\nmenu:\n  main:\n    parent: layout\nnext: \/templates\/partials\nprev: \/templates\/terms\ntitle: Content Views\nweight: 70\n---\n\nIn addition to the [single content template](\/templates\/content\/), Hugo can render alternative views of\nyour content. These are especially useful in [list templates](\/templates\/list\/).\n\nFor example you may want content of every type to be shown on the\nhomepage, but only a summary view of it there. Perhaps on a taxonomy\nlist page you would only want a bulleted list of your content. Views\nmake this very straightforward by delegating the rendering of each\ndifferent type of content to the content itself.\n\n\n## Creating a content view\n\nTo create a new view, simply create a template in each of your different\ncontent type directories with the view name. In the following example, we\nhave created a \"li\" view and a \"summary\" view for our two content types\nof post and project. As you can see, these sit next to the [single\ncontent view](\/templates\/content\/) template \"single.html\". You can even\nprovide a specific view for a given type and continue to use the\n\\_default\/single.html for the primary view.\n\n    \u25be layouts\/\n      \u25be post\/\n          li.html\n          single.html\n          summary.html\n      \u25be project\/\n          li.html\n          single.html\n          summary.html\n\nHugo also has support for a default content template to be used in the event\nthat a specific template has not been provided for that type. The default type\nworks the same as the other types, but the directory must be called \"_default\".\nContent views can also be defined in the \"_default\" directory.\n\n\n    \u25be layouts\/\n      \u25be _default\/\n          li.html\n          single.html\n          summary.html\n\n\n## Which Template will be rendered?\nHugo uses a set of rules to figure out which template to use when\nrendering a specific page.\n\nHugo will use the following prioritized list. If a file isn\u2019t present,\nthen the next one in the list will be used. This enables you to craft\nspecific layouts when you want to without creating more templates\nthan necessary. For most sites only the \\_default file at the end of\nthe list will be needed.\n\n* \/layouts\/`TYPE`\/`VIEW`.html\n* \/layouts\/\\_default\/`VIEW`.html\n* \/themes\/`THEME`\/layouts\/`TYPE`\/`VIEW`.html\n* \/themes\/`THEME`\/layouts\/\\_default\/`view`.html\n\n\n## Example using views\n\n### rendering view inside of a list\n\nUsing the summary view (defined below) inside of a ([list\ntemplates](\/templates\/list\/)).\n\n    <section id=\"main\">\n    <div>\n    <h1 id=\"title\"> .Title <\/h1>\n     range .Data.Pages \n     .Render \"summary\"\n     end \n    <\/div>\n    <\/section>\n\nIn the above example, you will notice that we have called `.Render` and passed in\nwhich view to render the content with. `.Render` is a special function available on\na content which tells the content to render itself with the provided view template.\nIn this example, we are not using the li view. To use this we would\nchange the render line to ` .Render \"li\" `.\n\n\n### li.html\n\nHugo will pass the entire page object to the view template. See [page\nvariables](\/templates\/variables\/) for a complete list.\n\nThis content template is used for [spf13.com](http:\/\/spf13.com\/).\n\n    <li>\n    <a href=\" .Permalink \"> .Title <\/a>\n    <div class=\"meta\"> .Date.Format \"Mon, Jan 2, 2006\" <\/div>\n    <\/li>\n\n### summary.html\n\nHugo will pass the entire page object to the view template. See [page\nvariables](\/templates\/variables\/) for a complete list.\n\nThis content template is used for [spf13.com](http:\/\/spf13.com\/).\n\n    <article class=\"post\">\n    <header>\n    <h2><a href=' .Permalink '>  .Title <\/a> <\/h2>\n    <div class=\"post-meta\"> .Date.Format \"Mon, Jan 2, 2006\"  -  .FuzzyWordCount  Words <\/div>\n    <\/header>\n\n     .Summary \n    <footer>\n    <a href=' .Permalink '><nobr>Read more \u2192<\/nobr><\/a>\n    <\/footer>\n    <\/article>\n\n\n"}
{"Path":".\/themes\/creation.md","Content":"---\ndate: 2014-05-12T10:09:17Z\nmenu:\n  main:\n    parent: themes\nnext: \/templates\/overview\nprev: \/themes\/customizing\ntitle: Creating a Theme\nweight: 50\n---\n\nHugo has the ability to create a new theme in your themes directory for you\nusing the `hugo new` command.\n\n`hugo new theme [name]`\n\nThis command will initialize all of the files and directories a basic theme\nwould need. Hugo themes are written in the Go template language. If you are new\nto Go, the [Go template primer](\/layout\/go-templates\/) will help you get started.\n\n## Theme Components\n\nA theme consists of templates and static assets such as javascript and css\nfiles. Themes can also optionally provide [archetypes](\/content\/archetypes\/)\nwhich are archetypal content types used by the `hugo new` command.\n\n### Layouts\n\nHugo is built around the concept that things should be as simple as possible.\nFundamentally website content is displayed in two different ways, a single\npiece of content and a list of content items. With Hugo a theme layout starts\nwith the defaults. As additional layouts are defined they are used for the\ncontent type or section they apply to. This keeps layouts simple, but permits\na large amount of flexibility.\n\n### Single Content\n\nThe default single file layout is located at `layouts\/_default\/single.html`.\n\n### List of Contents\n\nThe default list file layout is located at `layouts\/_default\/list.html`.\n\n### Partial Templates\n\nTheme creators should liberally use [partial templates](\/templates\/partials\/)\nthroughout their theme files. Not only is a good DRY practice to include shared\ncode, but partials are a special template type that enables the themes end user\nto be able to overwrite just a small piece of a file or inject code into the\ntheme from their local \/layouts. These partial templates are perfect for easy\ninjection into the theme with minimal maintenance to ensure future\ncompatibility.\n\n### Static\n\nEverything in the static directory will be copied directly into the final site\nwhen rendered. No structure is provided here to enable complete freedom. It is\ncommon to organize the static content into \n\n    \/css\n    \/js\n    \/img\n\nThe actual structure is entirely up to you, the theme creator, on how you would like to organize your files.\n\n\n### Archetypes\n\nIf your theme makes use of specific keys in the front matter, it is a good idea\nto provide an archetype for each content type you have. Archetypes follow the\n[guidelines provided](\/content\/archetypes\/).\n\n"}
{"Path":".\/themes\/customizing.md","Content":"---\ndate: 2014-05-12T10:09:34Z\nmenu:\n  main:\n    parent: themes\nnext: \/themes\/creation\nprev: \/themes\/usage\ntitle: Customizing a Theme\nweight: 40\n---\n\nHugo themes permit you to supplement or override any template or file\nfrom within your working directory.\n\n## Replacing Static files\n\nFor including a different file than what the theme ships\nwith. For example, if you would like to use a more recent version of jQuery\nthan what the theme happens to include, simply place an identically named file in the same\nrelative location but in your working directory. For example, if the\ntheme has jQuery 1.6 in `\/themes\/themename\/static\/js\/jquery.min.js`, simply place your file\nin the same relative path `\/static\/js\/jquery.min.js`.\n\n## Replace a single template file\n\nAnytime Hugo looks for a matching template, it will first check the\nworking directory before looking in the theme directory. If you would\nlike to modify a template, simply create that template in your local\n`layouts` directory. In the [template documentation](\/templates\/overview\/)\neach different template type explains the rules it uses to determine\nwhich template to use.\n\nThis is especially helpful when the theme creator used [partial\ntemplates](\/templates\/partials\/). These partial templates are perfect for easy\ninjection into the theme with minimal maintenance to ensure future\ncompatibility.\n\n**Warning: This only works for templates that Hugo knows about. If the\ntheme imports template files in a creatively named directory,\nHugo won\u2019t know to look for the local `\/layouts` first.**\n\n## Replace an archetype\n\nIf the archetype that ships with the theme for a given content type (or\nall content types) doesn\u2019t fit with how you are using the theme, feel\nfree to copy it to your `\/archetypes` directory and make modifications as\nyou see fit.\n\n## Beware of the default\n\n**Default** is a very powerful force in Hugo... Especially as it pertains to\noverwriting theme files. If a default is located in the local archetype\ndirectory or `\/layouts\/_default\/` directory, it will be used instead of\nany of the similar files in the theme. \n\nIt is usually better to override specific files rather than using the\ndefault in your working directory.\n"}
{"Path":".\/themes\/installing.md","Content":"---\ndate: 2014-05-12T10:09:49Z\nmenu:\n  main:\n    parent: themes\nnext: \/themes\/usage\nprev: \/themes\/overview\ntitle: Installing Themes\nweight: 20\n---\n\nHugo themes are located in a centralized GitHub repository. The [Hugo Themes\nRepo](https:\/\/github.com\/spf13\/hugoThemes) itself is really a meta\nrepository which contains pointers to set of contributed themes.\n\n## Installing all themes\n\nIf you would like to install all of the available Hugo themes, simply\nclone the entire repository from within your working directory:\n\n```bash\n$ git clone --recursive https:\/\/github.com\/spf13\/hugoThemes.git themes\n```\n\n## Installing a specific theme\n\n    $ mkdir themes\n    $ cd themes\n    $ git clone URL_TO_THEME\n"}
{"Path":".\/themes\/overview.md","Content":"---\ndate: 2014-05-12T10:03:52Z\nmenu:\n  main:\n    parent: themes\nnext: \/themes\/installing\nprev: \/content\/example\ntitle: Themes Overview\nweight: 10\n---\n\nHugo provides a robust theming system which is simple, yet capable of producing\neven the most complicated websites.\n\nThe Hugo community has created a set of themes ready for using in your own\nsite.\n\nHugo themes have been designed to be the perfect balance between\nsimplicity and functionality. Hugo themes are powered by the excellent\nGo template library. If you are new to Go templates, see our [primer on\nGo templates](\/templates\/go-templates\/).\n\nHugo themes support all modern features you come to expect. They are\nstructured in such a way to eliminate code duplication. Themes are also\ndesigned to be very easy to customize while retaining the ability to\nmaintain upgradeability as the upstream theme changes.\n\nHugo currently doesn\u2019t ship with a \u201cdefault\u201d theme, allowing the user to\npick whichever theme best suits their project.\n\nWe hope you will find Hugo themes perfect for your site.\n"}
{"Path":".\/themes\/usage.md","Content":"---\ndate: 2014-05-12T10:09:27Z\nmenu:\n  main:\n    parent: themes\nnext: \/themes\/customizing\nprev: \/themes\/installing\ntitle: Using a Theme\nweight: 30\n---\n\nPlease make certain you have installed the themes you want to use in the\n`\/themes` directory.\n\nTo use a theme for a site:\n\n    hugo -t ThemeName\n\nThe *ThemeName* must match the name of the directory inside `\/themes`.\n\nHugo will then apply the theme first, then apply anything that is in the local\ndirectory. To learn more, go to [customizing themes](\/themes\/customizing\/).\n"}
{"Path":".\/troubleshooting\/categories-with-accented-characters.md","Content":"---\ndate: 2015-01-08T16:32:00-07:00\nmenu:\n  main:\n    parent: troubleshooting\ntitle: Accented Categories\nweight: 10\n---\n\n## Trouble: Categories with accented characters\n\nOne of my categories is named \"Le-carr\u00e9,\" but the link ends up being generated like this:\n\n    categories\/le-carr%C3%A9\n\nAnd not working. Is there an easy fix for this that I'm overlooking?\n\n\n## Solution\n\nMac OS X user?  If so, you are likely a victim of HFS Plus file system's insistence to store the \"\u00e9\" (U+00E9) character in Normal Form Decomposed (NFD) mode, i.e. as \"e\" + \"  \u0301\" (U+0065 U+0301).\n\n`le-carr%C3%A9` is actually correct, `%C3%A9` being the UTF-8 version of U+00E9 as expected by the web server.  Problem is, OS X turns [U+00E9] into [U+0065 U+0301], and thus `le-carr%C3%A9` no longer works.  Instead, only `le-carre%CC%81` ending with `e%CC%81` would match that [U+0065 U+0301] at the end.\n\nThis is unique to OS X.  The rest of the world does not do this, and most certainly not your web server which is most likely running Linux.  This is not a Hugo-specific problem either.  Other people have been bitten by this when they have accented characters in their HTML files.\n\nNor is this problem specific to Latin scripts.  Japanese Mac users often run into the same issue, e.g. with `\u3060` decomposing into `\u305f` and <code>&#x3099;<\/code>.[^1]\n\nRsync 3.x to the rescue!  From [an answer posted on Server Fault](http:\/\/serverfault.com\/questions\/397420\/converting-utf-8-nfd-filenames-to-utf-8-nfc-in-either-rsync-or-afpd):\n\n> You can use rsync's `--iconv` option to convert between UTF-8 NFC & NFD, at least if you're on a Mac. There is a special `utf-8-mac` character set that stands for UTF-8 NFD. So to copy files from your Mac to your web server, you'd need to run something like:\n>\n> `rsync -a --iconv=utf-8-mac,utf-8 localdir\/ mywebserver:remotedir\/`\n>\n> This will convert all the local filenames from UTF-8 NFD to UTF-8 NFC on the remote server. The files' contents won't be affected.\n\nPlease make sure you have the latest version rsync 3.x installed.  The rsync that ships with OS X (even the latest 10.10 Yosemite) is the horribly old at version 2.6.9 protocol version 29.  The `--iconv` flag is new in rsync 3.x.\n\n### References\n\n* http:\/\/discuss.gohugo.io\/t\/categories-with-accented-characters\/505\n* [Converting UTF-8 NFD filenames to UTF-8 NFC, in either rsync or afpd](http:\/\/serverfault.com\/questions\/397420\/converting-utf-8-nfd-filenames-to-utf-8-nfc-in-either-rsync-or-afpd) (Server Fault)\n* http:\/\/wiki.apache.org\/subversion\/NonNormalizingUnicodeCompositionAwareness\n* https:\/\/en.wikipedia.org\/wiki\/Unicode_equivalence#Example\n* http:\/\/zaiste.net\/2012\/07\/brand_new_rsync_for_osx\/\n* https:\/\/gogo244.wordpress.com\/2014\/09\/17\/drived-me-crazy-convert-utf-8-mac-to-utf-8\/\n\n\n[^1]: As explained in the Japanese Perl Users article [Encode::UTF8Mac makes you happy while handling file names on MacOSX](http:\/\/perl-users.jp\/articles\/advent-calendar\/2010\/english\/24).\n"}
{"Path":".\/troubleshooting\/overview.md","Content":"---\ndate: 2015-01-18T02:41:52-07:00\nmenu:\n  main:\n    parent: troubleshooting\ntitle: Troubleshooting Overview\nweight: 0\n---\n\nGot stuck?  Worry not!  Chances are other users have encountered\nthe exact same problem as you have, brought it up for\n[discussion](http:\/\/discuss.gohugo.io\/), and have likely found a solution\nthrough the collective wisdom of our vibrant Hugo community!\n\nHere are some examples:\n\n* [`hugo new` aborts with cryptic EOF error](\/troubleshooting\/strange-eof-error\/) (affects v0.12 and lower)\n* [Categories with accented characters inaccessible](\/troubleshooting\/categories-with-accented-characters\/) (affects Mac OS&nbsp;X users)\n* [My CSS files aren't loaded!](http:\/\/discuss.gohugo.io\/t\/deployment-workflow\/90\/15)\n* [How do I include an image gallery on my website?](http:\/\/discuss.gohugo.io\/t\/image-gallery\/594)\n* ... And a lot more!\n\n% youtube c8fJIRNChmU %\n\nIndeed, you may find many questions and solutions\nto problems in our [discussion forum](http:\/\/discuss.gohugo.io\/),\nand you may find the [support](http:\/\/discuss.gohugo.io\/category\/support)\nand [tips & tricks](http:\/\/discuss.gohugo.io\/category\/tips-tricks)\ncategories particularly helpful.\n\nCan't find anything?  Please write on the forum and post your questions\nand comments!  Sometimes, your feedback may lead to the discovery of\nexisting bugs in the code or in the documentation, and may even spur\nthe interest of adding new features to the next Hugo version, improving\nHugo for everybody!  (Thank you!)  See you on the forum!\n"}
{"Path":".\/troubleshooting\/strange-eof-error.md","Content":"---\ndate: 2015-01-08T16:11:23-07:00\nmenu:\n  main:\n    parent: troubleshooting\ntitle: Strange EOF error\nweight: 5\n---\n\n## Trouble: `hugo new` aborts with cryptic EOF error\n\n> I'm running into an issue where I cannot get archetypes working, when running `hugo new showcase\/test.md`, for example, I see an `EOF` error thrown by Hugo.\n>\n> I have set up this test repository to show exactly what I've done, but it is essentially a vanilla installation of Hugo. https:\/\/github.com\/polds\/hugo-archetypes-test\n>\n> When in that repository, using Hugo v0.12 to run `hugo new -v showcase\/test.md`, I see the following output:\n>\n>     INFO: 2015\/01\/04 Using config file: \/private\/tmp\/test\/config.toml\n>     INFO: 2015\/01\/04 attempting to create  showcase\/test.md of showcase\n>     INFO: 2015\/01\/04 curpath: \/private\/tmp\/test\/archetypes\/showcase.md\n>     ERROR: 2015\/01\/04 EOF\n>\n> Is there something that I am blatantly missing?\n\n## Solution\n\nThank you for reporting this issue.  The solution is to add a final newline (i.e. EOL) to the end of your default.md archetype file of your theme.  More discussions happened on the forum here:\n\n* http:\/\/discuss.gohugo.io\/t\/archetypes-not-properly-working-in-0-12\/544\n* http:\/\/discuss.gohugo.io\/t\/eol-f-in-archetype-files\/554\n\nDue to popular demand, Hugo's parser has been enhanced to\naccommodate archetype files without final EOL,\nthanks to the great work by [@tatsushid](https:\/\/github.com\/tatsushid),\nin the upcoming v0.13 release,\n\nUntil then, for us running the stable v0.12 release, please remember to add the final EOL diligently.  <i class=\"fa fa-smile-o\"><\/i>\n\n## References\n\n* https:\/\/github.com\/spf13\/hugo\/issues\/776\n\n"}
{"Path":".\/tutorials\/dir3\/automated-deployments.md","Content":"---\nauthor: \"Arjen Schwarz\"\ndate: 2015-01-12\nlinktitle: Automated deployments\nmenu:\n  main:\n    parent: tutorials\nnext: \/tutorials\/creating-a-new-theme\nprev: \/community\/contributing\ntitle: Automated deployments with Wercker\nweight: 10\n---\n\n# Automated deployments with Wercker\n\nIn this tutorial we will set up a basic Hugo project and then configure a free tool called Wercker to automatically deploy the generated site any time we add an article. We will deploy it to GitHub pages as that is easiest to set up, but you will see that we can use anything. This tutorial takes you through every step of the process, complete with screenshots, and is fairly long.\n\nThe  assumptions made for this tutorial are that you know how to use git for version control, and have a GitHub account. In case you are unfamiliar with these, in their [help section](https:\/\/help.github.com\/articles\/set-up-git\/) GitHub has an explanation of how to install and use git and you can easily sign up for a free GitHub account as well.\n\n## Creating a basic Hugo site\n\nThere are already [pages](http:\/\/gohugo.io\/overview\/quickstart\/) dedicated to describing how to set up a Hugo site so we will only go through the most basic steps required to get a site up and running before we dive into the Wercker configuration. All the work for setting up the project is done using the command line, and kept as simple as possible.\n\nCreate the new site using the `hugo new site` command, and we move into it.\n\n```bash\nhugo new site hugo-wercker-example\ncd hugo-wercker-example\n```\n\nAdd the herring-cove theme by cloning it into the theme directory using the following commands.\n\n```bash\nmkdir themes\ncd themes\ngit clone https:\/\/github.com\/spf13\/herring-cove.git\n```\n\nCloning the project like this will conflict with our own version control, so we remove the external git configuration.\n\n```bash\nrm -rf herring-cove\/.git\n```\n\nLet's add a quick **about** page.\n\n```bash\nhugo new about.md\n```\n\nNow we'll edit contents\/about.md to ensure it's no longer a draft and add some text to it. Once completed it's a good idea to do a quick check if everything is working by running\n\n```bash\nhugo server --theme=herring-cove\n```\n\nIf everything is fine, you should be able to see something similar to the image below when you go to localhost:1313 in your browser.\n\n![][1]\n\n[1]: \/img\/tutorials\/creating-a-basic-hugo-site.png\n\n## Setting up version control\n\nAdding git to our project is done by running the `git init` command from the root directory of the project.\n\n```bash\ngit init\n```\n\nRunning `git status` at this point will show you p entries: the **config.toml** file, the **themes** directory, the **contents** directory, and the **public** directory. We don't want the **public** directory version controlled however, as we will use wercker to generate that later on. Therefore, we'll add a gitignore file that will exclude this using the following command.\n\n```bash\necho \"\/public\" >> .gitignore\n```\n\nAs we currently have no static files outside of the theme directory, Wercker might complain when we try to build the site later on. To prevent this, we simply have to add any file to the static folder. To keep it simple for now we'll add a robots.txt file that will give all search engines full access to the site when it's up.\n\n```bash\necho \"User-agent: *\\nDisallow:\" > static\/robots.txt\n```\n\nAfter this we can add everything to the repository.\n\n```bash\ngit add .\ngit commit -m \"Initial commit\"\n```\n\n## Adding the project to GitHub\n\nFirst we'll create a new repository. You can do this by clicking on the **+** sign at the top right, or by going to [https:\/\/github.com\/new](https:\/\/github.com\/new) \n\nWe then choose a name for the project (**hugo-wercker-example**). When clicking on create repository GitHub displays the commands for adding an existing project to the site. The commands shown below are the ones used for this site, if you're following along you will need to use the ones shown by GitHub. Once we've run those commands the project is in GitHub and we can move on to setting up the Wercker configuration.\n\n```bash\ngit remote add origin git@github.com:ArjenSchwarz\/hugo-wercker-example.git\ngit push -u origin master\n```\n\n![][2]\n\n[2]: \/img\/tutorials\/adding-the-project-to-github.png\n\n## Welcome to wercker\n\nLet's start by setting up an account for Wercker. To do so we'll go to http:\/\/wercker.com and click on the **register** link at the top-right corner.\n\n![][3]\n\n[3]: \/img\/tutorials\/welcome-to-wercker.png\n\n## Register\n\nTo make life easier for ourselves, we will then register using GitHub. If you don't have a GitHub account, or don't want to use it for your account, you can of course register with a username and password as well.\n\n![][4]\n\n[4]: \/img\/tutorials\/register.png\n\n## Connect GitHub\/Bitbucket\n\nAfter you are registered, you will need to link your GitHub and\/or Bitbucket account to Wercker. You do this by going to your profile settings, and then \"Git connections\" If you registered using GitHub it will most likely look like the below. To connect a missing service, simply click on the connect button which will then send you to either GitHub or Bitbucket where you might need to log in and approve their access to your account.\n\n![][5]\n\n[5]: \/img\/tutorials\/connect-github-bitbucket.png\n\n## Add your project\n\nNow that we've got all the preliminaries out of the way, it's time to set up our application. For this we click on the **+ Add** button next to Apps, and then we'll choose to use GitHub as our provider.\n\n![][6]\n\n[6]: \/img\/tutorials\/add-your-project.png\n\n## Select a repository\n\nClicking this will make Wercker show you all the repositories you have on GitHub, but you can easily filter them as well. So we search for our repository, select it, and then click on \"Use selected repo\".\n\n![][7]\n\n[7]: \/img\/tutorials\/select-a-repository.png\n\n## Configure access\n\nThis step can be slightly tricky. As Wercker doesn't access to check out your private projects by default it will ask you what you want to do. When your project is public, as needs to be the case if you wish to use GitHub Pages, the top choice is recommended. When you use this it will simply check out the code in the same way anybody visiting the project on GitHub can do.\n\n![][8]\n\n[8]: \/img\/tutorials\/configure-access.png\n\n## Wercker.yml\n\nWercker will now attempt to create an initial wercker.yml file for you. Or rather, it will create the code you can copy into it yourself. Because there is nothing special about our project according to Wercker, we will simply get the `wercker\/default` box. So what we do now is create a wercker.yml file in the root of our project that contains the provided configuration, and after we finish setting up the app we will expand this file to make it actually do something.\n\n![][9]\n\n[9]: \/img\/tutorials\/werckeryml.png\n\n## Public or not\n\nThis is a personal choice, you can make an app public so that everyone can see more details about it. This doesn't give you any real benefits either way in general, although as part of the tutorial I have of course made this app public so you can see it in action [yourself](https:\/\/app.wercker.com\/#applications\/54b1e45eda3a4af76406ece6).\n\n![][10]\n\n[10]: \/img\/tutorials\/public-or-not.png\n\n## And we've got an app\n\nThe application is added now, and Wercker will be offering you the chance to trigger a build. As we haven't pushed up the **wercker.yml** file however, we will politely decline this option.\n\n![][11]\n\n[11]: \/img\/tutorials\/and-we-ve-got-an-app.png\n\n## Adding steps\n\nAnd now we're going to add the steps themselves. First, we go to the \"Steps\" action in the sidebar and then search for hugo. The first result is the **Hugo-Build** task, which we select. \n\n![][12]\n\n[12]: \/img\/tutorials\/adding-steps.png\n\n## Using Hugo-Build\n\nInside the details of this step you will see how to use it. At the top is a summary for the very basic usage, but when scrolling down you go through the README of the step which will usually contain more details about how to use it including a full example of using the step. So we return to our project, and while making it fit our project better we add these details to our wercker.yml file so it looks like this. Wercker also has a [page](http:\/\/devcenter.wercker.com\/articles\/werckeryml\/validate.html) for validating wercker.yml files, and it's usually a good idea to do so before committing changes.\n\n```yaml\nbox: wercker\/default\nbuild:\n  steps:\n    - arjen\/hugo-build:\n        version: 0.12\n        theme: herring-cove\n        flags: --buildDrafts=true\n```\n\nThis concludes the first step, so we'll test that it all works as it should by pushing up our wercker.yml file and seeing the magic at work.\n\n```bash\ngit add wercker.yml\ngit commit -m \"Add wercker.yml\"\ngit push origin master\n```\n\nOnce completed a nice tick should have appeared in front of your first build, and if you want you can look at the details by clicking on it. However, we're not done yet as we still need to deploy it to GitHub Pages.\n\n![][13]\n\n[13]: \/img\/tutorials\/using-hugo-build.png\n\n## Adding a GitHub Pages step\n\nIn order to deploy to GitHub Pages we need to add a deploy step. Once again searching through the Steps repository we find that the most popular step is the **lukevevier\/gh-pages** step so we add the configuration for that to our wercker.yml file, which then becomes this:\n\n```yaml\nbox: wercker\/default\nbuild:\n  steps:\n    - arjen\/hugo-build:\n        version: 0.12\n        theme: herring-cove\n        flags: --buildDrafts=true\ndeploy:\n  steps:\n    - lukevivier\/gh-pages@0.2.1:\n        token: $GIT_TOKEN\n        domain: hugo-wercker.ig.nore.me\n        basedir: public\n```\n\nHow does this configuration work? We've selected a couple of things, first the domain we want to use for the site. Configuring this here will ensure that GitHub Pages is aware of the domain you want to use.\n\nSecondly we've configured the basedir to **public**, this is the directory that will be used as the website on GitHub Pages.\n\nAnd lastly, you can see here that this has a **$GIT_TOKEN** variable. This is used for pushing our changes up to GitHub and we will need to configure this before we can do that. We do this by going to our app's settings and clicking on **Deploy targets**. Now, we **Add deploy target** and select **Custom deploy**.\n\n![][14]\n\n[14]: \/img\/tutorials\/adding-a-github-pages-step.png\n\n## Configure the deploy step\n\nSimply fill in the name, and make sure you enable **auto deploy** from the **master** branch. Next you add a variable for the **GIT_TOKEN**, for this you'll need to create an access token in GitHub. How to do that is described on a [GitHub help page](https:\/\/help.github.com\/articles\/creating-an-access-token-for-command-line-use\/). With the deploy step configured in Wercker, we can push the updated wercker.yml file to GitHub and it will create the GitHub pages site for us. The example site we used here is accessible under hugo-wercker.ig.nore.me\n\n![][15]\n\n[15]: \/img\/tutorials\/configure-the-deploy-step.png\n\n## Conclusion\n\nFrom now on, any time you want to put a new post on your blog all you need to do is push your new page to GitHub and the rest will happen automatically. The source code for the example site used here is available on [GitHub](https:\/\/github.com\/ArjenSchwarz\/hugo-wercker-example), as is the [Hugo Build step](https:\/\/github.com\/ArjenSchwarz\/wercker-step-hugo-build) itself.\n\nIf you want to see an example of how you can deploy to S3 instead of GitHub pages, take a look at [Wercker's blogpost](http:\/\/blog.wercker.com\/2013\/06\/10\/Streamlining-Middleman-Deploys-to-s3.html) about how to set that up for Middleman.\n"}
{"Path":".\/tutorials\/dir3\/creating-a-new-theme.md","Content":"---\nauthor: \"Michael Henderson\"\ndate: 2014-09-28\nlinktitle: Creating a New Theme\nmenu:\n  main:\n    parent: tutorials\nnext: \/tutorials\/github-pages-blog\nprev: \/tutorials\/automated-deployments\ntitle: Creating a New Theme\nweight: 10\n---\n\n\n## Introduction\n\nThis tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I'll explain how Hugo uses templates and how you can organize your templates to create a theme. I won't cover using CSS to style your theme.\n\nWe'll start with creating a new site with a very basic template. Then we'll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.\n\nIn this tutorial, commands that you enter will start with the \"$\" prompt. The output will follow. Lines that start with \"#\" are comments that I've added to explain a point. When I show updates to a file, the \":wq\" on the last line means to save the file.\n\nHere's an example:\n\n```\n## this is a comment\n$ echo this is a command\nthis is a command\n\n## edit the file\n$vi foo.md\n+++\ndate = \"2014-09-28\"\ntitle = \"creating a new theme\"\n+++\n\nbah and humbug\n:wq\n\n## show it\n$ cat foo.md\n+++\ndate = \"2014-09-28\"\ntitle = \"creating a new theme\"\n+++\n\nbah and humbug\n$\n```\n\n\n## Some Definitions\n\nThere are a few concepts that you need to understand before creating a theme.\n\n### Skins\n\nSkins are the files responsible for the look and feel of your site. It\u2019s the CSS that controls colors and fonts, it\u2019s the Javascript that determines actions and reactions. It\u2019s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.\n\nYou have two ways to create a skin. The simplest way is to create it in the ```layouts\/``` directory. If you do, then you don\u2019t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the ```layouts\/``` directory so it will always find the skin.\n\nYour second choice is to create it in a sub-directory of the ```themes\/``` directory. If you do, then you must always tell Hugo where to search for the skin. It\u2019s extra work, though, so why bother with it?\n\nThe difference between creating a skin in ```layouts\/``` and creating it in ```themes\/``` is very subtle. A skin in ```layouts\/``` can\u2019t be customized without updating the templates and static files that it is built from. A skin created in ```themes\/```, on the other hand, can be and that makes it easier for other people to use it.\n\nThe rest of this tutorial will call a skin created in the ```themes\/``` directory a theme.\n\nNote that you can use this tutorial to create a skin in the ```layouts\/``` directory if you wish to. The main difference will be that you won\u2019t need to update the site\u2019s configuration file to use a theme.\n\n### The Home Page\n\nThe home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public\/ directory, our home page is public\/index.html.\n\n### Site Configuration File\n\nWhen Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you\u2019ll need to translate my examples. You\u2019ll also need to change the name of the file since Hugo uses the extension to determine how to process it.\n\nHugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your ```content\/``` directory and template files in your ```themes\/``` directory. It will create HTML files in your ```public\/``` directory. You can change this by specifying alternate locations in the configuration file.\n\n### Content\n\nContent is stored in text files that contain two sections. The first section is the \u201cfront matter,\u201d which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.\n\n#### Front Matter\n\nThe front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn\u2019t use the file\u2019s extension to know the format. It looks for markers to signal the type. TOML is surrounded by \u201c`+++`\u201d, YAML by \u201c`---`\u201d, and JSON is enclosed in curly braces. I prefer to use TOML, so you\u2019ll need to translate my examples if you prefer YAML or JSON.\n\nThe information in the front matter is passed into the template before the content is rendered into HTML.\n\n#### Markdown\n\nContent is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.\n\n### Template Files\n\nHugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it's published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.\n\nThere are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.\n\nHugo uses its knowledge of the content to find the template file used to render the content. If it can\u2019t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can\u2019t find a template, it will use the default template for the site.\n\nPlease note that you can use the front matter to influence Hugo\u2019s choice of templates.\n\n#### Single Template\n\nA single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.\n\n#### List Template\n\nA list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.\n\nThe homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.\n\n#### Partial Template\n\nA partial template is a template that can be included in other templates. Partial templates must be called using the \u201cpartial\u201d template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.\n\n## Create a New Site\n\nLet's use Hugo to create a new web site. I'm a Mac user, so I'll create mine in my home directory, in the Sites folder. If you're using Linux, you might have to create the folder first.\n\nThe \"new site\" command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.\n\n```\n$ hugo new site ~\/Sites\/zafta\n$ cd ~\/Sites\/zafta\n$ ls -l\ntotal 8\ndrwxr-xr-x  7 quoha  staff  238 Sep 29 16:49 .\ndrwxr-xr-x  3 quoha  staff  102 Sep 29 16:49 ..\ndrwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 archetypes\n-rw-r--r--  1 quoha  staff   82 Sep 29 16:49 config.toml\ndrwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 content\ndrwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 layouts\ndrwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 static\n$\n```\n\nTake a look in the content\/ directory to confirm that it is empty.\n\nThe other directories (archetypes\/, layouts\/, and static\/) are used when customizing a theme. That's a topic for a different tutorial, so please ignore them for now.\n\n### Generate the HTML For the New Site\n\nRunning the `hugo` command with no options will read all the available content and generate the HTML files. It will also copy all static files (that's everything that's not content). Since we have an empty site, it won't do much, but it will do it very quickly.\n\n```\n$ hugo --verbose\nINFO: 2014\/09\/29 Using config file: config.toml\nINFO: 2014\/09\/29 syncing from \/Users\/quoha\/Sites\/zafta\/static\/ to \/Users\/quoha\/Sites\/zafta\/public\/\nWARN: 2014\/09\/29 Unable to locate layout: [index.html _default\/list.html _default\/single.html]\nWARN: 2014\/09\/29 Unable to locate layout: [404.html]\n0 draft content \n0 future content \n0 pages created \n0 tags created\n0 categories created\nin 2 ms\n$ \n```\n\nThe \"`--verbose`\" flag gives extra information that will be helpful when we build the template. Every line of the output that starts with \"INFO:\" or \"WARN:\" is present because we used that flag. The lines that start with \"WARN:\" are warning messages. We'll go over them later.\n\nWe can verify that the command worked by looking at the directory again.\n\n```\n$ ls -l\ntotal 8\ndrwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 archetypes\n-rw-r--r--  1 quoha  staff   82 Sep 29 16:49 config.toml\ndrwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 content\ndrwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 layouts\ndrwxr-xr-x  4 quoha  staff  136 Sep 29 17:02 public\ndrwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 static\n$\n```\n\nSee that new public\/ directory? Hugo placed all generated content there. When you're ready to publish your web site, that's the place to start. For now, though, let's just confirm that we have what we'd expect from a site with no content.\n\n```\n$ ls -l public\ntotal 16\n-rw-r--r--  1 quoha  staff  416 Sep 29 17:02 index.xml\n-rw-r--r--  1 quoha  staff  262 Sep 29 17:02 sitemap.xml\n$ \n```\n\nHugo created two XML files, which is standard, but there are no HTML files.\n\n\n\n### Test the New Site\n\nVerify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the \"server\" command. If it is successful, you will see output similar to the following:\n\n```\n$ hugo server --verbose\nINFO: 2014\/09\/29 Using config file: \/Users\/quoha\/Sites\/zafta\/config.toml\nINFO: 2014\/09\/29 syncing from \/Users\/quoha\/Sites\/zafta\/static\/ to \/Users\/quoha\/Sites\/zafta\/public\/\nWARN: 2014\/09\/29 Unable to locate layout: [index.html _default\/list.html _default\/single.html]\nWARN: 2014\/09\/29 Unable to locate layout: [404.html]\n0 draft content \n0 future content \n0 pages created \n0 tags created\n0 categories created\nin 2 ms\nServing pages from \/Users\/quoha\/Sites\/zafta\/public\nWeb Server is available at http:\/\/localhost:1313\nPress ctrl+c to stop\n```\n\nConnect to the listed URL (it's on the line that starts with \"Web Server\"). If everything is working correctly, you should get a page that shows the following:\n\n```\nindex.xml\nsitemap.xml\n```\n\nThat's a listing of your public\/ directory. Hugo didn't create a home page because our site has no content. When there's no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.\n\nLet\u2019s go back and look at those warnings again.\n\n```\nWARN: 2014\/09\/29 Unable to locate layout: [index.html _default\/list.html _default\/single.html]\nWARN: 2014\/09\/29 Unable to locate layout: [404.html]\n```\n\nThat second warning is easier to explain. We haven\u2019t created a template to be used to generate \u201cpage not found errors.\u201d The 404 message is a topic for a separate tutorial.\n\nNow for the first warning. It is for the home page. You can tell because the first layout that it looked for was \u201cindex.html.\u201d That\u2019s only used by the home page.\n\nI like that the verbose flag causes Hugo to list the files that it's searching for. For the home page, they are index.html, _default\/list.html, and _default\/single.html. There are some rules that we'll cover later that explain the names and paths. For now, just remember that Hugo couldn't find a template for the home page and it told you so.\n\nAt this point, you've got a working installation and site that we can build upon. All that\u2019s left is to add some content and a theme to display it.\n\n## Create a New Theme\n\nHugo doesn't ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.\n\nWe're going to create a new theme called \"zafta.\" Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.\n\nAll themes have opinions on content and layout. For example, Zafta uses \"post\" over \"blog\". Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.\n\n\n### Create a Skeleton\n\nUse the hugo \"new\" command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.\n\n```\n$ hugo new theme zafta\n\n$ ls -l\ntotal 8\ndrwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 archetypes\n-rw-r--r--  1 quoha  staff   82 Sep 29 16:49 config.toml\ndrwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 content\ndrwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 layouts\ndrwxr-xr-x  4 quoha  staff  136 Sep 29 17:02 public\ndrwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 static\ndrwxr-xr-x  3 quoha  staff  102 Sep 29 17:31 themes\n\n$ find themes -type f | xargs ls -l\n-rw-r--r--  1 quoha  staff  1081 Sep 29 17:31 themes\/zafta\/LICENSE.md\n-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes\/zafta\/archetypes\/default.md\n-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes\/zafta\/layouts\/_default\/list.html\n-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes\/zafta\/layouts\/_default\/single.html\n-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes\/zafta\/layouts\/index.html\n-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes\/zafta\/layouts\/partials\/footer.html\n-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes\/zafta\/layouts\/partials\/header.html\n-rw-r--r--  1 quoha  staff    93 Sep 29 17:31 themes\/zafta\/theme.toml\n$ \n```\n\nThe skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.\n\nPlease take a minute to fill out the theme.toml and LICENSE.md files. They're optional, but if you're going to be distributing your theme, it tells the world who to praise (or blame). It's also nice to declare the license so that people will know how they can use the theme.\n\n```\n$ vi themes\/zafta\/theme.toml\nauthor = \"michael d henderson\"\ndescription = \"a minimal working template\"\nlicense = \"MIT\"\nname = \"zafta\"\nsource_repo = \"\"\ntags = [\"tags\", \"categories\"]\n:wq\n\n## also edit themes\/zafta\/LICENSE.md and change\n## the bit that says \"YOUR_NAME_HERE\"\n```\n\nNote that the the skeleton's template files are empty. Don't worry, we'll be changing that shortly.\n\n```\n$ find themes\/zafta -name '*.html' | xargs ls -l\n-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes\/zafta\/layouts\/_default\/list.html\n-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes\/zafta\/layouts\/_default\/single.html\n-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes\/zafta\/layouts\/index.html\n-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes\/zafta\/layouts\/partials\/footer.html\n-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes\/zafta\/layouts\/partials\/header.html\n$\n```\n\n\n\n### Update the Configuration File to Use the Theme\n\nNow that we've got a theme to work with, it's a good idea to add the theme name to the configuration file. This is optional, because you can always add \"-t zafta\" on all your commands. I like to put it the configuration file because I like shorter command lines. If you don't put it in the configuration file or specify it on the command line, you won't use the template that you're expecting to.\n\nEdit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.\n\n```\n$ vi config.toml\ntheme = \"zafta\"\nbaseurl = \"\"\nlanguageCode = \"en-us\"\ntitle = \"zafta - totally refreshing\"\nMetaDataFormat = \"toml\"\n:wq\n\n$\n```\n\n### Generate the Site\n\nNow that we have an empty theme, let's generate the site again.\n\n```\n$ hugo --verbose\nINFO: 2014\/09\/29 Using config file: \/Users\/quoha\/Sites\/zafta\/config.toml\nINFO: 2014\/09\/29 syncing from \/Users\/quoha\/Sites\/zafta\/themes\/zafta\/static\/ to \/Users\/quoha\/Sites\/zafta\/public\/\nINFO: 2014\/09\/29 syncing from \/Users\/quoha\/Sites\/zafta\/static\/ to \/Users\/quoha\/Sites\/zafta\/public\/\nWARN: 2014\/09\/29 Unable to locate layout: [404.html theme\/404.html]\n0 draft content \n0 future content \n0 pages created \n0 tags created\n0 categories created\nin 2 ms\n$\n```\n\nDid you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme's directory.\n\nLet's check the public\/ directory to see what Hugo's created.\n\n```\n$ ls -l public\ntotal 16\ndrwxr-xr-x  2 quoha  staff   68 Sep 29 17:56 css\n-rw-r--r--  1 quoha  staff    0 Sep 29 17:56 index.html\n-rw-r--r--  1 quoha  staff  407 Sep 29 17:56 index.xml\ndrwxr-xr-x  2 quoha  staff   68 Sep 29 17:56 js\n-rw-r--r--  1 quoha  staff  243 Sep 29 17:56 sitemap.xml\n$\n```\n\nNotice four things:\n\n1. Hugo created a home page. This is the file public\/index.html.\n2. Hugo created a css\/ directory.\n3. Hugo created a js\/ directory.\n4. Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn't create any pages. That's because it considers a \"page\" to be a file created directly from a content file. It doesn't count things like the index.html files that it creates automatically.\n\n#### The Home Page\n\nHugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts\/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo's warning message shows that it looks for three different templates:\n\n```\nWARN: 2014\/09\/29 Unable to locate layout: [index.html _default\/list.html _default\/single.html]\n```\n\nIf it can't find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.\n\nWhen Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.\n\n```\n$ find . -name index.html | xargs ls -l\n-rw-r--r--  1 quoha  staff  0 Sep 29 20:21 .\/public\/index.html\n-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 .\/themes\/zafta\/layouts\/index.html\n$ \n```\n\n#### The Magic of Static\n\nHugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.\n\nHugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo's opinion is that you'll store your CSS in a directory named css\/ and your JavaScript in a directory named js\/. If you don't like that, you can change the directory names in your theme directory or even delete them completely. Hugo's nice enough to offer its opinion, then behave nicely if you disagree.\n\n```\n$ find themes\/zafta -type d | xargs ls -ld\ndrwxr-xr-x  7 quoha  staff  238 Sep 29 17:38 themes\/zafta\ndrwxr-xr-x  3 quoha  staff  102 Sep 29 17:31 themes\/zafta\/archetypes\ndrwxr-xr-x  5 quoha  staff  170 Sep 29 17:31 themes\/zafta\/layouts\ndrwxr-xr-x  4 quoha  staff  136 Sep 29 17:31 themes\/zafta\/layouts\/_default\ndrwxr-xr-x  4 quoha  staff  136 Sep 29 17:31 themes\/zafta\/layouts\/partials\ndrwxr-xr-x  4 quoha  staff  136 Sep 29 17:31 themes\/zafta\/static\ndrwxr-xr-x  2 quoha  staff   68 Sep 29 17:31 themes\/zafta\/static\/css\ndrwxr-xr-x  2 quoha  staff   68 Sep 29 17:31 themes\/zafta\/static\/js\n$ \n```\n\n## The Theme Development Cycle\n\nWhen you're working on a theme, you will make changes in the theme's directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:\n\n1. Purge the public\/ directory.\n2. Run the built in web server in watch mode.\n3. Open your site in a browser.\n4. Update the theme.\n5. Glance at your browser window to see changes.\n6. Return to step 4.\n\nI\u2019ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.\n\nCheck the main Hugo site for information on using Git with Hugo.\n\n### Purge the public\/ Directory\n\nWhen generating the site, Hugo will create new files and update existing ones in the ```public\/``` directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.\n\nNote: If you're building on an SSD, you should ignore this. Churning on a SSD can be costly.\n\n### Hugo's Watch Option\n\nHugo's \"`--watch`\" option will monitor the content\/ and your theme directories for changes and rebuild the site automatically.\n\n### Live Reload\n\nHugo's built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, \"Wow, that's totally amazing.\"\n\n### Development Commands\n\nUse the following commands as the basis for your workflow.\n\n```\n## purge old files. hugo will recreate the public directory.\n##\n$ rm -rf public\n##\n## run hugo in watch mode\n##\n$ hugo server --watch --verbose\n```\n\nHere's sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I've said this before, it's amazing.\n\n\n```\n$ rm -rf public\n$ hugo server --watch --verbose\nINFO: 2014\/09\/29 Using config file: \/Users\/quoha\/Sites\/zafta\/config.toml\nINFO: 2014\/09\/29 syncing from \/Users\/quoha\/Sites\/zafta\/themes\/zafta\/static\/ to \/Users\/quoha\/Sites\/zafta\/public\/\nINFO: 2014\/09\/29 syncing from \/Users\/quoha\/Sites\/zafta\/static\/ to \/Users\/quoha\/Sites\/zafta\/public\/\nWARN: 2014\/09\/29 Unable to locate layout: [404.html theme\/404.html]\n0 draft content \n0 future content \n0 pages created \n0 tags created\n0 categories created\nin 2 ms\nWatching for changes in \/Users\/quoha\/Sites\/zafta\/content\nServing pages from \/Users\/quoha\/Sites\/zafta\/public\nWeb Server is available at http:\/\/localhost:1313\nPress ctrl+c to stop\nINFO: 2014\/09\/29 File System Event: [\"\/Users\/quoha\/Sites\/zafta\/themes\/zafta\/layouts\/index.html\": MODIFY|ATTRIB]\nChange detected, rebuilding site\n\nWARN: 2014\/09\/29 Unable to locate layout: [404.html theme\/404.html]\n0 draft content \n0 future content \n0 pages created \n0 tags created\n0 categories created\nin 1 ms\n```\n\n## Update the Home Page Template\n\nThe home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme's layout\/ directory:\n\n1. index.html\n2. _default\/list.html\n3. _default\/single.html\n\nWe could update one of the default templates, but a good design decision is to update the most specific template available. That's not a hard and fast rule (in fact, we'll break it a few times in this tutorial), but it is a good generalization.\n\n### Make a Static Home Page\n\nRight now, that page is empty because we don't have any content and we don't have any logic in the template. Let's change that by adding some text to the template.\n\n```\n$ vi themes\/zafta\/layouts\/index.html\n<!DOCTYPE html> \n<html> \n<body> \n  <p>hugo says hello!<\/p> \n<\/body> \n<\/html> \n:wq\n\n$\n```\n\nBuild the web site and then verify the results.\n\n```\n$ hugo --verbose\nINFO: 2014\/09\/29 Using config file: \/Users\/quoha\/Sites\/zafta\/config.toml\nINFO: 2014\/09\/29 syncing from \/Users\/quoha\/Sites\/zafta\/themes\/zafta\/static\/ to \/Users\/quoha\/Sites\/zafta\/public\/\nINFO: 2014\/09\/29 syncing from \/Users\/quoha\/Sites\/zafta\/static\/ to \/Users\/quoha\/Sites\/zafta\/public\/\nWARN: 2014\/09\/29 Unable to locate layout: [404.html theme\/404.html]\n0 draft content \n0 future content \n0 pages created \n0 tags created\n0 categories created\nin 2 ms\n\n$ find public -type f -name '*.html' | xargs ls -l\n-rw-r--r--  1 quoha  staff  78 Sep 29 21:26 public\/index.html\n\n$ cat public\/index.html \n<!DOCTYPE html> \n<html> \n<body> \n  <p>hugo says hello!<\/p> \n<\/html>\n```\n\n#### Live Reload\n\nNote: If you're running the server with the `--watch` option, you'll see different content in the file:\n\n```\n$ cat public\/index.html \n<!DOCTYPE html> \n<html> \n<body> \n  <p>hugo says hello!<\/p> \n<script>document.write('<script src=\"http:\/\/' \n        + (location.host || 'localhost').split(':')[0] \n    + ':1313\/livereload.js?mindelay=10\"><\/' \n        + 'script>')<\/script><\/body> \n<\/html>\n```\n\nWhen you use `--watch`, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.\n\n### Build a \"Dynamic\" Home Page\n\n\"Dynamic home page?\" Hugo's a static web site generator, so this seems an odd thing to say. I mean let's have the home page automatically reflect the content in the site every time Hugo builds it. We'll use iteration in the template to do that.\n\n#### Create New Posts\n\nNow that we have the home page generating static content, let's add some content to the site. We'll display these posts as a list on the home page and on their own page, too.\n\nHugo has a command to generate a skeleton post, just like it does for sites and themes.\n\n```\n$ hugo --verbose new post\/first.md\nINFO: 2014\/09\/29 Using config file: \/Users\/quoha\/Sites\/zafta\/config.toml\nINFO: 2014\/09\/29 attempting to create  post\/first.md of post\nINFO: 2014\/09\/29 curpath: \/Users\/quoha\/Sites\/zafta\/themes\/zafta\/archetypes\/default.md\nERROR: 2014\/09\/29 Unable to Cast <nil> to map[string]interface{}\n\n$ \n```\n\nThat wasn't very nice, was it?\n\nThe \"new\" command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there's a theme. For me, the workaround was to create an archetypes file specifically for the post type.\n\n```\n$ vi themes\/zafta\/archetypes\/post.md\n+++\nDescription = \"\"\nTags = []\nCategories = []\n+++\n:wq\n\n$ find themes\/zafta\/archetypes -type f | xargs ls -l\n-rw-r--r--  1 quoha  staff   0 Sep 29 21:53 themes\/zafta\/archetypes\/default.md\n-rw-r--r--  1 quoha  staff  51 Sep 29 21:54 themes\/zafta\/archetypes\/post.md\n\n$ hugo --verbose new post\/first.md\nINFO: 2014\/09\/29 Using config file: \/Users\/quoha\/Sites\/zafta\/config.toml\nINFO: 2014\/09\/29 attempting to create  post\/first.md of post\nINFO: 2014\/09\/29 curpath: \/Users\/quoha\/Sites\/zafta\/themes\/zafta\/archetypes\/post.md\nINFO: 2014\/09\/29 creating \/Users\/quoha\/Sites\/zafta\/content\/post\/first.md\n\/Users\/quoha\/Sites\/zafta\/content\/post\/first.md created\n\n$ hugo --verbose new post\/second.md\nINFO: 2014\/09\/29 Using config file: \/Users\/quoha\/Sites\/zafta\/config.toml\nINFO: 2014\/09\/29 attempting to create  post\/second.md of post\nINFO: 2014\/09\/29 curpath: \/Users\/quoha\/Sites\/zafta\/themes\/zafta\/archetypes\/post.md\nINFO: 2014\/09\/29 creating \/Users\/quoha\/Sites\/zafta\/content\/post\/second.md\n\/Users\/quoha\/Sites\/zafta\/content\/post\/second.md created\n\n$ ls -l content\/post\ntotal 16\n-rw-r--r--  1 quoha  staff  104 Sep 29 21:54 first.md\n-rw-r--r--  1 quoha  staff  105 Sep 29 21:57 second.md\n\n$ cat content\/post\/first.md \n+++\nCategories = []\nDescription = \"\"\nTags = []\ndate = \"2014-09-29T21:54:53-05:00\"\ntitle = \"first\"\n\n+++\nmy first post\n\n$ cat content\/post\/second.md \n+++\nCategories = []\nDescription = \"\"\nTags = []\ndate = \"2014-09-29T21:57:09-05:00\"\ntitle = \"second\"\n\n+++\nmy second post\n\n$ \n```\n\nBuild the web site and then verify the results.\n\n```\n$ rm -rf public\n$ hugo --verbose\nINFO: 2014\/09\/29 Using config file: \/Users\/quoha\/Sites\/zafta\/config.toml\nINFO: 2014\/09\/29 syncing from \/Users\/quoha\/Sites\/zafta\/themes\/zafta\/static\/ to \/Users\/quoha\/Sites\/zafta\/public\/\nINFO: 2014\/09\/29 syncing from \/Users\/quoha\/Sites\/zafta\/static\/ to \/Users\/quoha\/Sites\/zafta\/public\/\nINFO: 2014\/09\/29 found taxonomies: map[string]string{\"category\":\"categories\", \"tag\":\"tags\"}\nWARN: 2014\/09\/29 Unable to locate layout: [404.html theme\/404.html]\n0 draft content \n0 future content \n2 pages created \n0 tags created\n0 categories created\nin 4 ms\n$\n```\n\nThe output says that it created 2 pages. Those are our new posts:\n\n```\n$ find public -type f -name '*.html' | xargs ls -l\n-rw-r--r--  1 quoha  staff  78 Sep 29 22:13 public\/index.html\n-rw-r--r--  1 quoha  staff   0 Sep 29 22:13 public\/post\/first\/index.html\n-rw-r--r--  1 quoha  staff   0 Sep 29 22:13 public\/post\/index.html\n-rw-r--r--  1 quoha  staff   0 Sep 29 22:13 public\/post\/second\/index.html\n$\n```\n\nThe new files are empty because because the templates used to generate the content are empty. The homepage doesn't show the new content, either. We have to update the templates to add the posts.\n\n### List and Single Templates\n\nIn Hugo, we have three major kinds of templates. There's the home page template that we updated previously. It is used only by the home page. We also have \"single\" templates which are used to generate output for a single content file. We also have \"list\" templates that are used to group multiple pieces of content before generating output.\n\nGenerally speaking, list templates are named \"list.html\" and single templates are named \"single.html.\"\n\nThere are three other types of templates: partials, content views, and terms. We will not go into much detail on these.\n\n### Add Content to the Homepage\n\nThe home page will contain a list of posts. Let's update its template to add the posts that we just created. The logic in the template will run every time we build the site.\n\n```\n$ vi themes\/zafta\/layouts\/index.html \n<!DOCTYPE html>\n<html>\n<body>\n   range first 10 .Data.Pages \n    <h1> .Title <\/h1>\n   end \n<\/body>\n<\/html>\n:wq\n\n$\n```\n\nHugo uses the Go template engine. That engine scans the template files for commands which are enclosed between \"\" and \"\". In our template, the commands are:\n\n1. range\n2. .Title\n3. end\n\nThe \"range\" command is an iterator. We're going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.\n\nThe \".Title\" command prints the value of the \"title\" variable. Hugo pulls it from the front matter in the Markdown file.\n\nThe \"end\" command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds \"end.\" Everything between the \"range\" and \"end\" is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.\n\nIt's helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.\n\nBuild the web site and then verify the results.\n\n```\n$ rm -rf public\n$ hugo --verbose\nINFO: 2014\/09\/29 Using config file: \/Users\/quoha\/Sites\/zafta\/config.toml\nINFO: 2014\/09\/29 syncing from \/Users\/quoha\/Sites\/zafta\/themes\/zafta\/static\/ to \/Users\/quoha\/Sites\/zafta\/public\/\nINFO: 2014\/09\/29 syncing from \/Users\/quoha\/Sites\/zafta\/static\/ to \/Users\/quoha\/Sites\/zafta\/public\/\nINFO: 2014\/09\/29 found taxonomies: map[string]string{\"tag\":\"tags\", \"category\":\"categories\"}\nWARN: 2014\/09\/29 Unable to locate layout: [404.html theme\/404.html]\n0 draft content \n0 future content \n2 pages created \n0 tags created\n0 categories created\nin 4 ms\n$ find public -type f -name '*.html' | xargs ls -l \n-rw-r--r--  1 quoha  staff  94 Sep 29 22:23 public\/index.html\n-rw-r--r--  1 quoha  staff   0 Sep 29 22:23 public\/post\/first\/index.html\n-rw-r--r--  1 quoha  staff   0 Sep 29 22:23 public\/post\/index.html\n-rw-r--r--  1 quoha  staff   0 Sep 29 22:23 public\/post\/second\/index.html\n$ cat public\/index.html \n<!DOCTYPE html>\n<html>\n<body>\n  \n    <h1>second<\/h1>\n  \n    <h1>first<\/h1>\n  \n<\/body>\n<\/html>\n$\n```\n\nCongratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let's take a moment to appreciate what we've done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you've learned everything you need to know to build a theme. All that's really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.\n\nAnd, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don't worry, though, that's all to come.\n\n### Add Content to the Posts\n\nWe're working with posts, which are in the content\/post\/ directory. That means that their section is \"post\" (and if we don't do something weird, their type is also \"post\").\n\nHugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can't find one, then it will look in the _default\/ directory. There are some twists that we'll cover when we get to categories and tags, but for now we can assume that Hugo will try post\/single.html, then _default\/single.html.\n\nNow that we know the search rule, let's see what we actually have available:\n\n```\n$ find themes\/zafta -name single.html | xargs ls -l\n-rw-r--r--  1 quoha  staff  132 Sep 29 17:31 themes\/zafta\/layouts\/_default\/single.html\n```\n\nWe could create a new template, post\/single.html, or change the default. Since we don't know of any other content types, let's start with updating the default.\n\nRemember, any content that we haven't created a template for will end up using this template. That can be good or bad. Bad because I know that we're going to be adding different types of content and we're going to end up undoing some of the changes we've made. It's good because we'll be able to see immediate results. It's also good to start here because we can start to build the basic layout for the site. As we add more content types, we'll refactor this file and move logic around. Hugo makes that fairly painless, so we'll accept the cost and proceed.\n\nPlease see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you're building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That's a refreshing amount of joy right there.\n\n#### Update the Template File\n\n```\n$ vi themes\/zafta\/layouts\/_default\/single.html \n<!DOCTYPE html>\n<html>\n<head>\n  <title> .Title <\/title>\n<\/head>\n<body>\n  <h1> .Title <\/h1>\n   .Content \n<\/body>\n<\/html>\n:wq\n\n$\n```\n\nBuild the web site and verify the results.\n\n```\n$ rm -rf public\n$ hugo --verbose\nINFO: 2014\/09\/29 Using config file: \/Users\/quoha\/Sites\/zafta\/config.toml\nINFO: 2014\/09\/29 syncing from \/Users\/quoha\/Sites\/zafta\/themes\/zafta\/static\/ to \/Users\/quoha\/Sites\/zafta\/public\/\nINFO: 2014\/09\/29 syncing from \/Users\/quoha\/Sites\/zafta\/static\/ to \/Users\/quoha\/Sites\/zafta\/public\/\nINFO: 2014\/09\/29 found taxonomies: map[string]string{\"tag\":\"tags\", \"category\":\"categories\"}\nWARN: 2014\/09\/29 Unable to locate layout: [404.html theme\/404.html]\n0 draft content \n0 future content \n2 pages created \n0 tags created\n0 categories created\nin 4 ms\n\n$ find public -type f -name '*.html' | xargs ls -l\n-rw-r--r--  1 quoha  staff   94 Sep 29 22:40 public\/index.html\n-rw-r--r--  1 quoha  staff  125 Sep 29 22:40 public\/post\/first\/index.html\n-rw-r--r--  1 quoha  staff    0 Sep 29 22:40 public\/post\/index.html\n-rw-r--r--  1 quoha  staff  128 Sep 29 22:40 public\/post\/second\/index.html\n\n$ cat public\/post\/first\/index.html \n<!DOCTYPE html>\n<html>\n<head>\n  <title>first<\/title>\n<\/head>\n<body>\n  <h1>first<\/h1>\n  <p>my first post<\/p>\n\n<\/body>\n<\/html>\n\n$ cat public\/post\/second\/index.html \n<!DOCTYPE html>\n<html>\n<head>\n  <title>second<\/title>\n<\/head>\n<body>\n  <h1>second<\/h1>\n  <p>my second post<\/p>\n\n<\/body>\n<\/html>\n$\n```\n\nNotice that the posts now have content. You can go to localhost:1313\/post\/first to verify.\n\n### Linking to Content\n\nThe posts are on the home page. Let's add a link from there to the post. Since this is the home page, we'll update its template.\n\n```\n$ vi themes\/zafta\/layouts\/index.html\n<!DOCTYPE html>\n<html>\n<body>\n   range first 10 .Data.Pages \n    <h1><a href=\" .Permalink \"> .Title <\/a><\/h1>\n   end \n<\/body>\n<\/html>\n```\n\nBuild the web site and verify the results.\n\n```\n$ rm -rf public\n$ hugo --verbose\nINFO: 2014\/09\/29 Using config file: \/Users\/quoha\/Sites\/zafta\/config.toml\nINFO: 2014\/09\/29 syncing from \/Users\/quoha\/Sites\/zafta\/themes\/zafta\/static\/ to \/Users\/quoha\/Sites\/zafta\/public\/\nINFO: 2014\/09\/29 syncing from \/Users\/quoha\/Sites\/zafta\/static\/ to \/Users\/quoha\/Sites\/zafta\/public\/\nINFO: 2014\/09\/29 found taxonomies: map[string]string{\"tag\":\"tags\", \"category\":\"categories\"}\nWARN: 2014\/09\/29 Unable to locate layout: [404.html theme\/404.html]\n0 draft content \n0 future content \n2 pages created \n0 tags created\n0 categories created\nin 4 ms\n\n$ find public -type f -name '*.html' | xargs ls -l\n-rw-r--r--  1 quoha  staff  149 Sep 29 22:44 public\/index.html\n-rw-r--r--  1 quoha  staff  125 Sep 29 22:44 public\/post\/first\/index.html\n-rw-r--r--  1 quoha  staff    0 Sep 29 22:44 public\/post\/index.html\n-rw-r--r--  1 quoha  staff  128 Sep 29 22:44 public\/post\/second\/index.html\n\n$ cat public\/index.html \n<!DOCTYPE html>\n<html>\n<body>\n  \n    <h1><a href=\"\/post\/second\/\">second<\/a><\/h1>\n  \n    <h1><a href=\"\/post\/first\/\">first<\/a><\/h1>\n  \n<\/body>\n<\/html>\n\n$\n```\n\n### Create a Post Listing\n\nWe have the posts displaying on the home page and on their own page. We also have a file public\/post\/index.html that is empty. Let's make it show a list of all posts (not just the first ten).\n\nWe need to decide which template to update. This will be a listing, so it should be a list template. Let's take a quick look and see which list templates are available.\n\n```\n$ find themes\/zafta -name list.html | xargs ls -l\n-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes\/zafta\/layouts\/_default\/list.html\n```\n\nAs with the single post, we have to decide to update _default\/list.html or create post\/list.html. We still don't have multiple content types, so let's stay consistent and update the default list template.\n\n## Creating Top Level Pages\n\nLet's add an \"about\" page and display it at the top level (as opposed to a sub-level like we did with posts).\n\nThe default in Hugo is to use the directory structure of the content\/ directory to guide the location of the generated html in the public\/ directory. Let's verify that by creating an \"about\" page at the top level:\n\n```\n$ vi content\/about.md \n+++\ntitle = \"about\"\ndescription = \"about this site\"\ndate = \"2014-09-27\"\nslug = \"about time\"\n+++\n\n## about us\n\ni'm speechless\n:wq\n```\n\nGenerate the web site and verify the results.\n\n```\n$ find public -name '*.html' | xargs ls -l\n-rw-rw-r--  1 mdhender  staff   334 Sep 27 15:08 public\/about-time\/index.html\n-rw-rw-r--  1 mdhender  staff   527 Sep 27 15:08 public\/index.html\n-rw-rw-r--  1 mdhender  staff   358 Sep 27 15:08 public\/post\/first-post\/index.html\n-rw-rw-r--  1 mdhender  staff     0 Sep 27 15:08 public\/post\/index.html\n-rw-rw-r--  1 mdhender  staff   342 Sep 27 15:08 public\/post\/second-post\/index.html\n```\n\nNotice that the page wasn't created at the top level. It was created in a sub-directory named 'about-time\/'. That name came from our slug. Hugo will use the slug to name the generated content. It's a reasonable default, by the way, but we can learn a few things by fighting it for this file.\n\nOne other thing. Take a look at the home page.\n\n```\n$ cat public\/index.html\n<!DOCTYPE html>\n<html>\n<body>\n    <h1><a href=\"http:\/\/localhost:1313\/post\/theme\/\">creating a new theme<\/a><\/h1>\n    <h1><a href=\"http:\/\/localhost:1313\/about-time\/\">about<\/a><\/h1>\n    <h1><a href=\"http:\/\/localhost:1313\/post\/second-post\/\">second<\/a><\/h1>\n    <h1><a href=\"http:\/\/localhost:1313\/post\/first-post\/\">first<\/a><\/h1>\n<script>document.write('<script src=\"http:\/\/'\n        + (location.host || 'localhost').split(':')[0]\n\t\t+ ':1313\/livereload.js?mindelay=10\"><\/'\n        + 'script>')<\/script><\/body>\n<\/html>\n```\n\nNotice that the \"about\" link is listed with the posts? That's not desirable, so let's change that first.\n\n```\n$ vi themes\/zafta\/layouts\/index.html\n<!DOCTYPE html>\n<html>\n<body>\n  <h1>posts<\/h1>\n   range first 10 .Data.Pages \n     if eq .Type \"post\"\n      <h2><a href=\" .Permalink \"> .Title <\/a><\/h2>\n     end \n   end \n\n  <h1>pages<\/h1>\n   range .Data.Pages \n     if eq .Type \"page\" \n      <h2><a href=\" .Permalink \"> .Title <\/a><\/h2>\n     end \n   end \n<\/body>\n<\/html>\n:wq\n```\n\nGenerate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.\n\nBut, that about page still renders to about-time\/index.html.\n\n```\n$ find public -name '*.html' | xargs ls -l\n-rw-rw-r--  1 mdhender  staff    334 Sep 27 15:33 public\/about-time\/index.html\n-rw-rw-r--  1 mdhender  staff    645 Sep 27 15:33 public\/index.html\n-rw-rw-r--  1 mdhender  staff    358 Sep 27 15:33 public\/post\/first-post\/index.html\n-rw-rw-r--  1 mdhender  staff      0 Sep 27 15:33 public\/post\/index.html\n-rw-rw-r--  1 mdhender  staff    342 Sep 27 15:33 public\/post\/second-post\/index.html\n```\n\nKnowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let's do it the hard way and change the permalink in the configuration file.\n\n```\n$ vi config.toml\n[permalinks]\n\tpage = \"\/:title\/\"\n\tabout = \"\/:filename\/\"\n```\n\nGenerate the web site and verify that this didn't work. Hugo lets \"slug\" or \"URL\" override the permalinks setting in the configuration file. Go ahead and comment out the slug in content\/about.md, then generate the web site to get it to be created in the right place.\n\n## Sharing Templates\n\nIf you've been following along, you probably noticed that posts have titles in the browser and the home page doesn't. That's because we didn't put the title in the home page's template (layouts\/index.html). That's an easy thing to do, but let's look at a different option.\n\nWe can put the common bits into a shared template that's stored in the themes\/zafta\/layouts\/partials\/ directory.\n\n### Create the Header and Footer Partials\n\nIn Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme's presentation.\n\n```\n$ vi themes\/zafta\/layouts\/partials\/header.html\n<!DOCTYPE html>\n<html>\n<head>\n\t<title> .Title <\/title>\n<\/head>\n<body>\n:wq\n\n$ vi themes\/zafta\/layouts\/partials\/footer.html\n<\/body>\n<\/html>\n:wq\n```\n\n### Update the Home Page Template to Use the Partials\n\nThe most noticeable difference between a template call and a partials call is the lack of path:\n\n```\n template \"theme\/partials\/header.html\" . \n```\nversus\n```\n partial \"header.html\" . \n```\nBoth pass in the context.\n\nLet's change the home page template to use these new partials.\n\n```\n$ vi themes\/zafta\/layouts\/index.html\n partial \"header.html\" . \n\n  <h1>posts<\/h1>\n   range first 10 .Data.Pages \n     if eq .Type \"post\"\n      <h2><a href=\" .Permalink \"> .Title <\/a><\/h2>\n     end \n   end \n\n  <h1>pages<\/h1>\n   range .Data.Pages \n     if or (eq .Type \"page\") (eq .Type \"about\") \n      <h2><a href=\" .Permalink \"> .Type  -  .Title  -  .RelPermalink <\/a><\/h2>\n     end \n   end \n\n partial \"footer.html\" . \n:wq\n```\n\nGenerate the web site and verify the results. The title on the home page is now \"your title here\", which comes from the \"title\" variable in the config.toml file.\n\n### Update the Default Single Template to Use the Partials\n\n```\n$ vi themes\/zafta\/layouts\/_default\/single.html\n partial \"header.html\" . \n\n  <h1> .Title <\/h1>\n   .Content \n\n partial \"footer.html\" . \n:wq\n```\n\nGenerate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.\n\n## Add \u201cDate Published\u201d to Posts\n\nIt's common to have posts display the date that they were written or published, so let's add that. The front matter of our posts has a variable named \"date.\" It's usually the date the content was created, but let's pretend that's the value we want to display.\n\n### Add \u201cDate Published\u201d to the Template\n\nWe'll start by updating the template used to render the posts. The template code will look like:\n\n```\n .Date.Format \"Mon, Jan 2, 2006\" \n```\n\nPosts use the default single template, so we'll change that file.\n\n```\n$ vi themes\/zafta\/layouts\/_default\/single.html\n partial \"header.html\" . \n\n  <h1> .Title <\/h1>\n  <h2> .Date.Format \"Mon, Jan 2, 2006\" <\/h2>\n   .Content \n\n partial \"footer.html\" . \n:wq\n```\n\nGenerate the web site and verify the results. The posts now have the date displayed in them. There's a problem, though. The \"about\" page also has the date displayed.\n\nAs usual, there are a couple of ways to make the date display only on posts. We could do an \"if\" statement like we did on the home page. Another way would be to create a separate template for posts.\n\nThe \"if\" solution works for sites that have just a couple of content types. It aligns with the principle of \"code for today,\" too.\n\nLet's assume, though, that we've made our site so complex that we feel we have to create a new template type. In Hugo-speak, we're going to create a section template.\n\nLet's restore the default single template before we forget.\n\n```\n$ mkdir themes\/zafta\/layouts\/post\n$ vi themes\/zafta\/layouts\/_default\/single.html\n partial \"header.html\" . \n\n  <h1> .Title <\/h1>\n   .Content \n\n partial \"footer.html\" . \n:wq\n```\n\nNow we'll update the post's version of the single template. If you remember Hugo's rules, the template engine will use this version over the default.\n\n```\n$ vi themes\/zafta\/layouts\/post\/single.html\n partial \"header.html\" . \n\n  <h1> .Title <\/h1>\n  <h2> .Date.Format \"Mon, Jan 2, 2006\" <\/h2>\n   .Content \n\n partial \"footer.html\" . \n:wq\n\n```\n\nNote that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn't.\n\n### Don't Repeat Yourself\n\nDRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you're figuring that out, accept that you'll be doing some refactoring. Hugo makes that easy and fast, so it's okay to delay splitting up a template.\n"}
{"Path":".\/tutorials\/github-pages-blog.md","Content":"---\naliases:\n    - \/tutorials\/github_pages_blog\/\nauthor: Spencer Lyon\ndate: 2014-03-21\nlinktitle: Hosting on GitHub\nmenu:\n  main:\n    parent: tutorials\nnext: \/tutorials\/mathjax\nprev: \/tutorials\/creating-a-new-theme\ntitle: Hosting on GitHub Pages\nweight: 10\n---\n\n> *This tutorial was contributed by [Spencer Lyon](http:\/\/sglyon.com\/).*\n\n## Introduction\n\nMany Hugo users have expressed interest in seeing a tutorial for how to set up a blog that is generated by Hugo and hosted on GitHub Pages. This tutorial will do just that. We only require that the reader has Hugo installed correctly and is comfortable with git and GitHub.\n\nDuring this tutorial, I will walk you through the main steps I took to create an example blog available at [http:\/\/spencerlyon2.github.io\/hugo_gh_blog](http:\/\/spencerlyon2.github.io\/hugo_gh_blog). The source code for this blog is on [GitHub](https:\/\/github.com\/spencerlyon2\/hugo_gh_blog). Readers are encouraged to download the example repository and follow along.\n\n### Find a Home for Your Files\n\nAs our goal is to host a website using GitHub Pages, it is natural for us to host the content of the page in a GitHub repository. Thus, the first step is to either create a new repository on GitHub or create a new directory within an existing repository where the content of the website will live. To do this, I created the repository [spencerlyon2\/hugo_gh_blog](https:\/\/github.com\/spencerlyon2\/hugo_gh_blog).\n\n## Create the Blog\n\n### Write a `config.yaml` File\n\nThe very first step in creating a new Hugo site is to [write the config file](\/overview\/configuration\/). This config file is important for at least two reasons: (1) this is where site-wide settings (like the websites `baseurl`) go, and (2) the config file dictates to some extent how Hugo will generate the website. For the example website I created a file `config.yaml` with the following contents\n\n    ---\n    contentdir: \"content\"\n    layoutdir: \"layouts\"\n    publishdir: \"public\"\n    indexes:\n      category: \"categories\"\n    baseurl: \"http:\/\/spencerlyon2.github.io\/hugo_gh_blog\"\n    title: \"Hugo Blog Template for GitHub Pages\"\n    canonifyurls: true\n    ...\n\n> **Caveat:** Hugo's former default of `canonifyurls: true` has been changed\n> to `false` since this tutorial has written.  **Please make sure you manually\n> add `canonifyurls: true` to your `config.yaml`** if you are using Spencer's\n> https:\/\/github.com\/spencerlyon2\/hugo_gh_blog for this tutorial, or you *will*\n> run into problems such as the CSS files not loading.\n\n> See [\"Canonicalization: Caveat\" on the \"Extras: URLs page\"](\/extras\/urls\/)\n> for more information.\n\n### Define Structure of Website\n\nHugo assumes that you organize the content of your site in a meaningful way and uses the same structure to render the website. Notice that we have the line `contentdir: \"content\"` in our configuration file. This means that all the actual content of the website should be placed somewhere within a folder named `content`. Hugo treats all directories in `content` as sections. For our example we only need one section: a place to hold our blog posts. So we created two new folders:\n\n```\n\u25be <root>\/\n    \u25be content\/\n        \u25be posts\/\n```\n\n### Create HTML Templates\n\nThe next step is to define the look and feel of your new website. Because Hugo will generate the site using HTML templates written by the user (you), this step is very subjective. I will merely present one possible theme that could be used to generate a blog. I decided to base the example project on a Jekyll theme called [Lanyon](http:\/\/lanyon.getpoole.com\/). The Lanyon theme is pure CSS and a slightly modified version of the CSS is in the `\/static\/css` directory of the example repository. If you are following along, you should grab the `static` folder from the example repository and put it alongside the `content` folder you just created.\n\nBecause there are so many files needed to fully compose a complete website, I will not be able to go through each of them here. I will, however, show what the directory structure should look like when all is said and done:\n\n```\n\u25be <root>\/\n    \u25be content\/\n        \u25be posts\/\n            <blog posts>.md\n    \u25be static\/\n        \u25be css\/\n            lanyon.css\n            poole.css\n    \u25be layouts\/\n        \u25be partials\/\n            <templates to be used in other files>.html\n        \u25be posts\/\n            li.html\n            single.html\n            summary.html\n        \u25be indexes\/\n            category.html\n            indexes.html\n            posts.html\n        index.html\n    README.md\n```\n\nEach of the files in the example repository is well commented with a description of what the file as a whole does as well as an explanation of all major components in the file. If you are new to web development and\/or Hugo, I encourage you to search through these files to get a feel for how Hugo templates work and how the site is stitched together.\n\n### Add Some Content\n\nThe final step in creating the blog is to add some actual blog posts. To do this, simply create one Markdown file (with extension `.md`) for each new blog post. At the top of each file you should include a metadata section that tells Hugo some things about the post (see [docs](\/content\/front-matter\/)). For example, consider the yaml metadata section from the top of the file `\/content\/posts\/newest.md` from the example repository:\n\n    ---\n    title: \"Just another sample post\"\n    date: \"2014-03-29\"\n    description: \"This should be a more useful description\"\n    categories: \n        - \"hugo\"\n        - \"fun\"\n        - \"test\"\n    ---\n\nThe keys set in this section are the mandatory `title` and `date` as well as the optional `description` and `categories`. Each of these items is used throughout the templates found in the `\/layouts` directory and gives Hugo information about the post from other pages in the website.\n\n## Configure `git` Workflow\n\nOnce the site is set up and working properly, we need to push it to the correct branch of a GitHub repository so the website can be served through GitHub Pages. There are many ways to do this. Here I will show the workflow I currently use to manage my websites that are hosted through GitHub Pages.\n\nGitHub Pages will serve up a website for any repository that has a branch called `gh-pages` with a valid `index.html` file at that branch's root. A typical workflow might be to keep the content of a website on the `master` branch of a repository and the generated website on the `gh-pages` branch. This provides nice separation between input and output, but can be very tedious to work with. As a workaround, we will use the `git subtree` family of commands to have the `public` directory (or whatever `publishdir` is set to in your `config.yaml`) mirror the root of the `gh-pages` branch of the repository. This will allow us to do all our work on the `master` branch, run Hugo to have the site output into the `public` directory, and then push that directory directly to the correct place for GitHub Pages to serve our site.\n\nTo get this properly set up, we will execute a series of commands at the terminal. I will include all of them in one place here for easy copy and paste, and will explain what each line does via comments. Note that this is to be run from the `<root>` directory (wherever the `content` and `layout` folders of your Hugo project live). Also note that you will need to change the commands that have the example repository GitHub address so that they point to your repo.\n\n    # Create a new orphand branch (no commit history) named gh-pages\n    git checkout --orphan gh-pages\n\n    # Unstage all files\n    git rm --cached $(git ls-files)\n\n    # Grab one file from the master branch so we can make a commit\n    git checkout master README.md\n\n    # Add and commit that file\n    git add .\n    git commit -m \"INIT: initial commit on gh-pages branch\"\n\n    # Push to remote gh-pages branch \n    git push origin gh-pages\n\n    # Return to master branch\n    git checkout master\n\n    # Remove the public folder to make room for the gh-pages subtree\n    rm -rf public\n\n    # Add the gh-pages branch of the repository. It will look like a folder named public\n    git subtree add --prefix=public git@github.com:spencerlyon2\/hugo_gh_blog.git gh-pages --squash\n\n    # Pull down the file we just committed. This helps avoid merge conflicts\n    git subtree pull --prefix=public git@github.com:spencerlyon2\/hugo_gh_blog.git gh-pages\n\n    # Run hugo. Generated site will be placed in public directory (or omit -t ThemeName if you're not using a theme)\n    hugo -t ThemeName\n\n\n    # Add everything\n    git add -A\n\n    # Commit and push to master\n    git commit -m \"Updating site\" && git push origin master\n\n    # Push the public subtree to the gh-pages branch\n    git subtree push --prefix=public git@github.com:spencerlyon2\/hugo_gh_blog.git gh-pages\n\nAfter executing these commands and waiting for the GitHub servers to update, the website we just created was live at [http:\/\/spencerlyon2.github.io\/hugo_gh_blog](http:\/\/spencerlyon2.github.io\/hugo_gh_blog). \n\n### `deploy.sh`\n\nNow, as you add new posts to your blog, you will follow steps that look something like the following:\n \n* Create the Markdown source for the new post within the `content\/posts` directory\n* Preview your work by running Hugo in server mode with `hugo server --watch`\n* Run Hugo not in server mode so that the generated urls will be correct for the website\n* Add and commit the new post in `master` branch\n* Push the `master` branch\n* Push the public subtree to the remote `gh-pages` branch\n\nThe first two items in the previous list are simply a way to conveniently preview your content as you write. This is a dynamic and fairly streamlined process. All the remaining items, however, are the same every time you want to add new content to the website. To make this repetitive process easier, I have adapted a script from the source repository for the [Chimer Arts & Maker Space](https:\/\/github.com\/chimera\/chimeraarts.org) website that is highlighted in the [Hugo Showcase](\/showcase\/). The script lives in a file called `deploy.sh` and has the following contents:\n\n**Note:**\n\nThe first command `hugo` assumes you are running with all the default settings. \n\nTo use a theme, make sure to specify it with `-t ThemeName` instead (or include the theme in the config file).\n\n    hugo -t ThemeName\n\nTo build all draft posts *(If you only have drafts, no site will be generated)*\n\n    hugo --buildDrafts\n\n**Deploy.sh:**\n\n    #!\/bin\/bash\n\n    echo -e \"\\033[0;32mDeploying updates to GitHub...\\033[0m\"\n\n    # Build the project. \n    hugo\n    \n    # Add changes to git.\n    git add -A\n\n    # Commit changes.\n    msg=\"rebuilding site `date`\"\n    if [ $# -eq 1 ]\n      then msg=\"$1\"\n    fi\n    git commit -m \"$msg\"\n\n    # Push source and build repos.\n    git push origin master\n    git subtree push --prefix=public git@github.com:spencerlyon2\/hugo_gh_blog.git gh-pages\n\nNow I can replace the last four items from our workflow list with a single command `bash deploy.sh`. This script accepts as an optional argument the commit message that git should use when committing your changes. If you wish to include a custom commit message, do so by putting it quotes after calling bash on the script: `bash deploy.sh \"<my commit msg>\"`. If you choose not to specify the commit message, one will be generated for you using the current time.\n\n## Configure `git` Workflow, the Alternate Way\nThe above uses a `git subtree` to deploy to Gits `gh-pages` branch. This works great, but with one drawback: It requires the generated content to be committed to the source branch.\n\nThere's another approach:\n\n1. Set up your Hugo-site on `master`\n2. Create an orphaned `gh-pages` branch. (See [here](https:\/\/help.github.com\/articles\/creating-project-pages-manually\/) for more information.)\n3. Follow the instructions below.\n\nSo, assuming you have your `gh-pages` set up, and `master` has a commit with some content you want to publish: \n\n```\n# Fetch the deployment script into the root of your source tree, make it executable.\nwget https:\/\/github.com\/X1011\/git-directory-deploy\/raw\/master\/deploy.sh && chmod +x deploy.sh\n\n# For setting it up to build to a folder other than \"dist\", see the options in deploy.sh.\n# Build the site to \/dist.\nhugo -d dist\n\n# Run the deploy.sh script installed above.\n.\/deploy.sh\n```\n\nThis will use the last commit as a base for the commit message to the `gh-pages` branch.\n\nFor more information about the deployment script, see this [README](https:\/\/github.com\/X1011\/git-directory-deploy).\n\n## Hosting Personal\/Organization Pages\n\nAs mentioned [in this GitHub's article](https:\/\/help.github.com\/articles\/user-organization-and-project-pages\/), besides project pages, you may also want to host a user\/organization page. Here are the key differences:\n\n> - You must use the `username.github.io` naming scheme.\n> - Content from the `master` branch will be used to build and publish your GitHub Pages site.\n\nIt becomes much simpler in that case: we'll create two separate repos, one for Hugo's content, and a git submodule with the `public` folder's content in it.\n\nStep by step:\n\n1. Create on GitHub `<your-project>-hugo` repository (it will host Hugo's content)\n2. Create on GitHub `<username>.github.io` repository (it will host the `public` folder: the static website)\n2. `git clone <<your-project>-hugo-url> && cd <your-project>-hugo`\n3. Make your website work locally (`hugo serve --watch -t <yourtheme>`)\n4. Once you are happy with the results, <kbd>Ctrl<\/kbd>+<kbd>C<\/kbd> (kill server) and `rm -rf public` (don't worry, it can always be regenerated with `hugo -t <yourtheme>`)\n5. `git submodule add git@github.com:<username>\/<username>.github.io.git public`\n6. Almost done: add a `deploy.sh` script to help you (and make it executable: `chmod +x deploy.sh`):\n\n```\n#!\/bin\/bash\n\necho -e \"\\033[0;32mDeploying updates to GitHub...\\033[0m\"\n\n# Build the project. \nhugo # if using a theme, replace by `hugo -t <yourtheme>`\n\n# Go To Public folder\ncd public\n# Add changes to git.\ngit add -A\n\n# Commit changes.\nmsg=\"rebuilding site `date`\"\nif [ $# -eq 1 ]\n  then msg=\"$1\"\nfi\ngit commit -m \"$msg\"\n\n# Push source and build repos.\ngit push origin master\n\n# Come Back\ncd ..\n```\n7. `.\/deploy.sh \"Your optional commit message\"` to send changes to `<username>.github.io` (careful, you may also want to commit changes on the `<your-project>-hugo` repo).\n\nThat's it! Your personal page is running at [http:\/\/username.github.io\/](http:\/\/username.github.io\/) (after up to 10 minutes delay).\n\n## Conclusion\n\nHopefully this tutorial helped you get your website off its feet and out into the open! If you have any further questions, feel free to contact the community through the [discussion forum](\/community\/mailing-list\/).\n"}
{"Path":".\/tutorials\/mathjax.md","Content":"---\nauthor: Spencer Lyon\ndate: 2014-03-20\nmenu:\n  main:\n    parent: tutorials\nnext: \/tutorials\/migrate-from-jekyll\nprev: \/tutorials\/github-pages-blog\ntitle: MathJax Support\nweight: 10\n---\n\n## What is MathJax?\n\n[MathJax](http:\/\/www.mathjax.org\/) is a JavaScript library that allows the display of mathematical expressions described via a LaTeX-style syntax in the HTML (or Markdown) source of a web page. As it is a pure a JavaScript library, getting it to work within Hugo is fairly straightforward, but does have some oddities that will be discussed here.\n\nThis is not an introduction into actually using MathJax to render typeset mathematics on your website. Instead, this page is a collection of tips and hints for one way to get MathJax working on a website built with Hugo.\n\n## Enabling MathJax\n\nThe first step is to enable MathJax on pages that you would like to have typeset math. There are multiple ways to do this (adventerous readers can consult the [Loading and Configuring](http:\/\/docs.mathjax.org\/en\/latest\/configuration.html) section of the MathJax documentation for additional methods of including MathJax), but the easiest way is to use the secure MathJax CDN by including the following HTML snippet in the source of a page:\n\n    <script type=\"text\/javascript\"\n      src=\"https:\/\/cdn.mathjax.org\/mathjax\/latest\/MathJax.js?config=TeX-AMS-MML_HTMLorMML\">\n    <\/script>\n\nOne way to ensure that this code is included in all pages is to put it in one of the templates that live in the `layouts\/partials\/` directory. For example, I have included this in the bottom of my template `footer.html` because I know that the footer will be included in every page of my website.\n\n### Options and Features\n\nMathJax is a stable open-source library with many features. I encourage the interested reader to view the [MathJax Documentation](http:\/\/docs.mathjax.org\/en\/latest\/index.html), specifically the sections on [Basic Usage](http:\/\/docs.mathjax.org\/en\/latest\/index.html#basic-usage) and [MathJax Configuration Options](http:\/\/docs.mathjax.org\/en\/latest\/index.html#mathjax-configuration-options).\n\n## Issues with Markdown\n\nAfter enabling MathJax, any math entered in-between proper markers (see documentation) will be processed and typeset in the web page. One issue that comes up, however, with Markdown is that the underscore character (`_`) is interpreted by Markdown as a way to wrap text in `emph` blocks while LaTeX (MathJax) interprets the underscore as a way to create a subscript. This \"double speak\" of the underscore can result in some unexpected and unwanted behavior.\n\n### Solution\n\nThere are multiple ways to remedy this problem. One solution is to simply escape each underscore in your math code by entering `\\_` instead of `_`. This can become quite tedious if the equations you are entering are full of subscripts.\n\nAnother option is to tell Markdown to treat the MathJax code as verbatim code and not process it. One way to do this is to wrap the math expression inside a `<div>` `<\/div>` block. Markdown would ignore these sections and they would get passed directly on to MathJax and processed correctly. This works great for display style mathematics, but for inline math expressions the line break induced by the `<div>` is not acceptable. The syntax for instructing Markdown to treat inline text as verbatim is by wrapping it in backticks (`` ` ``). You might have noticed, however, that the text included in between backticks is rendered differently than standard text (on this site these are items highlighted in red). To get around this problem, we could create a new CSS entry that would apply standard styling to all inline verbatim text that includes MathJax code. Below I will show the HTML and CSS source that would accomplish this (note this solution was adapted from [this blog post](http:\/\/doswa.com\/2011\/07\/20\/mathjax-in-markdown.html)---all credit goes to the original author).\n\n    <script type=\"text\/x-mathjax-config\">\n    MathJax.Hub.Config({\n      tex2jax: {\n        inlineMath: [['$','$'], ['\\\\(','\\\\)']],\n        displayMath: [['$$','$$'], ['\\[','\\]']],\n        processEscapes: true,\n        processEnvironments: true,\n        skipTags: ['script', 'noscript', 'style', 'textarea', 'pre'],\n        TeX: { equationNumbers: { autoNumber: \"AMS\" },\n             extensions: [\"AMSmath.js\", \"AMSsymbols.js\"] }\n      }\n    });\n    <\/script>\n\n    <script type=\"text\/x-mathjax-config\">\n      MathJax.Hub.Queue(function() {\n        \/\/ Fix <code> tags after MathJax finishes running. This is a\n        \/\/ hack to overcome a shortcoming of Markdown. Discussion at\n        \/\/ https:\/\/github.com\/mojombo\/jekyll\/issues\/199\n        var all = MathJax.Hub.getAllJax(), i;\n        for(i = 0; i < all.length; i += 1) {\n            all[i].SourceElement().parentNode.className += ' has-jax';\n        }\n    });\n    <\/script>\n\nAs before, this content should be included in the HTML source of each page that will be using MathJax. The next code snippet contains the CSS that is used to have verbatim MathJax blocks render with the same font style as the body of the page.\n\n\n    code.has-jax {font: inherit;\n                  font-size: 100%;\n                  background: inherit;\n                  border: inherit;\n                  color: #515151;}\n\nIn the CSS snippet, notice the line `color: #515151;`. `#515151` is the value assigned to the `color` attribute of the `body` class in my CSS. In order for the equations to fit in with the body of a web page, this value should be the same as the color of the body.\n\n### Usage\n\nWith this setup, everything is in place for a natural usage of MathJax on pages generated using Hugo. In order to include inline mathematics, just put LaTeX code in between `` `$ TeX Code $` `` or `` `\\( TeX Code \\)` ``. To include display style mathematics, just put LaTeX code in between `<div>$$TeX Code$$<\/div>`. All the math will be properly typeset and displayed within your Hugo generated web page!\n"}
{"Path":".\/tutorials\/migrate-from-jekyll.md","Content":"---\ndate: 2014-03-10\nlinktitle: Migrating from Jekyll\nmenu:\n  main:\n    parent: tutorials\nprev: \/tutorials\/mathjax\ntitle: Migrate to Hugo from Jekyll\nweight: 10\n---\n\n## Move static content to `static`\nJekyll has a rule that any directory not starting with `_` will be copied as-is to the `_site` output. Hugo keeps all static content under `static`. You should therefore move it all there.\nWith Jekyll, something that looked like\n\n    \u25be <root>\/\n        \u25be images\/\n            logo.png\n\nshould become\n\n    \u25be <root>\/\n        \u25be static\/\n            \u25be images\/\n                logo.png\n\nAdditionally, you'll want any files that should reside at the root (such as `CNAME`) to be moved to `static`.\n\n## Create your Hugo configuration file\nHugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the [Hugo configuration documentation](\/overview\/configuration\/) for details.\n\n## Set your configuration publish folder to `_site`\nThe default is for Jekyll to publish to `_site` and for Hugo to publish to `public`. If, like me, you have [`_site` mapped to a git submodule on the `gh-pages` branch](http:\/\/blog.blindgaenger.net\/generate_github_pages_in_a_submodule.html), you'll want to do one of two alternatives:\n\n1. Change your submodule to point to map `gh-pages` to public instead of `_site` (recommended).\n\n        git submodule deinit _site\n        git rm _site\n        git submodule add -b gh-pages git@github.com:your-username\/your-repo.git public\n\n2. Or, change the Hugo configuration to use `_site` instead of `public`.\n\n        {\n            ..\n            \"publishdir\": \"_site\",\n            ..\n        }\n\n## Convert Jekyll templates to Hugo templates\nThat's the bulk of the work right here. The documentation is your friend. You should refer to [Jekyll's template documentation](http:\/\/jekyllrb.com\/docs\/templates\/) if you need to refresh your memory on how you built your blog and [Hugo's template](\/layout\/templates\/) to learn Hugo's way.\n\nAs a single reference data point, converting my templates for [heyitsalex.net](http:\/\/heyitsalex.net\/) took me no more than a few hours.\n\n## Convert Jekyll plugins to Hugo shortcodes\nJekyll has [plugins](http:\/\/jekyllrb.com\/docs\/plugins\/); Hugo has [shortcodes](\/doc\/shortcodes\/). It's fairly trivial to do a port.\n\n### Implementation\nAs an example, I was using a custom [`image_tag`](https:\/\/github.com\/alexandre-normand\/alexandre-normand\/blob\/74bb12036a71334fdb7dba84e073382fc06908ec\/_plugins\/image_tag.rb) plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.\n\nJekyll's plugin:\n\n    module Jekyll\n      class ImageTag < Liquid::Tag\n        @url = nil\n        @caption = nil\n        @class = nil\n        @link = nil\n        \/\/ Patterns\n        IMAGE_URL_WITH_CLASS_AND_CAPTION =\n        IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = \/(\\w+)(\\s+)((https?:\\\/\\\/|\\\/)(\\S+))(\\s+)\"(.*?)\"(\\s+)->((https?:\\\/\\\/|\\\/)(\\S+))(\\s*)\/i\n        IMAGE_URL_WITH_CAPTION = \/((https?:\\\/\\\/|\\\/)(\\S+))(\\s+)\"(.*?)\"\/i\n        IMAGE_URL_WITH_CLASS = \/(\\w+)(\\s+)((https?:\\\/\\\/|\\\/)(\\S+))\/i\n        IMAGE_URL = \/((https?:\\\/\\\/|\\\/)(\\S+))\/i\n        def initialize(tag_name, markup, tokens)\n          super\n          if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK\n            @class   = $1\n            @url     = $3\n            @caption = $7\n            @link = $9\n          elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION\n            @class   = $1\n            @url     = $3\n            @caption = $7\n          elsif markup =~ IMAGE_URL_WITH_CAPTION\n            @url     = $1\n            @caption = $5\n          elsif markup =~ IMAGE_URL_WITH_CLASS\n            @class = $1\n            @url   = $3\n          elsif markup =~ IMAGE_URL\n            @url = $1\n          end\n        end\n        def render(context)\n          if @class\n            source = \"<figure class='#{@class}'>\"\n          else\n            source = \"<figure>\"\n          end\n          if @link\n            source += \"<a href=\\\"#{@link}\\\">\"\n          end\n          source += \"<img src=\\\"#{@url}\\\">\"\n          if @link\n            source += \"<\/a>\"\n          end\n          source += \"<figcaption>#{@caption}<\/figcaption>\" if @caption\n          source += \"<\/figure>\"\n          source\n        end\n      end\n    end\n    Liquid::Template.register_tag('image', Jekyll::ImageTag)\n\nis written as this Hugo shortcode:\n\n    <!-- image -->\n    <figure  with .Get \"class\" class=\".\" end >\n         with .Get \"link\"<a href=\".\"> end \n            <img src=\" .Get \"src\" \"  if or (.Get \"alt\") (.Get \"caption\") alt=\" with .Get \"alt\".else .Get \"caption\"  end \" end  \/>\n         if .Get \"link\"<\/a> end \n         if or (or (.Get \"title\") (.Get \"caption\")) (.Get \"attr\")\n        <figcaption> if isset .Params \"title\" \n             .Get \"title\"  end \n             if or (.Get \"caption\") (.Get \"attr\")<p>\n             .Get \"caption\" \n             with .Get \"attrlink\"<a href=\".\">  end \n                 .Get \"attr\" \n             if .Get \"attrlink\"<\/a>  end \n            <\/p>  end \n        <\/figcaption>\n         end \n    <\/figure>\n    <!-- image -->\n\n### Usage\nI simply changed:\n\n    {% image full http:\/\/farm5.staticflickr.com\/4136\/4829260124_57712e570a_o_d.jpg \"One of my favorite touristy-type photos. I secretly waited for the good light while we were \"having fun\" and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\" ->http:\/\/www.flickr.com\/photos\/alexnormand\/4829260124\/in\/set-72157624547713078\/ %}\n\nto this (this example uses a slightly extended version named `fig`, different than the built-in `figure`):\n\n    %\/* fig class=\"full\" src=\"http:\/\/farm5.staticflickr.com\/4136\/4829260124_57712e570a_o_d.jpg\" title=\"One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\" link=\"http:\/\/www.flickr.com\/photos\/alexnormand\/4829260124\/in\/set-72157624547713078\/\" *\/%\n\nAs a bonus, the shortcode named parameters are, arguably, more readable.\n\n## Finishing touches\n### Fix content\nDepending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that `hugo server --watch` is your friend. Test your changes and fix errors as needed.\n\n### Clean up\nYou'll want to remove the Jekyll configuration at this point. If you have anything else that isn't used, delete it.\n\n## A practical example in a diff\n[Hey, it's Alex](http:\/\/heyitsalex.net\/) was migrated in less than a _father-with-kids day_ from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this [diff](https:\/\/github.com\/alexandre-normand\/alexandre-normand\/compare\/869d69435bd2665c3fbf5b5c78d4c22759d7613a...b7f6605b1265e83b4b81495423294208cc74d610).\n"}
